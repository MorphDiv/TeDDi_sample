# language_name_wals:	Russian
# language_name_glotto:	Russian
# ISO_6393:	rus
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Cyrl
# special_characters:	NA
# short_description:	OpenOffice
# source:	https://object.pouta.csc.fi/OPUS-OpenOffice/v3/raw/ru.zip
# copyright_short:	http://opus.nlpl.eu/OpenOffice.php
# copyright_long:	http://opus.nlpl.eu/OpenOffice.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Надстройка для программирования в $[officename] Calc
/text/scalc/01/04060112.xhp
Sun Microsystems, Inc.
converted from old format - fpe dedr: fixed #i30855#
программирование; надстройки
совместно используемые библиотеки; программирование
функции внешних DLL
функции; DLL надстроек для $[officename] Calc
надстройки; для программирования
mw made &quot; external... &quot; a one level entry and deleted one &quot; functions;... &quot; entry
Надстройка для программирования в $[officename] Calc
функции интерфейса программирования
.
мастере функций
в категории
Надстройка
.
Если программирование надстройки выполняется пользователем, он может ознакомиться с функциями, которые требуется экспортировать в
общую внешнюю
библиотеку DLL
для успешного добавления надстроек.
раздеяемой библиотеки
DLL
.
Для того, чтобы $[officename]смог распознать
разделяемую библиотеку
DLL
, этот файл должен содержать некоторые свойства, описанные ниже.
Эта информация позволяет данному подключаемому модулю иметь свой
Мастер функций
в $[officename] Calc.
Понятие надстройки
Каждая библиотека надстроек позволяет использовать несколько функций.
Некоторые из них предназначены для целей администрирования.
Для пользовательских функций можно указывать любые имена.
Однако параметры функций должны соответствовать определенным требованиям.
Соглашения об именовании и вызове зависят от платформы.
общей библиотеки
надстроек DLL
GetFunctionCount
и
GetFunctionData
.
С помощью этих функций можно определять как функции, так и типы параметров и возвращаемые значения.
Для возвращаемых значений поддерживаются двойные и строковые массивы.
В качестве параметров поддерживаются диапазоны ячеек
Двойной массив
,
Строковый массив
и
Массив ячеек
.
Параметры передаются с использованием ссылок.
Поэтому изменение значений возможно.
Но в $[officename] Calc эта возможность не поддерживается, т. к. ее применение в электронных таблицах нецелесообразно.
Во время выполнения можно перезагружать библиотеки и анализировать их содержимое с помощью функций администрирования.
Для каждой функции существуют данные о количестве и типе параметров, именах и номерах внешних функций.
Функции вызываются синхронно, а результат возвращается немедленно.
Можно также использовать функции реального времени (асинхронные).
Но подробное описание этих функций не приводится из-за их сложности.
Общие сведения об интерфейсе
Максимальное количество параметров для надстройки, добавленной к $[officename] Calc, равно 16: одно возвращаемое значение и максимум 15 входных параметров функции.
Типы данных определяются следующим образом:
Типы данных
Определение
CALLTYPE
Под Windows:
FAR PASCAL (_far _pascal)
Другой: по умолчанию (по умолчанию для операционной системы)
USHORT
Целое число из 2 байтов без знака
DOUBLE
Зависящий от платформы 8-байтовый формат
Paramtype
В зависимости от платформы, например целое число
Указатель PTR_DOUBLE =0 на двойной массив
Указатель PTR_STRING =1 на строку, которая оканчивается на ноль
Указатель PTR_DOUBLE_ARR =2 на двойной массив
Указатель PTR_STRING_ARR =3 на строковый массив
Указатель PTR_CELL_ARR =4 на массив ячеек
НЕТ =5
Функции общей библиотеки
DLL
внешней общей
библиотеки DLL
.
общих библиотек
DLL
справедливо следующее:
void CALLTYPE fn(out, in1, in2, ...)
Вывод.
Полученное значение
диапазон ячеек
представляет собой двойной массив, строковый массив или массив ячеек.
GetFunctionCount()
GetFunctionData
и
GetParameterDescription
.
Синтаксис
void CALLTYPE GetFunctionCount(USHORT & nCount)
Параметр
USHORT & nCount:
Вывод.
Ссылка на переменную, которая должна содержать количество функций надстроек.
Например, если надстройка включает 5 функций для $[officename] Calc, nCount=5.
GetFunctionData()
Возвращает важные сведения о функции надстройки.
Синтаксис
void CALLTYPE GetFunctionData(USHORT & nNo, char* pFuncName, USHORT & nParamCount, Paramtype* peType, char* pInternalName)
Параметр
USHORT & nNo:
Ввод.
Номер функции от 0 до nCount-1 включительно.
char* pFuncName:
общую библиотеку
DLL
.
Это имя не определяет имя функции в
мастере функций
.
USHORT & nParamCount:
Вывод.
Количество параметров в функции надстройки.
Это число должно быть больше 0, т. к. всегда существует возвращаемое значение.
Максимальное количество - 16.
Paramtype* peType:
Вывод.
Указатель на массив из 16 переменных с типом &quot; Paramtype &quot; .
Первые записи &quot; nParamCount &quot; заполняются нужным типом параметра.
char* pInternalName:
мастере функций
.
Имя может содержать умляуты.
Параметры pFuncName и pInternalName являются массивами символов с размером 256 в $[officename] Calc.
GetParameterDescription()
мастере функций
.
Синтаксис
void CALLTYPE GetParameterDescription(USHORT & nNo, USHORT & nParam, char* pName, char* pDesc)
Параметр
USHORT & nNo:
Ввод.
Номер функции в библиотеке (от 0 до nCount-1).
USHORT & nParam:
Ввод.
Параметр, для которого требуется получить описание.
Параметры начинаются с 1.
Если nParam имеет значение 0, описание предоставляется в pDesc.
В этом случае pName не имеет значения.
char* pName:
Вывод.
Имя или тип параметра, например слово &quot; Число &quot; , &quot; Строка &quot; , &quot; Дата &quot; и т. д.
Реализовано в $[officename] Calc в качестве char[256].
char* pDesc:
Вывод.
Описание параметра, например &quot; Значение, при котором рассчитывается универсальное множество &quot; .
Реализовано в $[officename] Calc в качестве char[256].
мастере функций
ограничено, поэтому размер в 256 символов невозможно использовать полностью.
Диапазоны ячеек
Приведенные ниже таблицы содержат сведения о том, какие структуры данных необходимы внешнему программному модулю для передачи диапазонов ячеек. $[officename] Calc распознает три типа массивов в зависимости от типа данных.
Double Array
В качестве параметра можно передать диапазон ячеек со значениями типа Number или Double.
Массив значений типа Double в $[officename] Calc определяется следующим образом:
Смещение
Название
Описание
0
Стлб1
Номер столбца в верхнем левом углу диапазона ячеек.
Нумерация начинается с 0.
2
Стр1
Номер строки в верхнем левом углу диапазона ячеек.
Нумерация начинается с 0.
4
Таб1
Номер таблицы в верхнем левом углу диапазона ячеек.
Нумерация начинается с 0.
6
Стлб2
Номер столбца в нижнем правом углу диапазона ячеек.
Нумерация начинается с 0.
8
Стр2
Номер строки в нижнем правом углу диапазона ячеек.
Нумерация начинается с 0.
10
Таб2
Номер таблицы в нижнем правом углу диапазона ячеек.
Нумерация начинается с 0.
12
Количество
Количество элементов.
Пустые ячейки не подсчитываются и не передаются.
14
Столбец
Номер столбца для элемента.
Нумерация начинается с 0.
16
Строка
Номер строки для элемента.
Нумерация начинается с 0.
18
Таб
Номер таблицы для элемента.
Нумерация начинается с 0.
20
Ошибка
Номер ошибки.
Значение 0 указывает на отсутствие ошибки.
Если элемент содержится в ячейке с формулой, номер ошибки определяется этой формулой.
22
Значение
Переменная IEEE из 8 байтов с типом Double или Float
30
...
Следующий элемент
String Array
Диапазон ячеек, который содержит значения с типом данных Text и передается как массив значений типа String.
Массив типа String в $[officename] Calc определяется следующим образом:
Смещение
Название
Описание
0
Стлб1
Номер столбца в верхнем левом углу диапазона ячеек.
Нумерация начинается с 0.
2
Стр1
Номер строки в верхнем левом углу диапазона ячеек.
Нумерация начинается с 0.
4
Таб1
Номер таблицы в верхнем левом углу диапазона ячеек.
Нумерация начинается с 0.
6
Стлб2
Номер столбца в нижнем правом углу диапазона ячеек.
Нумерация начинается с 0.
8
Стр2
Номер строки в нижнем правом углу диапазона ячеек.
Нумерация начинается с 0.
10
Таб2
Номер таблицы в нижнем правом углу диапазона ячеек.
Нумерация начинается с 0.
12
Считать
Количество элементов.
Пустые ячейки не подсчитываются и не передаются.
14
Столбец
Номер столбца для элемента.
Нумерация начинается с 0.
16
Строка
Номер строки для элемента.
Нумерация начинается с 0.
18
Таб
Номер таблицы для элемента.
Нумерация начинается с 0.
20
Ошибка
Номер ошибки.
Значение 0 указывает на отсутствие ошибки.
Если элемент содержится в ячейке с формулой, номер ошибки определяется этой формулой.
22
Длина
Длина следующей строки, включая последний нулевой байт.
Если длина с учетом последнего нулевого байта имеет нечетное значение, к строке добавляется второй ноль для получения четного числа.
Поэтому для расчета длины используется формула ((StrLen+2) & ~1).
24
Строка
Строка с последним нулевым байтом
24+Длина
...
Следующий элемент
Cell Array
Массивы ячеек используются для вызова диапазонов ячеек, которые содержат текст и числа.
Массив ячеек в $[officename] Calc определяется следующим образом:
Смещение
Название
Описание
0
Стлб1
Номер столбца в верхнем левом углу диапазона ячеек.
Нумерация начинается с 0.
2
Стр1
Номер строки в верхнем левом углу диапазона ячеек.
Нумерация начинается с 0.
4
Таб1
Номер таблицы в верхнем левом углу диапазона ячеек.
Нумерация начинается с 0.
6
Стлб2
Номер столбца в нижнем правом углу диапазона ячеек.
Нумерация начинается с 0.
8
Стр2
Номер строки в нижнем правом углу диапазона ячеек.
Нумерация начинается с 0.
10
Таб2
Номер таблицы в нижнем правом углу диапазона ячеек.
Нумерация начинается с 0.
12
Считать
Количество элементов.
Пустые ячейки не подсчитываются и не передаются.
14
Столбец
Номер столбца для элемента.
Нумерация начинается с 0.
16
Строка
Номер строки для элемента.
Нумерация начинается с 0.
18
Таб
Номер таблицы для элемента.
Нумерация начинается с 0.
20
Ошибка
Номер ошибки.
Значение 0 указывает на отсутствие ошибки.
Если элемент содержится в ячейке с формулой, номер ошибки определяется этой формулой.
22
Тип
Тип содержимого ячейки:
0 == двойной, 1 == строковый
24
Значение или длина
Если тип == 0, переменная IEEE из 8 байтов с типом Double или Float
Если тип == ~1, длина следующей строки, включая последний нулевой байт.
Если длина с учетом последнего нулевого байта имеет нечетное значение, к строке добавляется второй ноль для получения четного числа.
Поэтому для расчета длины используется формула ((StrLen+2) & 1).
26, если тип==1
Строка
Если тип == 1, строка с последним нулевым байтом
32 или 26+длина
...
Следующий элемент