# language_name_wals:	Russian
# language_name_glotto:	Russian
# iso639_3:	rus
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Cyrl
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/ru.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Руководство по PHP
Пред.
Глава 5. Безопасность
След.
При инсталляции в виде модуля Apache
При использовании PHP, как Apache-модуль, данный модуль получает все права и разрешения Apache (обычно, права пользователя "nobody", т.е. "отсутствующего "пользователя). Это вносит некоторые сложности в систему безопасности и авторизации. К примеру, если PHP используется для обращения к базе данных, то в случае отсутствия встроенного контроля доступа в базе данных ее придется сделать доступной для пользователя "nobody". В этом случае скрипт злоумышленника может получить доступ на чтение и изменение базы данных даже без указания имени пользователя и пароля. Также возможно, что сетевой червь проникнет на страницу администратора и уничтожит все ваши базы данных. Можно защититься от этого путем введения авторизации в Apache, или разработав собственную модель доступа с использованием LDAP, файлов .htaccess (и др.) и использовать этот код, как часть ваших программ на PHP.
Часто случается так, что когда безопасность достигает уровня, где PHP (а в данном случае, Apache) практически не представляет проблемы безопасности, оказывается, что PHP не может записать ни одного файла в пользовательские каталоги. Или, допустим, не имеет доступа к базам данных.
PHP оказывается одинакого защищенным от записи дозволенных и недозволенных фалов, или от произведения дозволенных или недозволенных операций с базами данных.
Очень частая ошибка на этом этапе - дать PHP права "root", или администратора или каким-либо образом увеличить разрешения для Apache.
Установка для Apache разрешений администратора (root) очень опасна для системы в целом. Те, кто не является специалистами по безопасности, в данном случае должны избегать любых операций вроде "sudo "или "chroot".
Есть более простые решения. Используя open_basedir, можно контролировать и ограничивать использование PHP директорий. Также можно создать области "только для Apache", ограничив весь доступ не-пользовательскими или не-системными файлами.
Пред.
Начало
След.
При инсталляции в виде приложения CGI
Уровень выше
Безопасность файловой системы