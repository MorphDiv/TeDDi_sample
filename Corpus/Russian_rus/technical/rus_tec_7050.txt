# language_name_wals:	Russian
# language_name_glotto:	Russian
# iso639_3:	rus
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Cyrl
# special_characters:	NA
# short_description:	KDE4
# source:	https://object.pouta.csc.fi/OPUS-KDE4/v2/raw/ru.zip
# copyright_short:	http://opus.nlpl.eu/KDE4.php
# copyright_long:	http://opus.nlpl.eu/KDE4.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Глоссарий
В данной главе вы найдёте объяснение большинства непонятных слов, встречающихся в данном руководстве.
градусы
Градусы – единицы измерения углов или поворотов. Полный разворот – это 360 градусов, половина разворота - это 180 градусов и четверть разворота - 90 градусов. Входными параметрами команд налево, направо и направление являются углы в градусах.
входные параметры и возвращаемые значения команд
Некоторым командам необходимы входные параметры, некоторые возвращают значения. Есть такие, которые имеют и вход, и выход, а есть, наоборот, не имеющие ни входных параметров, ни возвращаемых значений.
Вот несколько команд, имеющих только входные параметры: вперёд 50 нов_ цвет_ пера 255, 0, 0 напиши "Привет!" Команда вперёд принимает в качестве входного параметра число 50. Данный параметр указывает команде вперёд на сколько пикселей вперёд должна продвинуться Черепашка. Входным параметром для нов_ цвет_ пера является цвет, а для напиши это будет строка. И не забывайте, что входным параметром также может являться контейнер. Следующий пример продемонстрирует это:
икс = 50 напиши икс строка = "Привет!" напиши строка
Теперь приведём примеры команд, возвращающих значения: x = окно_ вопроса "Введите что- нибудь и нажмите OK... спасибо!" r = случайное 1, 100 Команда окно_ вопроса принимает в качестве входного параметра строку, а возвращает число или строку. Как вы можете заметить, возвращаемое окно_ вопроса значение помещается в контейнер x. Команда случайное также возвращает значение. В данном случае это будет число от 1 до 100. Как и в случае с предыдущей командой, выходное значение случайное также помещается в контейнер, имеющий имя r. Надо заметить, что контейнеры x и r нигде до этого в коде примера не использовались.
Упомянем и команды, которые ничего не принимают и ничего не возвращают. Вот несколько примеров:
очисти перо_ подними обёртка_ вкл спрячь
подсветка синтаксиса
Это особенность & kturtle; позволяет сделать код более наглядным. С подсветкой синтаксиса весь код в редакторе выводится разными цветами, в зависимости от того, для чего предназначен тот или иной его кусок В следующем списке вы найдёте описание разных типов кода и цветов, которые они получают в редакторе кода.
Разные типы кода и их раскраска
команды
тёмно- красный
Обычные команды описаны здесь.
контроллеры выполнения
чёрный (жирный)
Специальные команды контроля выполнения, узнать больше можно здесь.
комментарии
серый
Строки комментария начинаются со знака комментария (#). Они игнорируются при выполнении программы. Комментарии необходимы для пояснения программистом того, что он делает в том или ином куске кода, а также для того, чтобы временно не выполнять какие- либо команды.
скобки [,]
светло- зелёный (жирный)
Скобки используются для группировки фрагмента программы. Зачастую скобки используются совместно с командами контроля выполнения.
команда выучи
светло- зелёный (жирный)
Команда выучи используется для создания новых команд.
строки
красный
Единственное, что мы скажем о строках – они должны начинаться и заканчиваться двойными кавычками (").
числа
тёмно- красный
Числа..., да вроде бы говорить о них нечего.
математические символы
Множеству команд требуется количество пикселей в качестве входных параметров. Вот эти команды: вперёд, назад, иди, иди_ гор, иди_ верт, нов_ размер_ холста и нов_ ширина_ пера.
светло- зелёный (жирный)
Множеству команд требуется количество пикселей в качестве входных параметров. Вот эти команды: вперёд, назад, иди, иди_ гор, иди_ верт, нов_ размер_ холста и нов_ ширина_ пера.
чёрный (жирный)
RGB комбинации в качестве входных параметров используются в двух командах: нов_ цвет_ холста и нов_ цвет_ пера.
обычный текст
чёрный
пиксели
Пиксель – точка на экране. Если вы посмотрите на экран с очень близкого расстояния вы увидите, что ваш монитор использует пиксели. Пиксель – наименьшая частица, которая может быть нарисована на экране.
Множеству команд требуется количество пикселей в качестве входных параметров. Вот эти команды: вперёд, назад, иди, иди_ гор, иди_ верт, нов_ размер_ холста и нов_ ширина_ пера.
RGB комбинации (коды цветов)
RGB- комбинации используются для описания цветов. “ R ” отвечает за красный, “ G ” за зел`ный и “ B ” за синий цвета. Например, рассмотрим комбинацию 255, 0, 0: первое число, отвечающее за красный, равно 255, а два остальных равны 0, это говорит о том, что данная комбинация передаёт чистейший красный цвет. Каждая составляющая комбинации лежит в диапазоне от 0 до 255. Ниже приведен пример нескольких часто используемых цветов:
Часто используемые RGB- комбинации
0, 0, 0
255, 255, 255
белый
255, 0, 0
150, 0, 0
0, 255, 0
залёный
0, 0, 255
голубой
0, 255, 255
светло- голубой
255, 0, 255
розовый
255, 255, 0
жёлтый
RGB комбинации в качестве входных параметров используются в двух командах: нов_ цвет_ холста и нов_ цвет_ пера.
спрайт
Спрайт - это небольшая картинка, перемещаемая по экрану. Наша Черепашка, к слову, является спрайтом.
Примечание: в данной версии & kturtle; спрайт не может быть заменён с Черепашки на что- либо другое. В следующих версиях вы обязательно сможете это делать.
тёмно- зелёный
тёмно- жёлтый
Вот математические символы: +, -, *, /, (, и). Узнайте о них больше здесь.
символы вопросов
голубой (жирный)
Узнайте больше о символах вопросов здесь.
“ склеивающие слова ” вопросов
Узнайте больше о “ склеивающих словах ” (и, или, не) здесь.
обёртка
Обёртка применяется тогда, когда Черепашка рисует что- то, не умещающееся на холсте (если при этом режим обёртки включен). Вот что случается если обёртки включены Пример обёртки Когда Черепашка выйдет за границу холста, она немедленно перенесется на его противоположную сторону и сможет продолжать движение. Таким образом, Черепашка всегда будет оставаться на экране. Так будет, пока режим обертки останется включенным.
Включаться/ выключаться он может командами обёртка_ вкл и обёртка_ выкл. При запуске & kturtle; режим обёртки включен по умолчанию.
Для легкого нахождения RGB комбинаций вы можете использовать диалог выбора цвета. Он вызывается из меню Сервис Выбор цвета.