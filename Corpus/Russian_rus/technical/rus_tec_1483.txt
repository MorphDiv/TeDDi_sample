# language_name_wals:	Russian
# language_name_glotto:	Russian
# ISO_6393:	rus
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Cyrl
# special_characters:	NA
# short_description:	OpenOffice
# source:	https://object.pouta.csc.fi/OPUS-OpenOffice/v3/raw/ru.zip
# copyright_short:	http://opus.nlpl.eu/OpenOffice.php
# copyright_long:	http://opus.nlpl.eu/OpenOffice.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Использование процедур и функций
/text/sbasic/shared/01020300.xhp
процедуры
функции;использование
переменные;передача процедурам и функциям
параметры;для процедур и функций
параметры;передача с помощью ссылки или значения
переменные;область
область действия переменных
переменные GLOBAL
переменные PUBLIC
переменные PRIVATE
функции;тип возвращаемого значения
тип возвращаемого значения функций
Использование процедур и функций
Далее описано основное использование процедур и функций в $[officename] Basic.
Когда пользователь создает новый модуль, $[officename] Basic автоматически вставляет процедуру с именем &quot; Main &quot; .
Это имя по умолчанию никак не влияет на порядок или начальную точку проекта $[officename] Basic.
Данную процедуру можно переименовать.
Процедуры (SUBS) и функции (FUNCTIONS) помогают поддерживать структурированное представление посредством разделения программы на логические части.
Одним полезным свойством процедур и функций является то, что после разработки программного кода, содержащего компоненты задач, этот код можно использовать в другом проекте.
Передача переменных процедурам (SUB) и функциям (FUNCTION)
Переменные могут быть переданы и процедурам, и функциям.
Процедуру или функцию необходимо объявить так, чтобы она могла принимать параметры:
Parameter1 As Type, Parameter2 As Type,...
)
Программный код
END SUB
Процедура (SUB) вызывается с помощью следующего синтаксиса:
SubName(Value1, Value2,...)
Параметры, передаваемые процедуре, должны соответствовать параметрам, указанным в объявлении процедуры.
Такой же процесс применяется к функциям.
К тому же, функции всегда возвращают результат выполнения функции.
Результат функции определяется путем присвоения возвращаемого значения имени функции:
FUNCTION FunctionName(Parameter1 As Type, Parameter2 As Type,...) As Type
Программный код
FunctionName=Result
End Function
Функция (FUNCTION) вызывается с помощью следующего синтаксиса:
Variable=FunctionName(Parameter1, Parameter2,...)
Library.Module.Macro()
Например, для вызова макроса автотекста из библиотеки Gimmicks используется следующая команда:
Gimmicks.AutoText.Main()
Передача переменных с помощью значения или ссылки
Параметры могут быть переданы процедуре или функции либо с помощью ссылки, либо с помощью значения.
Если не указано иное, параметр всегда передается с помощью ссылки.
Это означает, что процедура или функция получает параметр и может читать и изменять его значение.
Если нужно передать параметр с помощью значения, при вызове процедуры или функции вставьте перед параметром ключевое слово &quot; ByVal &quot; , например:
ByVal
Parameter)
В этом случае исходное содержимое параметра не будет изменяться функцией, так как она только получает значение, а не сам параметр.
Область действия переменных
Переменная, определенная в процедуре (SUB) или функции (FUNCTION), остается действительной только до выхода из процедуры.
Такая переменная называется локальной.
Во многих случаях переменная должна быть действительной во всех процедурах, в каждом модуле всех библиотек или после выхода из процедуры или функции.
Объявление переменных за пределами процедуры или функции
GLOBAL VarName As TYPENAME
Переменная существует, пока продолжается сеанс $[officename].
PUBLIC VarName As TYPENAME
Переменная может быть использована во всех модулях.
PRIVATE VarName As TYPENAME
Переменная может быть использована только в этом модуле.
DIM VarName As TYPENAME
Переменная может быть использована только в этом модуле.
Пример для частных переменных
Переменные могут быть определены как частные для всех модулей путем установки CompatibilityMode(true).
from i17948, see i54894
REM ***** Module1 *****
Private myText As String
Sub initMyText
myText = &quot; Добрый день &quot;
print &quot; В модуле 1 : &quot; , myText
End Sub
REM ***** Module2 *****
'Option Explicit
Sub demoBug
CompatibilityMode( true )
initMyText
' Возврат пустой строки
' (или появляется сообщение об ошибке для Option Explicit)
print &quot; Теперь в модуле 2 : &quot; , myText
End Sub
Сохранение содержимого переменной после выхода из процедуры или функции
STATIC VarName As TYPENAME
Переменная сохраняет свое значение до следующего входа в эту функцию или процедуру.
Объявление переменной должно существовать внутри процедуры или функции.
Указание типа возвращаемого значения функции
Как и в случае переменных, чтобы определить тип возвращаемого значения функции, включите символ объявления типа после имени функции или тип, обозначенный служебным словом &quot; As &quot; , и соответствующее ключевое слово в конце списка параметров.
Например:
as Integer