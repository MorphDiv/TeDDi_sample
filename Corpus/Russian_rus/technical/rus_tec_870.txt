# language_name_wals:	Russian
# language_name_glotto:	Russian
# iso639_3:	rus
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Cyrl
# special_characters:	NA
# short_description:	OpenOffice
# source:	https://object.pouta.csc.fi/OPUS-OpenOffice/v3/raw/ru.zip
# copyright_short:	http://opus.nlpl.eu/OpenOffice.php
# copyright_long:	http://opus.nlpl.eu/OpenOffice.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Конструктор запросов
/text/shared/explorer/database/02010100.xhp
представления; создание представлений баз данных (Base)
запросы; создание в ракурсе проектирования (Base)
проектирование; запросы (Base)
ракурс проектирования; запросы/представления (Base)
объединение;таблицы (Base)
таблицы в базах данных; объединение для запросов (Base)
запросы; объединение таблиц (Base)
таблицы в базах данных; связи (Base)
связи; объединение таблиц (Base)
запросы; удаление ссылок на таблицы (Base)
критерии проектирования запросов (Base)
запросы; формулирование условий фильтрации (Base)
условия фильтрации; в запросах (Base)
параметры; запросы (Base)
запросы; запросы параметров (Base)
SQL; запросы (Base)
native SQL (Base)
mw added &quot; (Base) &quot; to all entries
Конструктор запросов
Представление конструктора запросов
позволяет создавать и редактировать запросы базы данных.
Большинство баз данных использует запросы для фильтрации или сортировки таблиц для отображения записей на локальном компьютере.
Представления выполняют то же самое, но на сервере.
Если база данных расположена на сервере, который поддерживает представления, можно использовать их для фильтрации записей на сервере и уменьшения времени отображения.
Создать представление
на вкладке
Таблицы
в документе базы данных приводит к открытию окна
Конструктор представлений
, похожего на описанное здесь окно
Дизайнер запросов
.
Расположение элементов в окне &quot; Дизайнер запросов &quot; сохраняется вместе с созданным запросом, но не может быть сохранено с созданным представлением.
Конструктор
Запросы
в документе базы данных, а затем щелкните
Создать запрос в конструкторе
.
задать
необходимый запрос.
Чтобы задать запрос, укажите включаемые в него
имена полей
баз данных и
критерии
отображения полей.
Чтобы переставить столбцы в нижней панели Конструктора запросов, перетяните заголовок столбца в новое местоположение либо выберите столбец и нажмите
Command
Ctrl
+клавиша со стрелкой.
значки
панели
Конструктор запросов
и панели
Конструктор
.
Чтобы проверить запрос, дважды щелкните его имя в документе базы данных.
Результат запроса отобразится в таблице, аналогичной представлению источника данных.
Примечание.
Таблица отображается только временно.
Клавиши в построителе запросов
Клавиши
Функция
F4
Предварительный просмотр
F5
Выполнить запрос
F7
Добавить таблицу или запрос
Обзор
Добавить таблицы
.
Откроется диалоговое окно, в котором необходимо сначала выбрать таблицу - основу для нового запроса.
Дважды щелкните поля, чтобы добавить их к запросу.
Перетаскивание для определения связей.
При разработке запроса изменить выбранные таблицы невозможно.
Удалить таблицы
Удалить
.
Кроме того, можно нажать клавишу DELETE.
Переместить таблицу и изменить размер таблицы
Расположение таблиц и их размер можно менять в соответствии с личными предпочтениями.
Чтобы переместить таблицу, перетащите ее верхнюю границу в нужное положение.
Чтобы увеличить или уменьшить размер отображаемой таблицы, поместите указатель мыши на границу или угол таблицы и перетаскивайте ее до достижения нужного размера.
Связи таблиц
При существовании связей между именем поля в одной таблице и именем поля в другой таблице эти связи можно использовать в запросе.
Если, к примеру, имеется электронная таблица для статей под номерами и электронная таблица для клиентов, в которую записываются все статьи, заказанные клиентом с использованием соответствующих номеров статей, то существует связь между двумя полями данных &quot; номер статьи &quot; .
Теперь, чтобы создать запрос всех заказанных клиентом статей, необходимо получить данные из двух электронных таблиц.
Для этого требуется указать в $[officename], какая связь существует между данными этих электронных таблиц.
Щелкните имя поля в таблице (например, имя поля &quot; Номер элемента &quot; из таблицы клиентов), удерживая кнопку мыши, и перетащите имя поля на имя поля другой таблицы ( &quot; Номер элемента &quot; из таблицы элементов).
Если отпустить кнопку мыши, появляется линия, соединяющая эти два поля в двух окнах.
Соответствующее условие (содержимое имен полей должно совпадать) вводится в итоговый запрос SQL.
Создание запроса на основе нескольких связанных листов возможно только при использовании $[officename] в качестве интерфейса для реляционной базы данных.
Получить доступ к таблицам из других баз данных запроса невозможно.
Запрос, задействующий несколько таблиц, может быть создан только в пределах одной базы данных.
Указание типа ссылки
Связи
, дважды щелкните линию, соединяющую два связанных поля, или вызовите команду меню
Вставка - Создать связь
.
Изменить свойства объединения.
В качестве альтернативы можно нажимать клавишу TAB, пока не будет выбрана строка, а затем нажать Shift+F10 и выбрать команду
Правка
.
Некоторые базы данных поддерживают только подмножество возможных типов объединений.
Удаление связей
Чтобы удалить связь между двумя таблицами, щелкните соединительную линию и нажмите клавишу DELETE.
Включенные поля
в диалоговом окне
Связи
.
Или выделите соединительный вектор с помощью клавиши TAB, вызовите контекстное меню, нажав клавиши SHIFT+F10, и выберите команду
Удалить
.
Определить запрос
Выберите условия для определения запроса.
Каждый столбец таблицы конструктора содержит поле данных для запроса.
Условия в одной строке связаны с логическим И.
Указать имя поля
Сначала выберите все имена полей из таблиц, которые требуется добавить к запросу.
Для этого перетащите или дважды щелкните имя поля в окне таблицы.
При перетаскивании перетащите имя поля из окна таблицы в нижнюю область конструктора запросов.
После этого можно определить столбцы для добавления в поле.
Чтобы выбрать имя поля, дважды щелкните его мышью.
Оно будет добавлено в следующий пустой столбец.
Удаление имен полей
Удалить
.
Сохранить запрос
Сохранить
на стандартной панели.
Отобразится диалоговое окно для ввода имени запроса.
Если база данных поддерживает схемы, можно также указать схему.
Схема
Введите имя схемы, назначенной запросу или таблице.
Имя запроса или таблицы
Введите имя запроса или таблицы.
Фильтрация данных
Чтобы выполнить фильтрацию данных для запроса, задайте нужные параметры в нижней области конструктора.
Доступны следующие строки:
Поле
Введите имя поля данных, ссылка на которое содержится в запросе.
Все параметры, заданные в нижних строках, зависят от этого поля.
Если выделить ячейку кнопкой мыши, появится кнопка со стрелкой, позволяющая выбрать поле.
Параметр &quot; Имя таблицы.* &quot; определяет все поля данных и условия, доступные для всех полей таблицы.
Псевдоним
Задание псевдонима.
Этот псевдоним будет указан в запросе вместо имени поля.
Это позволяет применять подписи столбцов, определенные пользователем.
Например, если поле данных имеет имя PtNo, можно ввести псевдоним PartNum, который будет отображаться вместо имени.
В инструкциях SQL псевдонимы определяются следующим образом:
SELECT column AS alias FROM table.
Например:
SELECT &quot; PtNo &quot; AS &quot; PartNum &quot; FROM &quot; Parts &quot;
Таблица
Здесь указана таблица базы данных, соответствующая выбранному полю данных.
Если щелкнуть эту ячейку, появится стрелка, позволяющая выбрать другую таблицу текущего запроса.
Сортировка
Выбор ячейки позволяет выбрать параметры сортировки: по возрастанию, по убыванию и без сортировки.
Текстовые поля сортируются в алфавитном порядке, а числовые поля - в порядке числовых значений.
Для большинства баз данных порядок сортировки может задаваться администраторами.
Видимый
Видимый
.
Если поле данных используется только для формулировки условия, показывать его не обязательно.
Условия
условий
фильтрации содержимого поля данных.
или
Здесь можно ввести дополнительное условия для фильтрации каждой строки.
Несколько условий в одном столбце будут соединены с помощью оператора &quot; ИЛИ &quot; .
Также можно использовать контекстное меню заголовков строк в нижней области конструктора, чтобы добавить дополнительную строку для функций.
Функции
Выберите функцию для запуска в запросе.
Доступность функций для запуска зависит от базы данных.
Функция
можно использовать следующие варианты:
Параметр
SQL
Результат
Без функции
Ни одна функция не выполняется.
Среднее
AVG
Вычисление среднего геометрического значения поля.
Считать
COUNT
Определение количества записей в таблице.
Пустые поля могут учитываться (a) или нет (b).
a) COUNT(*):
Назначение звездочки в качестве аргумента, учитывающего все записи таблицы.
b) COUNT(столбец):
Назначение имени поля в качестве аргумента, учитывающего только те поля, в которых данное имя поля содержит значение.
Нулевые значения (пустые поля) не учитываются.
Максимальное значение
МАКС
Определение наибольшего значения поля.
Минимальное значение
МИН
Определение наименьшего значения поля.
Сумма
СУММ
Вычисление суммы значений связанных полей.
Группировать
ГРУППИРОВАТЬ ПО
Группировка данных запроса согласно выбранному имени поля.
Выполнение функций происходит в соответствии с указанными группами.
В SQL этот параметр соответствует разделу GROUP BY.
Если условие добавлено, его запись появляется в SQL HAVING.
Также можно вводить вызовы функций непосредственно в инструкцию SQL.
Используется следующий синтаксис:
SELECT FUNCTION(column) FROM table.
Например, следующий вызов функции в SQL для расчета суммы:
SELECT SUM( &quot; Price &quot; ) FROM &quot; Article &quot; .
Группа
, вышеуказанные функции имеют общее название &quot; Агрегатные функции &quot; .
Это функции, которые выполняют расчет данных для создания сводных данных на основании полученных результатов.
Могут быть также доступны дополнительные функции, не указанные в поле со списком.
Это зависит от конкретной используемой системы базы данных и состояния драйвера Base.
Поле
.
Псевдоним
.
Соответствующая функция в инструкции SQL:
SELECT FUNCTION() AS alias FROM table
Пример.
SELECT COUNT(*) AS count FROM &quot; Item &quot;
При запуске этой функции дополнительные столбцы могут быть вставлены в запрос только с помощью получения этих столбцов как функции &quot; Группировать &quot; .
Примеры
В следующем примере выполняется запуск запроса по двум таблицам: таблица &quot; Элемент &quot; с полем &quot; Номер элемента &quot; и таблица &quot; Поставщики &quot; с полем &quot; Имя поставщика &quot; .
Кроме того, в обеих таблицах есть общее поле &quot; Номер поставщика &quot; .
Чтобы создать запрос, который содержит всех поставщиков, поставляющих более трех элементов, необходимо выполнить следующие шаги.
Вставьте таблицы &quot; Элемент &quot; и &quot; Поставщики &quot; в конструктор запросов.
Свяжите поля &quot; Номер поставщика &quot; обеих таблиц, если такая связь отсутствует.
Функция
и выберите функцию &quot; Счет &quot; .
Введите условие &quot; > 3 &quot; и отключите поле &quot; Видимый &quot; .
Дважды щелкните поле &quot; Имя поставщика &quot; в таблице &quot; Поставщики &quot; и выберите функцию &quot; Группировать &quot; .
Запустите запрос.
Если таблица &quot; Элемент &quot; содержит поля &quot; Стоимость &quot; (для цены статьи) и &quot; Номер поставщика &quot; , можно получить предоставляемую поставщиком среднюю стоимость элемента с помощью следующего запроса:
Вставьте таблицу &quot; Элемент &quot; в конструктор запросов.
Дважды щелкните поля &quot; Стоимость &quot; и &quot; Номер поставщика &quot; .
Функция
и выберите функцию &quot; Среднее &quot; в поле &quot; Стоимость &quot; .
Также можно ввести &quot; Среднее &quot; в строке псевдонима (без кавычек).
Выберите группу для поля &quot; Номер поставщика &quot; .
Запустите запрос.
Доступны следующие символы и команды контекстного меню:
Функции
Отображение или скрытие строки для выбора функций.
Имя таблицы
Отображение или скрытие строки имени таблицы.
Псевдоним
Отображение или скрытие строки псевдонима.
Отдельные значения
Применение к запросу только отдельных значений.
Запрос применяется к записям, содержащим данные, которые появляются в выбранных полях несколько раз.
Если команда
Отдельные значения
активна, в запросе будет отображаться только одна запись (DISTINCT).
В противном случае будут отображаться все записи, удовлетворяющие условиям запроса (ALL).
Отдельные значения
и указать в запросе, чтобы эта фамилия встречалась только один раз.
Отдельные значения
в запросе будут использоваться два поля - &quot; фамилия &quot; и &quot; город &quot; , а результат запроса будет содержать по одному значению &quot; Smith in Chicago &quot; и &quot; Smith in London &quot; .
В SQL эта команда соответствует предикату DISTINCT.
Формулирование условий фильтрации
При формулировании условий фильтрации могут использоваться различные операторы и команды.
Помимо реляционных операторов, существуют команды SQL, запрашивающие содержимое полей базы данных.
При использовании этих команд в синтаксисе $[officename] система автоматически преобразует их в соответствующий синтаксис SQL.
Кроме того, можно непосредственно ввести команду SQL.
В следующих таблицах представлен обзор операторов и команд:
Оператор
Значение
Условие удовлетворено, если...
=
равно
... содержимое поля совпадает с указанным выражением.
Оператор = не отображается в полях запроса.
Если значение вводится без оператора, автоматически используется оператор =.
< >
не равно
... содержимое поля не совпадает с указанным выражением.
>
больше чем
... содержимое поля больше указанного выражения.
<
меньше чем
... содержимое поля меньше указанного выражения.
> =
больше или равно
... содержимое поля больше указанного выражения или совпадает с ним.
< =
меньше или равно
... содержимое поля меньше указанного выражения или совпадает с ним.
команда $[officename]
команда SQL
Значение
Условие удовлетворено, если...
IS EMPTY
IS NULL
Пусто
... имя поля пустое.
Для полей &quot; Да/Нет &quot; с тремя состояниями эта команда автоматически запрашивает состояние &quot; не определено &quot; (ни &quot; Да &quot; , ни &quot; Нет &quot; ).
IS NOT EMPTY
IS NOT NULL
не пусто
... имя поля не пустое.
LIKE
(для любого числа символов используется местозаполнитель *,
для одного символа - местозаполнитель ?)
LIKE
местозаполнители; в запросах SQL
(для любого числа символов используется местозаполнитель %,
для одного символа - местозаполнитель _)
является элементом
... поле данных содержит указанное выражение.
Местозаполнитель (*) означает, что выражение x встречается в начале (x*), в конце (*x) или внутри (*x*) содержимого поля.
В качестве местозаполнителя в запросах SQL можно ввести символ SQL % или обычный местозаполнитель файловой системы (*) в интерфейсе $[officename].
Местозаполнитель * или % используется для любого числа символов.
Вопросительный знак (?) в интерфейсе $[officename] или подчеркивание (_) в запросах SQL применяется для обозначения строго одного символа.
NOT LIKE
NOT LIKE
не является элементом
... имя поля не содержит указанного выражения.
BETWEEN x AND y
BETWEEN x AND y
в интервале [x,y]
... имя поля содержит значение, лежащее между значениями x и y.
NOT BETWEEN x AND y
NOT BETWEEN x AND y
не в интервале [x,y]
... имя поля содержит значение, лежащее за пределами интервала между значениями x и y.
IN (a; b; c...)
Обратите внимание, что точка с запятой используется в качестве разделителя во всех списках значений
IN (a, b, c...)
содержит a, b, c...
... имя поля содержит одно из указанных выражений a, b, c,...
Может быть указано любое число выражений; результат запроса определяется оператором &quot; Или &quot; .
Выражения a, b, c... могут быть числами или символами
NOT IN (a; b; c...)
NOT IN (a, b, c...)
не содержит a, b, c...
... имя поля не содержит указанных выражений a, b, c,...
= TRUE
= TRUE
имеет значение TRUE
... имя поля имеет значение TRUE.
= FALSE
= FALSE
имеет значение FALSE
... имя поля имеет значение FALSE.
Примеры
= &quot; Ms. &quot;
возвращает имена полей, содержащих &quot; Ms. &quot;
LIKE 'g?ve'
возвращает имена полей, содержащих &quot; give &quot; , &quot; gave &quot; и т. п.
LIKE 'S*'
возвращает поля данных, содержащие, например, &quot; Sun &quot; .
BETWEEN 10 AND 20
возвращает имена полей, содержащих значения от 10 и 20.
(Поля могут быть как текстовыми, так и числовыми.)
IN (1; 3; 5; 7)
возвращает имена полей со значениями 1, 3, 5, 7.
Если имя поля содержит, к примеру, номер элемента, можно создать запрос, возвращающий элемент с указанным номером.
NOT IN ('Smith')
возвращает имена полей, не содержащих &quot; Smith &quot; .
Поля даты
представлены в виде #Дата#, чтобы их было легче распознать как даты.
Условие даты воспроизводится в результирующей инструкции в следующем ODBC-совместимом пути.
Дата
{Д'ГГГГ-ММ-ДД'}
Дата и время
{Д'ГГГГ-ММ-ДД ЧЧ:ММ:СС'}
Время
{Д'ЧЧ:ММ:СС'}
управляющие последовательности
из ODBC и JDBC:
Дата
{д 'ГГГГ-ММ-ДД'}
Время
{в 'ЧЧ:ИМ:СС[.СС]'} - [ ] дополнительно
Дата и время
{'ГГГГ-ММ-ДД ЧЧ:ИМ:СС[.СС]'} - [ ] дополнительно
Пример. select {d '1999-12-31'} from world.years
like
:
{escape &quot; escape-символ &quot; }
Пример. select * from Item where ItemName like 'The *%' {escape '*'}
Будут получены все записи, имя которых начинается с &quot; The * &quot; .
Это означает, что возможно выполнять поиск символов, используемых как местозаполнители, например *, ?, _, % или точка.
Outer Join
:
{oj outer-join}
Пример. select Article.* from {oj item LEFT OUTER JOIN orders ON item.no=orders.ANR}
Запрос текстовых полей
Чтобы запросить содержимое текстового поля, необходимо поместить выражение в одинарные кавычки.
Различение прописных и строчных букв зависит от используемой базы данных.
При использовании &quot; LIKE &quot; регистр учитывается по определению (в некоторых базах данных это соблюдается не так строго).
Запрос полей даты
Даже при выполнении фильтрации по дате необходимо поместить выражение в одинарные кавычки.
Допустимы следующие форматы:
ГГГГ-ММ-ДД ЧЧ:ММ:СС и ГГГГ/ММ/ДД ЧЧ:ММ:СС, а также ГГГГ.ММ.ДД ЧЧ:ММ:СС
Запрос полей &quot; Да/Нет &quot;
Для запроса полей &quot; Да/Нет &quot; в таблицах dBASE используется следующий синтаксис:
Состояние
Условие запроса
Пример
Да
для таблиц dBase: не равно ни одному заданному значению
=1 возвращает все записи, в которых поле &quot; Да/Нет &quot; находится в состоянии &quot; Да &quot; или &quot; Нет &quot; (выделено черным цветом),
Нет
.
=0 возвращает все записи, в которых поле &quot; Да/Нет &quot; находится в состоянии &quot; Нет &quot; или &quot; Выкл &quot; (не выделено).
Пусто
IS NULL
IS NULL возвращает все записи, в которых поле &quot; Да/Нет &quot; не находится ни в состоянии &quot; Да &quot; , ни в состоянии &quot; Нет &quot; (выделено серым цветом).
Синтаксис зависит от используемой системы баз данных.
Следует отметить, что поля &quot; Да/Нет &quot; могут быть определены по-разному (только 2 состояния вместо 3).
Запросы параметров
Чтобы создать запрос с переменными параметрами, необходимо поместить переменную в квадратные скобки (=[x]).
Кроме того, можно использовать знак равенства и двоеточие (=:x).
При выполнении запроса программа открывает диалоговое окно для ввода выражения, которому будет присвоена переменная x.
При одновременном запросе нескольких параметров в диалоговом окне появится список всех параметров со строкой ввода рядом с каждым из них.
Введите значения желательно в направлении сверху вниз, нажимая клавишу ВВОД после каждой строки.
Запросы параметров с местозаполнителями (*, _) или специальными символами (например, ?) недопустимы.
Если параметрический запрос сформулирован и сохранен с переменными, позже можно создать запрос, переменные в котором будут заменены требуемыми выражениями.
При открытии запроса в $[officename] появится диалоговое окно для ввода этих выражений.
Ввод параметра
Ввод параметра
служит для ввода переменных, определенных в запросе.
Введите значение для каждой переменной запроса и подтвердите ввод, нажав кнопку
ОК
.
подчиненных формах
, поскольку они работают исключительно с запросами, вызываемые значения для которых считываются из переменной.
Параметрический запрос в инструкции SQL может выглядеть следующим образом.
select * from 'addresses' where 'name' = :placeholder
Режим SQL
SQL расшифровывается как &quot; Structured Query Language &quot; (структурный язык запросов) и предоставляет инструкции по обновлению и администрированию реляционных баз данных.
Включение и выключение режима конструктора
.
Можно сформулировать запрос непосредственно в коде SQL.
Однако следует помнить, что особенности синтаксиса могут зависеть от используемой системы баз данных.
конструктора запросов
.
Эти запросы должны быть выполнимы в режиме Native SQL.
Выполнить команду SQL непосредственно
.