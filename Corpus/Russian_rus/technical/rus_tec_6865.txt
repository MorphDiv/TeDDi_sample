# language_name_wals:	Russian
# language_name_glotto:	Russian
# iso639_3:	rus
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Cyrl
# special_characters:	NA
# short_description:	KDE4
# source:	https://object.pouta.csc.fi/OPUS-KDE4/v2/raw/ru.zip
# copyright_short:	http://opus.nlpl.eu/KDE4.php
# copyright_long:	http://opus.nlpl.eu/KDE4.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Руководство & kcachegrind;
Josef Weidendorfer
Josef. Weidendorfer@ gmx. de
Josef Weidendorfer
& Josef. Weidendorfer;
KDE
kdesdk
Cachegrind
Callgrind
Valgrind
Профилирование
Введение
Завершающим шагом разработки качественного программного обеспечения обычно является его оптимизация, т. е. увеличение производительности. И, чтобы не терять время на улучшение редко используемых функций, вы можете использовать профилирование.
Методы профилирования
Средства профилирования
Наиболее известным средством профилирования является gprof (входит в комплект GCC). Откомпилируйте программу с ключом - pg; дальнейшее её выполнение приведёт к созданию файла gmon. out, который можно преобразовать в приемлемый для чтения вид командой gprof. В минусы такого способа следует отнести требуемый шаг компиляции приложения, которое должно быть скомпоновано статически. ́При компиляции в код вставляются специальные инструкции для замера времени выполнения цепей вызовов в функциях и подсчёта их количества, что в сочетании с временно́й дискретизацией позволяет получить гистограмму распределе используемого времени по участкам кодаodТаким образом, становится возможным эвристическое вычисление общего времени выполнения функций, т. е. время на выполнение инструкций самой функции и всех функций, вызываемых из неё it.
Первым шагом в увеличении производительности является симулирование кэширования. Оно заключается в перехватывании всех обращений к памяти без перекомпиляции программы; при этом можно использовать динамически подключаемые библиотеки и модули. Трассировка определяет число инструкций/ обращений к данным, уровень недостатка кэша (1- ой или 2- ой) и устанавливает соответствующее место в исходных кодах. Таким образом,, учитывая латентность из- за недостатка объёма кэша среднего процессора, можно предположительно подсчитать затраты времени.
& callgrind; - это расширение & cachegrind;, строящее график вызовов программы "на лету". Он говорит о том, как функции вызывают одна другую и как много событий происходит во время выполнения функции. Собираемые данные профилирования могут быть разделены на потоки и контексты цепочки вызовов. Данные профилирования могут быть предоставлены на уровне инструкций ассемблера.
Визуализация
Использование & kcachegrind;
& callgrind;
Для более углублённого изучения интерфейса программы обратитесь к разделу документации web- сайта http: // kcachegrind. sf. net. Кроме того, у всех графических элементов & kcachegrind; есть справка Что это?.
Список команд
Главное окно & kcachegrind;
Меню Файл
Ctrl; N Файл Создать
Ctrl; O Файл Открыть
Меню Файл
Ctrl; N Файл Создать
Ctrl; Q Файл Выход
Выйти из & kappname;
Вопросы и ответы
& reporting. bugs; & updating. documentation;
& kcachegrind; может пригодится на последней стадии разработки программного обеспечения, профилировании. Если вы не занимаетесь разработкой ПО, вам не нужна эта программа.
Профилирование
Благодарности и лицензия
Спасибо Юлиану Сьюварду (Julian Seward) за его превосходную & valgrind;, и Николасу Нетеркоту (Nicholas Nethercote) за & cachegrind;. Без них не было бы & kcachegrind;.
Спасибо всем за отчёты об ошибках/ предложения.
& underFDL;
Установка
Как получить & kcachegrind;
Требования
Сборка и установка
& install. compile. documentation;
Настройка
Все параметры присутствуют или в окне настроек, или в контекстных меню диаграмм.
& kappname;