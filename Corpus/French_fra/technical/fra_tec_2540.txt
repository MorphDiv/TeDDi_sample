# language_name_wals:	French
# language_name_glotto:	French
# ISO_6393:	fra
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	KDEdoc
# source:	https://object.pouta.csc.fi/OPUS-KDEdoc/v1/raw/fr.zip
# copyright_short:	http://opus.nlpl.eu/KDEdoc.php
# copyright_long:	http://opus.nlpl.eu/KDEdoc.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Contribuer à aRts
Comment nous aider
Le projet aRts peut profiter de l'aide de développeurs pour rendre les applications multimédia existantes compatibles avec aRts, pour écrire de nouvelles applications multimédia, et pour améliorer les fonctionnalités de aRts.
Cependant, vous pouvez contribuer sans être développeur.
Nous avons besoin de l'aide de testeurs qui nous soumettent des rapports de bogue, de traducteurs pour l'application et la documentation dans d'autres langues (NdT n'hésitez pas à me contacter pour me donner un coup de main ;o), d'artistes pour réaliser les graphismes (particulièrement pour les modules de artsbuilder), de musiciens pour créer de nouveaux modules pour aRts, et de rédacteurs pour écrire ou améliorer la documentation.
Listes de discussion
Les discussions relatives au développement de aRts ont lieu sur deux listes de discussions.
Nous y parlons des nouvelles idées de caractéristiques et d'implantations, et nous y résolvons un certain nombre de problèmes.
La liste de discussion KDE Multimedia concerne les problèmes multimédia de KDE en général, y compris aRts et les applications multimédia comme Noatun et aKtion.
Cette liste est aussi archivée à http ://lists.kde.org.
La liste de discussion de aRts est spécifique à aRts, y compris les utilisations de aRts indépendamment de KDE.
Style de programmation
Pour obtenir un code source homogène, il est important de garder un style de programmation dans tous les sources de aRts.
Même si vous écrivez simplement un module, essayez d'écrire et formater votre source en conséquence, de façon à faciliter le travail de différentes personnes dans la gestion des sources, et faciliter la copie de morceaux de codes d'un source vers un autre.
Nom des fonctions membres
Membres de classes
Les membres de classes s'écrivent en minuscule, comme par exemple menubar ou button.
Nom des classes
Toutes les classes doivent s'écrire avec une majuscule au début de chaque mot, par exemple ModuleView, SynthModule.
Les classes qui appartiennent aux librairies doivent utiliser les espaces de noms de aRts, comme Arts: :Soundserver.
Les implantations des classes &MCOP; doivent être appelées Class_impl, comme par exemple SoundServer_impl.
Paramètres
Les paramètres sont toujours en minuscule.
Variables locales
Les variables locales sont toujours en minuscule, et ont des noms comme i, p, x, etc..
Largeur de tabulation (largeur du décalage)
Une tabulation correspond à 4 espaces.
Noms des fichiers sources
Les fichiers sources sont en minuscule.
Ils doivent porter le nom de la classe lorsqu'ils implantent une classe unique.
Leur extension est. .cc s'ils contiennent du code indépendant de Qt/ GUI, et ..cpp s'ils contiennent du code dépendant de Qt/ GUI.
Les fichiers &IDL; doivent être appelés de manière descriptive pour l'ensemble des interfaces qu'ils contiennent, aussi tout en minuscule.
En particulier, il est déconseillé de donner à un fichier &IDL; le nom de la classe elle même ,car le sélecteur de fichiers .mcopclass (.mcopclass trader) et les informations de type entreront en conflit.