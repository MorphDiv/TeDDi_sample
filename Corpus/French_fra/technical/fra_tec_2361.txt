# language_name_wals:	French
# language_name_glotto:	French
# iso639_3:	fra
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	KDEdoc
# source:	https://object.pouta.csc.fi/OPUS-KDEdoc/v1/raw/fr.zip
# copyright_short:	http://opus.nlpl.eu/KDEdoc.php
# copyright_long:	http://opus.nlpl.eu/KDEdoc.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

aRts-builder
Aperçu
Tout d'abord, avant de lancer aRts-builder, vous devez aussi lancer le serveur de son (artsd).
Habituellement, lorsque vous utilisez KDE 2.1, artsd devrait déjà être en fonctionnement.
Lorsque vous exécutez aRts, il lance toujours de petits modules. aRts-builder est un outil pour créer de nouvelles structures composées de petits modules interconnectés.
Vous placez simplement sur les modules dans la grille.
Pour ce faire, choisissez -les dans le menu Modules, et cliquez quelque part dans la zone gris-vert.
Les modules ont généralement des ports (dans lesquels les flux audio transitent).
Pour connecter deux ports, cliquez sur le premier, ce qui le rend orange, puis cliquez sur le second.
Vous ne pouvez que connecter un port d'entrée (en haut du module) avec un port de sortie (en bas du module).
Si vous voulez assigner une valeur constante à un port (ou le déconnecter), double-cliquez sur le port.
Tutoriel
Étape 1
Démarrez aRts-builder.
Vous avez besoin d'un module Synth_AMAN_PLAY pour entendre ce que vous créez.
Placez -le sous la cinquième ligne ou plus parce que nous ajouterons des choses au-dessus.
Le module aura un paramètre title (le port le plus à gauche), et autoRestoreID (à côté du port le plus à gauche) afin de le trouver.
Pour remplir ces sorties, double-cliquez sur ces ports, sélectionnez valeur constante et saisissez tutorial dans la boîte d'édition.
Cliquez sur OK pour appliquer vos changements.
Le module de lecture a besoin de quelque chose en entrée...;) Écoutez le silence pendant un moment, cliquez sur OK et passez à l'étape 2
Étape 2
Comme vous pouvez le voir, il produit quelque chose en sortie, mais nécessite un paramètre pos (position) en entrée.
Tout d'abord, relions la sortie aux haut-parleurs.
Cliquez sur le port out (sortie) du module Synth_WAVE_SIN et ensuite sur le port left (gauche) du module Synth_AMAN_PLAY.
Voilà, vous avez connecté deux modules.
Dans aRts, les oscillateurs ne nécessitent pas une fréquence en entrée, mais une position dans l'échantillon.
Cette position doit être comprise entre 0 et 1, ce qui correspond pour un objet Synth_WAVE_SIN standard à la plage 0 ..2*pi.
Pour générer des valeurs d'oscillation à partir d'une fréquence, un module Synth_FREQUENCY est utilisé.
Spécifiez une valeur constante de 440 au port fréquence du générateur FREQUENCY.
Vous entendrez une onde sinusoïdale à 440 Hz sur l'un de vos haut-parleurs.
Lorsque vous l'aurez écouté pendant un moment, cliquez sur OK et passez à l'étape 3.
Étape 3
OK, ce serait mieux si vous pouviez entendre une onde sinusoïdale sur les deux haut-parleurs.
Connectez le port droit du module Synth_PLAY au port "outvalue" (valeur de sortie) du module Synth_WAVE_SIN.
Si vous avez besoin de plus de place, vous pouvez déplacer les autres modules en les sélectionnant (pour en sélectionner plusieurs, appuyez sur MAJ) et déplacez -les.
Maintenant, connectez la sortie "frequ" (fréquence) du module Synth_SEQUENCE à l'entrée "frequ" du module Synth_FREQUENCY.
Spécifiez alors la valeur constante 0,13 pour la vitesse de la séquence (la vitesse est le port le plus à gauche).
Puis allez au port le plus à droite (sequence) du Synth_SEQUENCE et saisissez comme valeur constante A-3 ;C-4 ;E-4 ;C-4; ceci spécifie une séquence.
Vous trouverez plus d'informations dans le manuel de référence des modules.
Vous entendrez jouer une séquence sympathique.
Si vous avez aimé, cliquez sur OK et passez à l'étape 4.
Étape 4
Déconnectez la sortie de l'onde sinusoïdale en double cliquant dessus et en choisissant not connected (non connecté).
Connectez
La sortie du SIN à l'entrée de PSCALE
La sortie de PSCALE au AMAN_PLAY gauche
La sortie de PSCALE au AMAN_PLAY droit
Le pos de SEQUENCE au pos de PSCALE
Finalement, placez le port top de PSCALE à une certaine valeur, par exemple 0.1.
Vous entendrez jouer une séquence sympathique.
Si vous avez aimé, cliquez sur OK et passez à l'étape 5.
Démarrez un autre aRts-builder.
placez l'entrée bus de ce module à audio (c'est juste un nom, appelez -le Fred si ça vous fait plaisir).
connectez la sortie left du module Synth_BUS_DOWNLINK à l'entrée left du module Synth_AMAN_PLAY
connectez la sortie right du module Synth_BUS_DOWNLINK à l'entrée right du module Synth_AMAN_PLAY
Revenez à la structure avec le module Synth_WAVE_SIN et remplacez le module Synth_AMAN_PLAY par un module Synth_BUS_UPLINK, et configurez le nom à audio (ou à Fred si vous voulez).
Si vous voulez vous rendre compte de l'intérêt réel d'une telle chose, cliquez sur OK (dans le aRts-builder qui exécute le module Synth_SEQUENCE, vous pouvez laisser tourner l'autre) et passez à l'étape 6.
Étape 6: échange de données pour les utilisateurs avancés.
Cliquez sur OK.
Vous entendrez maintenant deux fois la même chose.
Suivant l'instant auquel vous les avez démarrés, le son sera plus ou moins bon.
Une autre chose sympathique à faire à ce point est de démarrer Noatun, et lire un mp3.
Démarrez artscontrol.
Vous verrez alors Noatun et votre structure tutoriel jouant quelque chose.
Double-cliquez sur Noatun.
Vous aurez alors une liste de destinations.
Vous pouvez dire à Noatun d'envoyer sa sortie via le bus audio fourni par votre structure tutoriel.
Étape 7:
Synthèse contrôlée par midi
Tout d'abord, nettoyez votre bureau pour n'obtenir qu'un aRts-builder contenant une structure d'onde sinusoïdale (pas en cours d'exécution).
Placez les ports quelque part.
Nous n'en avons pas car il n'existe aucun algorithme au monde capable de prédire quand l'utilisateur va relâcher la note qu'il vient juste d'enfoncer sur le clavier midi.
Donc à la place, il y a un paramètre pressed (pressé) qui indique juste si l'utilisateur maintient la touche enfoncée (pressed = 1: touche maintenue enfoncée, pressed = 0: touche relâchée).
L'entrée pressed de la structure au port active de l' ADSR
La sortie du SIN à l'entrée invalue de l' ADSR
Le port outvalue à la sortie left de la structure
Le port outvalue de l'ADSR à la sortie right de la structure
Une autre chose à laquelle nous devons penser est que la structure de l'instrument, d'une manière ou d'une autre, doit maintenant savoir quand elle est prête à jouer, et alors elle doit se fermer, car sinon, ça ne s'arrêtera jamais, même si la note a été relâchée.
Heureusement, l'enveloppe ADSR sait lorsqu'il n'y aura plus rien à entendre puisque de toutes façons, elle fixe le signal à zéro un certain temps après que la touche a été enfoncée.
Ensuite, enregistrez -la en utilisant enregistrer sous (le nom par défaut devrait être instrument_tutorial maintenant).
Ouvrez un terminal et saisissez midisend.
Vous verrez que midisend et l'instrument sont maintenant listés dans le gestionnaire MIDI de aRts.
Après avoir sélectionné les deux et avoir cliqué sur Connecter, nous avons enfin terminé.
Prenez votre clavier et commencez à jouer (bien sûr, il doit être connecté à votre ordinateur).
Suggestions
Essayez d'utiliser d'autres choses que des ondes sinusoïdales.
Si vous connectez une onde triangulaire, vous penserez probablement que le son n'est pas terrible.
Mais essayez d'associer un filtre SHELVE_CUTOFF avec une onde triangulaire pour couper les fréquences supérieures à une certaine limite (essayez quelque chose comme 1000 Hz, ou encore mieux deux fois la fréquence d'entrée, ou la fréquence d'entrée + 200 Hz ou quelque chose comme ça).
Essayez d'utiliser plusieurs oscillateurs.
Le module Synth_XFADE peut être utilisé pour mixer les deux signaux, et Synth_ADD pour les additionner.
Essayez de ne pas donner exactement les mêmes fréquences à tous les oscillateurs, ça donne des oscillations sympathiques (NdT effet de chorus).
Essayez d'utiliser plusieurs enveloppes.
Essayez de synthétiser des instruments avec des sorties différentes à gauche et à droite.
Essayez un post-traitement du signal en sortie du downlink.
Vous pouvez par exemple mixer une version retardée du signal avec l'original pour obtenir un effet d'écho.
Essayez d'utiliser le réglage de la vélocité (c'est la force avec laquelle la touche a été frappée, vous pouvez aussi dire volume).
L'effet est toujours intéressant lorsque la vélocité n'influe pas uniquement sur le volume du signal résultant, mais aussi sur le son de l'instrument (par exemple la fréquence de coupure).
...
Exemples
Certains sont dans le dossier alors ouvert, d'autres (qui pour diverses raisons ne fonctionnent pas avec la version actuelle) sont placés dans le dossier todo.
Des exemples autonomes illustrant comment utiliser les modules internes à arts (nommés examples_*.arts).
Ces exemples envoient tous un signal vers la carte son.
Des instruments construits à partir des modules de bas niveau de arts (nommés instruments_*.arts).
Ils respectent une convention pour les ports d'entrée et de sortie de façon à pouvoir les utiliser par le gestionnaire MIDI de artscontrol.
Des modèles pour créer de nouveaux modules (nommés template_*.arts).
Des effets, qui peuvent être réutilisés commues nouveaux blocs (nommés effect_*.arts) [tous dans todo]
Des éléments de mixage utilisés pour créer des tables de mixage, incluant des contrôleurs graphiques (nommés mixer_element_*.arts). [tous dans todo]
Des modules divers qui n'entrent pas dans l'une des catégories précédentes.
example_stereo_beep.arts
example_sine.arts
example_pulse.arts
example_softsaw.arts
example_square.arts
example_tri.arts
example_noise.arts
Génère un bruit blanc.
example_dtmf1.arts
example_atan_saturate.arts
Génère une onde triangulaire modifiée par un filtre de type atan saturate.
example_autopanner.arts
example_brickwall.arts
Atténue une onde sinusoïdale d'un facteur 5 et la dirige à travers un limiteur de type brickwall.
example_bus.arts
Downlink depuis un bus nommé Bus et uplink vers le bus out_soundcard avec inversion des canaux droit et gauche.
example_cdelay.arts
Downlink depuis un bus nommé Delay, uplinks le canal droit à travers un cdelay réglé sur 0.5 seconde, laissant inchangé le canal gauche.
Vous pouvez utiliser artscontrol pour connecter l'effet à un lecteur audio et observer les résultats.
example_delay.arts
Il s'agit du même exemple que example_cdelay mais utilise l'effet delay.
example_capture_wav.arts
example_data.arts
Ceci utilise un module Data pour générer un flux constant de la valeur 3 et l'envoie vers un module Debug pour l'afficher périodiquement.
Il contient aussi un module Nil, illustrant comment il peut être utilisé pour ne rien faire.
example_adsr.arts
Montre comment créer un simple son d'instrument utilisant un module d'enveloppe Adsr, déclenché de manière répétitive par une onde carrée.
example_fm.arts
example_freeverb.arts
L'effet Freeverb est connecté d'un bus downlink vers un bus outlink.
Vous pouvez utiliser artscontrol pour connecter l'effet à un lecteur audio et observer le résultat.
example_flanger.arts
Ceci implante un simple effet de flanger (apparemment, il ne fonctionne pas encore).
example_moog.arts
Cette structure combine les deux canaux depuis un bus en un seul canal, qui passe ensuite dans un filtre Moog VCF, et est dirigé vers le bus out_soundcard.
example_pitch_shift.arts
Cette structure envoie le canal gauche des données d'une carte son vers un effet de Pitch shift (décalage de la hauteur du son).
Ajustez le paramètre de vitesse pour modifier l'effet.
example_rc.arts
Cette structure dirige le bruit blanc généré vers un filtre RC puis vers la sortie de la carte son.
En affichant la FFT (transformée de Fourier) dans artscontrol, vous pouvez comparer avec le spectre d'une source de bruit non filtrée.
example_sequence.arts
Ceci met en évidence le module Sequence en jouant une séquence de notes.
example_shelve_cutoff.arts
Cette structure envoie un bruit blanc vers un filtre de type Shelve Cutoff puis vers la sortie de la carte son.
En affichant la FFT (transformée de Fourier) dans artscontrol, vous pouvez comparer avec le spectre d'une source de bruit non filtrée.
example_equalizer.arts
example_tremolo.arts
example_xfade.arts
example_pscale.arts
Ceci illustre le module Pscale (je ne sais pas si c'est un exemple significatif).
example_play_wav.arts
Ceci illustre le module Play Wave.
Vous devez entrer le chemin complet vers un fichier .wav comme paramètre de nom de fichier.
example_multi_add.arts
Ceci montre le module Multi Add qui accepte un nombre indéterminé d'entrées.
Il additionne trois modules Data qui produisent les valeurs 1, 2 et 3 puis affiche le résultat 6.