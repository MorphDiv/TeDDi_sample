# language_name_wals:	French
# language_name_glotto:	French
# ISO_6393:	fra
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	KDE4
# source:	https://object.pouta.csc.fi/OPUS-KDE4/v2/raw/fr.zip
# copyright_short:	http://opus.nlpl.eu/KDE4.php
# copyright_long:	http://opus.nlpl.eu/KDE4.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Référence de programmation & turtlescript;
Ceci est le chapitre de référence & turtlescript; de & kturtle;. La première section de ce chapitre donne quelques aspects de la grammaire des programmes en & turtlescript;. La deuxième section traite exclusivement des opérateurs mathématiques, des opérateurs booléens (vrai & #160; / & #160; faux) et des opérateurs de comparaison. La troisième partie est une énorme liste de toutes les commandes, expliquées une par une. La section quatre explique comment assigner des valeurs aux variables. Enfin, nous expliquons comment arranger l'exécution des commandes avec les instructions de contrôle d'exécution dans la section cinq, et comment créer vos propres commandes avec apprends dans la section six.
La grammaire de & turtlescript;
Comme tout langage, & turtlescript; dispose de différents types de mots et de symboles. En français, nous distinguons les verbes (comme « & #160; marcher & #160; » ou « & #160; chanter & #160; »), et les noms (comme « soeur & #160; » & #160; ou « & #160; maison & #160; »), ils sont utilisés pour différents objectifs. & turtlescript; est un langage de programmation, il est utilisé pour indiquer à & kturtle; ce qu'il faut faire.
Dans cette section, certains types de mots et symboles de & turtlescript; sont expliqués brièvement. Nous expliquons les commentaires, les commandes et les trois différents types de littéraux & #160;: les nombres, les chaînes et les booléens (vrai & #160; / & #160; faux).
Commentaires
Un programme est constitué d'instructions qui sont exécutées lorsque le programme est lancé, et de commentaires. Les commentaires ne sont pas exécutés. & kturtle; les ignore simplement lors que votre programme est exécuté. Ils sont là pour aider les autres programmeurs à mieux comprendre votre programme. Tout ce qui suit le symbole # est considéré comme un commentaire en & turtlescript;. Par exemple, ce petit programme ne fait rien & #160;: # ce petit programme ne fait rien, c'est juste un commentaire & #160;! C'est un peu inutile, mais ça explique bien les choses.
Les commentaires sont très utiles lorsque le programme devient un peu plus complexe. Il peut aider à donner des conseils aux autres programmeurs. Dans le programme suivant, vous pouvez voir l'utilisation des commentaires avec la commande print. # Ce programme a été écrit par Cies Breijs. écris "ce texte sera affiché sur le canevas" # la ligne précédente n'est pas un commentaire, mais la ligne suivante en est un & #160;: # écris "ce texte ne sera pas affiché & #160;:" La première ligne décrit le programme. La deuxième est exécutée par & kturtle; et écrit Ce texte sera affiché sur le canevas sur le canevas. La troisième ligne est un commentaire. Et la quatrième ligne est un commentaire qui contient un morceau de & turtlescript;. Si le symbole # était enlevé dans la quatrième ligne, l'instruction écris serait exécutée par & kturtle;. Les programmeurs disent que l'instruction écris dans la quatrième ligne est « & #160; commentée & #160; ».
Les lignes commentées sont surlignées en gris clair dans l'éditeur de code.
Commandes
À l'aide des commandes, vous dites à la tortue ou à & kturtle; de faire quelque chose. Certaines commandent nécessitent un paramètre, d'autres donnent une sortie. # avance est une commande qui nécessite un paramètre, dans ce cas le nombre 100 & #160;: avance 100 La première ligne est un commentaire. La seconde ligne contient la commande avance et le nombre 100. Le nombre ne fait pas partie de la commande, mais est considéré comme un « & #160; paramètre & #160; » de la commande.
Pour une étude détaillée de toutes les commandes gérées par & kturtle;, allez ici. Les commandes internes sont surlignées en bleu foncé.
Nombres
Vous savez probablement certaines choses sur les nombres. La façon dont ils sont utilisés dans & kturtle; n'est pas très différente de la façon dont on les utilise dans le langage parlé, ou avec les mathématiques.
Nous avons les nombres appelés nombre naturels & #160;: 0, 1, 2, 3, 4, 5, etc. Les nombres négatifs & #160;: -1, -2, -3, etc. Enfin les nombres décimaux, où nombres à virgule, par exemple & #160;: 0.1, 3.14, 33.3333, -5.05, -1.0.
Les nombres peuvent être utilisés dans des opérateurs mathématiques et dans des opérateurs de comparaison. Ils peuvent également être placés dans des variables. Les nombres sont surlignés en rouge foncé.
Chaînes
Tout d'abord un exemple & #160;: écris "Bonjour, je suis une chaîne." Dans cet exemple, écris est une commande et Bonjour, je suis une chaîne. est une chaîne. Les chaînes commencent et se terminent par un symbole ". Grâce à ces symboles, & kturtle; sait qu'il s'agit d'une chaîne.
Les chaînes peuvent être placées dans des variables, tout comme les nombres. Cependant, contrairement aux nombres, les chaînes ne peuvent pas être utilisées avec les opérateurs mathématiques ou avec les opérateurs de comparaison. Les chaînes sont surlignées en rouge.
Les valeurs booléennes (vrai & #160; / & #160; faux)
Il y a deux types de valeurs booléennes & #160;: vrai et faux. Parfois on les appelle également on et off, oui et non, un et zéro. Mais en & turtlescript;, on les appelle toujours vrai et faux. Regardez cet extrait de & turtlescript; & #160;: $a = vrai Si vous regardez dans l'inspecteur, vous verrez que la variable $a est réglée sur vrai, et a le type booléen.
Souvent, les valeurs booléennes sont le résultat d'un opérateur de comparaison, comme dans le morceau de & turtlescript; suivant & #160;: $reponse = 10 & gt; 3 La variable $reponse est placée à vrai car 10 est plus grand que 3.
Les valeurs booléenne vrai et faux sont surlignées en rouge foncé.
Les opérateurs mathématiques, booléens et de comparaison
Le titre de cette section peut sembler compliqué, mais ça ne l'est pas autant que ça en a l'air.
Les opérateurs mathématiques
Il y a les symboles mathématiques de base & #160; connus comme & #160;: l'addition (+), la soustraction (-), la multiplication (*), division (/) et la puissance (^).
Voici un petit exemple sur les opérateurs mathématiques que vous pouvez utiliser dans & turtlescript; & #160;: $somme = 1 + 1 $difference = 20 - 5 $produit = 15 * 2 $rapport = 30 / 30 $puissance = 2 ^ 2 Les valeurs résultant de ces opérateurs mathématiques sont assignées aux différentes variables. En utilisant l 'inspecteur, vous pouvez voir ces valeurs.
Si vous voulez faire simplement un calcul, vous pouvez le faire de la façon suivante & #160;:
écris 2010-12
Voici maintenant un exemple avec des parenthèses & #160;: écris ((20 - 5) * 2 & #160; / 30) + 1 Les expressions dans les parenthèses vont être calculées les premières. Dans cet exemple, 20-5 sera calculé, puis multiplié par 2, divisé par 30, puis 1 est ajouté (ce qui donne 2). Les parenthèses peuvent également être utilisées dans d'autres cas.
& kturtle; dispose également de caractéristiques mathématiques plus avancées sous la forme de commandes. Jetez un oeil aux commandes suivantes, mais gardez à l'esprit qu'il s'agit d'opérations avancées & #160;: arrondi, hasard, racine, exp, pi, sin, cos, tan, arcsin, arccos, arctan.
Opérateurs booléens (vrai & #160; / & #160; faux)
Tandis que les opérateurs mathématiques travaillent avec des nombres, les opérateurs booléens travaillent avec des valeurs booléennes (vrai et faux). Il y a seulement trois opérateurs booléens & #160;: et, ou et non. Le morceau de & turtlescript; suivant montre comment les utiliser & #160;: $et_1_1 = vrai et vrai # - > vrai $et_1_0 = vrai et faux # - > faux $et_0_1 = faux et vrai # - > faux $et_0_0 = faux et faux # - > faux $ou_1_1 = vrai ou vrai # - > vrai $ou_1_0 = vrai ou faux # - > vrai $ou_0_1 = faux ou vrai # - > vrai $ou_0_0 = faux ou faux # - > faux $non_1 = non vrai # - > faux $non_0 = non vrai # - > vrai En utilisant l 'inspecteur, vous pouvez voir les valeurs, bien que nous fournissons ces résultats en petits commentaires à la fin de chaque ligne. et ne vaut vrai seulement si les deux côtés sont vrais. ou vaut vrai si l'un des deux côtés est vrai. Et non passe vrai en faux, et faux en vrai.
Les opérateurs booléens sont surlignés en rose.
Quelques exemples plus complexes
Considérons l'exemple suivant avec et & #160;: $a = 1 $b = 5 si (($a & lt; 10) et ($b == 5)) et ($a & lt; $b) {écris "bonjour"} Dans ce morceau de & turtlescript;, le résultat de trois opérateurs de comparaison sont fusionnés en utilisant des opérateurs et. Ceci signifie que les trois opérateurs doivent donner vrai pour que le texte « & #160; bonjour & #160; » soit affiché.
Un exemple avec ou & #160; $n = 1 si ($n & lt; 10) ou ($n == 2) {écris "bonjour"} Dans ce morceau de & turtlescript;, la partie gauche du ou donne « & #160; vrai & #160; », la partie droite donne « & #160; faux & #160; ». Comme un des deux côtés de l'opérateur ou est « & #160; vrai & #160; », l'opérateur ou vaut « & #160; vrai & #160; ». Ceci signifie que « & #160; bonjour & #160; » sera affiché.
Et pour terminer un exemple avec non, qui change « & #160; vrai & #160; » en « & #160; faux & #160; » et « & #160; faux & #160; » en « & #160; vrai & #160; ». Regardez & #160;:
$n = 1 si non ($n == 3) {écris "bonjour"} sinon {écris "pas bonjour; -)"}
Opérateurs de comparaison
Considérons cette comparaison simple & #160;: $reponse = 10 & gt; Ici, 10 est comparé à trois avec l'opérateur « & #160; plus grand que & #160; ». le résultat de cette comparaison, la valeur booléenne vrai est stockée dans la variable $reponse.
Tous les nombres et variables (qui contiennent des nombres) peuvent être comparés entre eux avec les opérateurs de comparaison.
Voici tous les opétateurs de comparaison possibles: Type de question A == B egal la réponse est vrai si A est égal à B A! = B non égal la réponse est vrai si A n'est pas égal à B A & gt; B plus grand que la réponse est vrai si A est plus grand que B A & lt; B plus petit que la réponse est vrai si A est plus petit que B A & gt; = B supérieur ou égal la réponse est vrai si A est plus grand ou égal à B A & lt; = B inférieur ou égal la réponse est vrai si A est plus petit ou égal à B Notes que A et B doivent être des nombres et des variables qui contiennent ces nombres.
En utilisant les commandes, vous dites à la tortue ou à & kturtle; de faire quelque chose. Certaines commandes ont besoin d'une entrée, d'autres donnent une sortie. Dans cette section, nous expliquons toutes les commandes internes de & kturtle;. Vous pouvez également créer vos propres commandes avec apprends. Les commandes internes discutées ici sont surlignées en bleu foncé.
Déplacer la tortue
Il y a plusieurs commandes qui déplacent la tortue sur l'écran.
avance (av)
avance (av)
avance X
avance fait avancer la tortue sur l'écran de X pixels. Lorsque le crayon est baissé, la tortue laisse une trace (dessine une ligne). avance peut se contracter en av
recule (re)
recule (re)
recule X
recule fait reculer la tortue sur l'écran de X pixels. Lorsque le crayon est baissé, la tortue laisse une trace (dessine une ligne). recule peut se contracter en re.
tournegauche (tg)
tournegauche (tg)
tournegauche X
tournegauche dit à la tortue de se tourner vers la gauche de X degrés. tournegauche peut se contracter en tg.
tournedroite (td)
tournedroite (td)
tournedroite X
tournedroite dit à la tortue de se tourner vers la droite de X degrés. tournedroite peut se contracter en td.
direction (dir)
direction (dir)
direction X
direction fixe la direction de la tortue de X degrés en comptant de zéro, et donc ne dépend pas de la position et de la direction précédentes de la tortue. direction peut se contracter en dir.
centre
centre
centre
centre déplace la tortue au centre du canevas.
va
va
va X, Y
va commande à la tortue d'aller à un certain endroit sur le canevas. Cet endroit est à X pixels depuis la gauche du canevas et à Y pixels depuis le haut du canevas.
vax
vax
vax X
vax & #160;: en utilisant cette commande, la tortue va se déplacer de X pixels depuis la gauche du canevas tandis qu'elle restera à la même hauteur.
vay
vay
vay Y
vay & #160;: en utilisant cette commande, la tortue va se déplacer de Y pixels depuis le haut du canevas tandis qu'elle restera à la même distance de la bordure gauche du canevas.
En utilisant les commandes vas, vax, vay et centre la tortue ne dessinera pas une ligne, peut importe si le crayon est levé ou baissé.
Où est la tortue & #160;?
Il y a deux commandes qui donnent la position de la tortue sur l'écran.
positionx
positionx
positionx retourne le nombre de pixels séparant la gauche du canevas de la position courante de la tortue.
positiony
positiony
positiony retourne le nombre de pixels séparant le haut du canevas de la position courante de la tortue.
La tortue a un crayon
La tortue a un crayon qui trace une ligne lorsqu'elle se déplace. Il y a peu de commandes pour contrôler le crayon. Nous expliquons ces commandes dans ce paragraphe.
lèvecrayon (lc)
lèvecrayon (lc)
lèvecrayon
lèvecrayon relève le crayon du canevas. Lorsque le crayon est levé, aucune ligne n'est tracée lorsque la tortue se déplace. Voir aussi baissecrayon. lèvecrayon peut se contracter en lc.
baissecrayon (bc)
baissecrayon (bc)
baissecrayon
baissecrayon abaisse le crayon sur le canevas. Lorsque le crayon est baissé sur le canevas, une ligne est tracée lorsque la tortue se déplace. Voir aussi lèvecrayon. baissecrayon peut se contracter en bc.
largeurcrayon (lac)
largeurcrayon (lac)
largeurcrayon X
largeurcrayon fixe l'épaisseur (la largeur du trait) du crayon à X pixels. largeurcrayon peut se contracter en lac.
couleurcrayon (cc)
couleurcrayon (cc)
couleurcrayon R, G, B
couleurcrayon fixe la couleur du crayon. couleurcrayon demande une combinaison RVB comme entrée. couleurcrayon peut se contracter en cc.
Commandes pour contrôler le canevas
Voici les différentes commandes pour contrôler le canevas.
taillecanevas (tc)
taillecanevas (tc)
taillecanevas X, Y
Avec la commande taillecanevas, vous pouvez fixer la taille du canevas. Elle reçoit X et Y comme entrée, où X est la nouvelle largeur du canevas en pixels, et Y est la nouvelle hauteur du canevas en pixels. taillecanevas peut se contracter en tc.
couleurcanevas (cca)
couleurcanevas (cca)
couleurcanevas R, G, B
couleurcanevas fixe la couleur du canevas. couleurcanevas reçoit une combinaison RVB comme entrée. couleurcanevas peut se contracter en cca.
Commandes pour nettoyer
Il existe deux commandes pour nettoyer le canevas après avoir mis le désordre.
nettoietout (ntt)
nettoietout (ntt)
nettoietout
Avec nettoietout, vous pouvez nettoyer tous les dessins sur le canevas. Toutes les autres choses restent & #160;: la position et l'angle de la tortue, la couleur du canevas, la visibilité de la tortue et la taille du canevas.
initialise
initialise
initialise
initialise nettoie beaucoup plus profondément que la commande nettoietout. Après la commande initialise, tout redevient comme lorsque vous avez lancé & kturtle;. La tortue se place au milieu de l'écran, la couleur du canevas est blanche, la tortue trace une ligne noire sur le canevas et taillecanevas est défini à 400 x 400 pixels.
La tortue est un lutin (sprite)
La plupart des personnes ne savent pas ce qu'un lutin (sprite) est, voici donc une courte explication & #160;: les lutins sont de petites images qui peuvent se déplacer sur l'écran. (pour plus d'information, voir le glossaire sur lutins). Donc la tortue est un lutin & #160;!
Ce qui suit est un aperçu des commandes relatives aux lutins.
[La version actuelle de & kturtle; ne gère pas encore l'utilisation des lutins autres que la tortue. Dans des versions futures vous pourrez remplacer la tortue par quelque chose de votre propre conception & #160;!]
montre (mo)
montre (mo)
montre
montre rend de nouveau la tortue visible après avoir été cachée. montre peut être abrégé par mo.
cache (ca)
cache (ca)
cache
cache cache la tortue. Ceci peut être utilisé si la tortue ne s'adapte pas à votre dessin. cache peut se contracter en ca.
La tortue peut -elle écrire du texte & #160;?
La réponse est & #160;: oui. La tortue peut écrire, elle écrit tout ce que vous lui commander d'écrire.
écris
écris
écris X
La commande écris est utilisée pour commander à la tortue d'écrire quelque chose sur le canevas. écris reçoit des nombres et des chaînes de caractères comme entrée. Vous pouvez utiliser écris pour écrire plusieurs nombres et chaînes en utilisant le symbole +. Voici un petit exemple & #160;:
$année = 2003 $auteur = "Cies" écris $auteur + "a commencé de projet KTurtle en" + $année + "et prend toujours du plaisir à travailler dessus & #160;!"
taillepolice
taillepolice
taillepolice X
taillepolice fixe la taille de la police qui est utilisée par la commande écris. taillepolice reçoit une entrée qui doit être un nombre. La taille est fixée en pixels.
Commandes mathématiques
Les commandes suivantes sont des commandes mathématiques de & kturtle; plus avancées.
arrondi
arrondi
arrondi(x)
arrondi le nombre donné à l'entier le plus proche. écris arrondi(10.8) avance 20 écris arrondi(10.3) Avec ce code, la tortue écrira les nombre 11 et 10.
hasard (hsd)
hasard (hsd)
hasard X, Y
hasard est une commande qui demande une entrée et qui vous donne une sortie. Comme entrée sont requis deux nombres, le premier (X) donne la sortie minimale, et le second (Y) fixe le maximum. La sortie est un nombre choisi au hasard qui est égal ou plus grand que le minimum et égal ou plus petit que le maximum. Voici un petit exemple & #160;: répète 500 [$x = hasard 1, 20 avance $x tournedroite 10 - $x] En utilisant la commande hasard, vous pouvez ajouter un peu de chaos dans votre programme.
racine
racine
racine X
La commande racine est utilisée pour trouver la racine carrée d'un nombre X.
exp
exp
pi
pi
pi
Cette commande renvoie la constante PI, 3,14159.
sin sin, cos cos, tan
tan
sin X cos X tan X
Ces trois commandes représentent les fameuses fonctions trigonométriques sin, cos et tan. L'argument en entrée pour ces trois commandes, X, est un nombre.
arcsin arcsin, arccos arccos, arctan
arctan
arcsin X arccos X arctan X
Ces commandes sont les fonctions inverse des fonctions sin, cos et tan. L'argument en entrée pour ces trois commandes, X, est un nombre.
Entrée et retour avec les boîtes de dialogue
Une boîte de dialogue est une petite fenêtre contextuelle qui fournit du retour ou demande des choses en entrée. & kturtle; possède deux commandes pour les boîtes de dialogue & #160;: message et demande
message
message
message X
La commande message prend une chaîne en entrée. Elle affiche une boîte de dialogue contenant le texte de la chaîne.
message "Cies a commencé à travailler sur KTurtle en 2003 et s'amuse toujours à travailler dessus!"
demande
demande
demande X
demande prend une chaîne en entrée. Elle affiche cette chaîne une boîte de dialogue (similaire à message), ainsi qu'un champ d'entrée. Après que l'utilisateur a saisi un nombre ou une chaîne, le résultat peut être stocké dans une variable ou passé comme argument à une commande. Par exemple & #160;: $entree = demande "quelle est votre année de naissance?" $sortie = 2010 - $in écris "En 2010, vous avez eu" + $sortie + "ans à un moment donné." Si l'utilisateur annule la boîte de dialogue, ou ne met rien du tous, la variable est vide.
Affectations des variables
Nous devons d'abord regarder les variables, ensuite, nous verrons comment affecter des valeurs à ces variables.
Les variables sont des mots qui commencent par un $, dans l 'éditeur, elles sont surlignées en violet.
Les variables contiennent soit des nombres, des chaînes ou des valeurs booléennes (vrai & #160; / & #160; faux). En utilisant une affectation, =, une variable reçoit son contenu. Elle le conservera jusqu'à ce que le programme se termine ou qu'on assigne quelque chose d'autre à la variable.
Vous pouvez utiliser les variables, une fois affectées, tout comme s'il s'agissait de leur contenu. Par exemple, dans le morceau de & turtlescript; & #160;: $x = 10 $x = $x / 3 écris $x Tout d'abord la variable $x se voit affecter la valeur 10. Ensuite, $x se voit de nouveau affecter sa propre valeur divisée par 3 & mdash; ceci signifie en fait que $x est affectée du résultat de 10 / 3. Enfin, $x est affichée. Dans les lignes deux et trois, vous voyez que $x est utilisé comme s'il s'agissait de son contenu.
Les variables doivent être affectées avant de pouvoir être utilisées. Par exemple & #160;: écris $n donnera un message d'erreur.
Regardez le morceau de & turtlescript; suivant & #160;: $a = 2004 $b = 25 # la commande suivante affiche « & #160; 2029 & #160; » écris $a + $b recule 30 # la commande suivante écrit "2004 plus 25 égal 2009" écris $a + "plus" + $b + "égal" + ($a + $b) Dans les deux premières lignes, les variables a et b sont initialisées à 2004 et 25. Ensuite viennent les deux commandes écris et un recule 30 entre. Les commentaires avant les commandes écris expliquent ce que ces commandes font. Comme vous le voyez, les variables peuvent être utilisée comme s'il s'agissait de leur contenu, vous pouvez les utiliser avec n'importe quel type d 'opérateurs ou les passer en entrée lorsque vous appelez des commandes.
Un autre exemple & #160;: $nom = demande "Quel est votre nom?" écris "Salut" + $nom + "! Bonne chance dans l'apprentissage de la programmation..." Plutôt direct. Encore une fois, vous voyez que la variable $nom est traitée comme une chaîne.
Lorsque vous utilisez des variables, l 'inspecteur est très utile. Il vous montre le contenu de toutes les variables actuellement en cours d'utilisation.
Contrôler l' exécution
Les contrôleurs d'exécution vous permettent, & mdash; comme leur nom l'indique & mdash; de contrôler l'exécution.
Les commandes de contrôle d'exécution sont surlignées en vert foncé en utilisant une police en gras. Les accolades sont principalement utilisées avec les contrôleurs d'exécution et sont surlignées en noir.
Faite attendre la tortue
Si vous avez exécuté quelques programmes dans & kturtle; vous pouvez avoir remarqué que la tortue se déplace très rapidement pour dessiner. La commande suivante ralentit la tortue.
attends
attends
attends X
attends fait attendre la tortue pendant X secondes. répète 36 {avance 5 tournedroite 10 attends 0.5} Ce code dessine un cercle, mais la tortue va attendre une demi-seconde après chaque étape. Cela donne l'impression d'une tortue qui va moins vite.
Exécute « & #160; si & #160; »
si
si
si booléen {...}
Le code qui est placé entre les accolades sera exécuté seulement si la valeur booléenne vaut vrai. $x = 6 si $x & gt; 5 {écris "x est plus grand que cinq & #160;!"} À la première ligne, $x est fixé à 6. À la seconde ligne, un opérateur de comparaison est utilisé pour évaluer $x & gt; 5. Comme le résultat est vrai, 6 est plus grand que 5, le contrôleur d'exécution si va permettre au code entre accolades d'être exécuté.
Si non, en d'autres termes & #160;: « & #160; sinon & #160; »
sinon
sinon
si booléen {...} sinon {...}
sinon peut être utilisé en plus du contrôleur d'exécution si. Le code entre accolades après sinon n'est exécuté que si le booléen vaut faux. initialise $x = 4 si $x & gt; 5 {écris "x est plus grand que cinq & #160;!"} sinon {écris "x est plus petit que six & #160;!"} L 'opérateur de comparaison évalue l'expression $x & gt; 5. Comme 4 n'est pas plus grand que 5, l'expression vaut faux. Cela signifie que le code entre accolades après sinon est exécuté.
La boucle « & #160; tantque & #160; »
tantque
tantque
tantque booléen {...}
Le contrôleur d'exécution tantque ressemble beaucoup à si. La différence est que tantque répète le code entre accolades jusqu'à ce que le booléen vaut faux $x = 1 tantque $x & lt; 5 {avance 10 attends 1 $x = $x + 1} À la première ligne, $x est fixé à 1. À la seconde ligne, $x & lt; 5 est évalué. Comme la réponse à cette question est vrai, le contrôleur d'exécution tantque commence à exécuter le code entre accolades jusqu'à ce que $x & lt; 5 soit faux. Dans ce cas, le code entre accolades sera exécuté quatre fois, à chaque fois que la cinquième ligne est exécutée, $x augmente de 1.
La boucle « & #160; répète & #160; »
répète
répète
répète nombre {...}
Le contrôleur d'exécution répète est similaire à tantque. La différence est que répète laisse en boucle le code entre accolades autant de fois que le nombre donné.
La boucle « & #160; pour & #160; », une boucle de comptage
pour
pour
pas
pour variable = nombre à nombre {...}
La boucle pour est une boucle de comptage, & cad; qu'elle compte à votre place. Le premier nombre règle la variable pour la première boucle. À chaque boucle, le nombre est incrémenté jusqu'à ce que la seconde valeur soit atteinte. pour $x = 1 à 10 {écris $x * 7 avance 15} Chaque fois que le code entre accolades est exécuté, la valeur de $x augmente de 1, jusqu'à ce que x atteigne la valeur 10. Le code entre les accolades écrit $x multiplié par 7. Après que ce programme a fini son exécution, vous allez voir la table de multiplication de 7 imprimée sur le canevas.
La taille du pas par défaut de la boucle est 1, vous pouvez utiliser une autre valeur avec & #160;:
pour variable = nombre à nombre pas nombre {...}
Quitter la boucle
coupure
coupure
coupure
Termine immédiatement la boucle courante et transfert le contrôle à la déclaration qui suit la boucle.
Arrête l'exécution du programme
sortie
sortie
sortie
Termine l'exécution de votre programme.
Créez vos propres commandes & #160;!
apprends est une commande très spéciale, car elle est utilisée pour créer vos propres commandes. La commande que vous créez peut recevoir des entrées et retourner des sorties. Regardons maintenant comment une nouvelle commande est créée & #160;: apprends cercle $x {répète 36 {avance $x tournegauche 10}} La nouvelle commande est appelée cercle. cercle reçoit un argument en entrée, qui fixe la taille du cercle. cercle ne retourne aucune sortie. La commande cercle peut maintenant être utilisée comme une commande normale dans la suite du programme. Voyez cet exemple & #160;:
apprends cercle $X {répète 36 {avance $X tournegauche 10}} va 30,30 cercle 20 va 40,40 cercle 50
Dans l'exemple suivant, une commande avec une valeur de retour est créée. apprends factorielle $x {$r = 1 pour $i = 1 à $x {$r = $r * $i} retourne $r} écris factorielle 5 Dans cet exemple, une nouvelle commande appelée factorielle est créée. Si l'entrée de la commande est 5, alors la sortie sera 5*4*3*2*1. En utilisant retourne, la valeur de sortie est spécifiée et le résultat est renvoyé.
Les commandes peuvent avoir plus d'une entrée. Dans l'exemple suivant, une commande qui dessine un rectangle est créé. apprends boîte $x, $y {avance $y tournedroite 90 avance $x tournedroite 90 avance $y tournedroite 90 avance $x tournedroite 90} Maintenant vous pouvez lancer boîte 50, 100 et la tortue dessinera un rectangle sur le canevas.
Ceci est le manuel de référence du logiciel de programmation & turtlelang; de & kturtle;. Dans ce chapitre, nous verrons d'abord brièvement les différents types d'instructions. Les commandes seront alors expliquées une par une. Les conteneurs, les mathématiques, les questions et contrôleurs d'exécution seront ensuite expliqués. Enfin, nous vous montrerons comment créer vos propres commandes avec Apprends.
Différents types d' instructions
Comme dans tout langage, & turtlelang; possède différents types de mots et de symboles. Les différences entre les types sont expliquées brièvement ici.
En utilisant les commandes, vous dites à la tortue ou à & kturtle; de faire quelque chose. Certaines commandes ont besoin d'une entrée.
# avance est une commande qui nécessite une entrée, ici le nombre 100 & #160;: avance 100
Les chaînes sont surlignées en rouge sombre dans l 'éditeur de code.
Les chaînes peuvent être placées dans des conteneurs. Cependant, elles ne peuvent pas être utilisées dans des calculs mathématiques ou dans des questions.
Les chaînes sont surlignées en rouge dans l 'éditeur de code.
Noms
Lorsque vous programmez en langage & turtlelang;, vous créez de nouvelles choses. Si vous écrivez un programme, vous avez probablement besoin de conteneurs, et dans certains cas vous aurez à utiliser Apprends pour créer de nouvelles commandes. Lorsque vous créez un conteneur ou une nouvelle commande avec Apprends, vous devez spécifier un nom.
Vous pouvez choisir ce que vous voulez, à partir du moment où ce nom n'a pas déjà une signification. Par exemple, vous ne pouvez pas nommer un conteneur avance puisque ce nom est déjà utilisé pour une commande, et a donc déjà un sens. # ici avance est utilisé comme une nouvelle commande, # mais il y a déjà une correspondance # ceci produira une erreur & #160;: apprendre avance {écris "ceci est non-valable"} # & #160; ceci fonctionne: apprendre monavance {écris "ceci est valable"} Les noms peuvent seulement contenir des lettres, des chiffres et des caractères de soulignement (_). Cependant, ils doivent commencer par une lettre. Les noms des conteneurs doivent commencer avec le préfixe de conteneur ($).
Les nombres sont surlignés en pourpre et sont en gras dans l'éditeur de code.
Veuillez lire la documentation sur les conteneurs et sur la commande Apprends pour davantage d'explications et d'autres exemples.
Les affectations sont faites avec le symbole =. Dans les langages de programmation, il est conseillé de lire un = unique comme « & #160; devient & #160; » au lieu de « & #160; est égal à & #160; ». L'expression « & #160; est égal à & #160; » est plus approprié pour == qui est une question.
Les affectations sont généralement utilisées pour deux raisons & #160;: (1) pour ajouter du contenu aux conteneurs, et (2) pour modifier le contenu d'un conteneur. Par exemple & #160;:
$x = 10 # le conteneur x contient maintenant le nombre 10 W = "Mon âge est & #160;:" # le conteneur W contient maintenant la chaîne "Mon âge est & #160;:" # ceci affiche le contenu des conteneurs "W" et "x" sur le canevas écris $W + $x
Pour d'autres exemples, voyez la section qui traite des conteneurs.
Symboles mathématiques
Pour une explication complète et d'autres exemples, voyez la section mathématiques.
Questions
Nous pouvons poser des questions simples pour lesquelles la réponse sera « & #160; vrai & #160; » ou « & #160; faux & #160; ».
L'utilisation des questions est largement décrite dans la section questions.
Mots collants pour questions
Les questions peuvent être collées ensemble avec des « & #160; mots collants & #160; ». Les mots collants sont et, ou, et le mot collant spécial non.
L'utilisation des mots collants est expliquée dans la section mots collants.
Les commentaires sont des lignes qui commencent par un #. Par exemple & #160;: # ceci est un commentaire & #160;! écris "ceci n'est pas un commentaire" # la ligne précédente n'est pas un commentaire, mais la ligne suivante en est un & #160;: # écris "ceci n'est pas un commentaire" Vous pouvez ajouter des commentaires dans le code pour vous -même ou pour quelqu'un d'autre. Les commentaires sont utilisés pour & #160;: (1) ajouter des descriptions courtes au programme, (2) expliquer comment un morceau de code fonctionne s'il est un peu obscur, et (3) commenter des lignes de code qui doivent être (temporairement) ignorées (voir la dernière ligne de l'exemple).
Une commande qui lance un dé pour vous
Il existe une commande qui lance un dé pour vous, elle s'appelle hasard, et est très utile pour des résultats inattendus.
Conteneurs
Les conteneurs sont des lettres ou des mots qui peuvent être utilisés par le programmeur pour stocker un nombre ou un texte. Les conteneurs qui contiennent un nombre sont appelés des variables et les conteneurs qui contiennent du texte sont appelés des chaînes. Les conteneurs peuvent être identifiés par le caractère $qui précède son usage.
Variables & #160;: conteneurs de nombres
Commençons avec un exemple & #160;: $x = 3 écris $x À la première ligne, la lettre x est utilisée comme une variable (un conteneur de nombres). Comme vous le voyez, la valeur de la variable x est fixée sur 3. La deuxième ligne imprime la valeur.
Remarquez que si nous avions voulu afficher un x, nous aurions dû écrire & #160;:
écris "x"
Conteneurs contenant du texte (chaînes)
Dans un programme, le texte commence et se termine généralement par des guillemets. Comme vous l'avez déjà vu & #160;: écris "Bonjour programmeur & #160;!" Le texte est délimité par des guillemets. Ce texte est appelé une chaîne.
Les chaînes peuvent également être stockées dans des conteneurs, tout comme les nombres. La plus grosse différence est que les chaînes ne peuvent pas être utilisées dans des calculs mathématiques et des questions. Voici un exemple d'utilisation des chaînes & #160;: $x = "Bonjour" nom = demande "Veuillez saisir votre nom..." écris $x + nom + ", comment allez vous & #160;?" À la première ligne, la variable x est fixée à Bonjour. À la deuxième ligne, la chaîne nom est fixée sur la sortie de la commande demande. À la troisième ligne, le programme affiche une concaténation des trois chaînes sur le canevas.
Ce programme vous demande de saisir votre nom. Lorsque par exemple vous saisissez le nom Paul, le programme imprime Bonjour Paul, comment allez vous & #160;?. Remarquez que le signe plus (+) est le seul symbole mathématique que vous pouvez utiliser avec des chaînes.
Est ce que la tortue peut faire des maths & #160;?
Oui, & kturtle; peut aussi calculer. Vous pouvez ajouter (+), soustraire (-), multiplier (*) et diviser (/). Voici un exemple dans lequel nous allons tous les utiliser & #160;: $a = 20 - 5 $b = 15 * 2 $c = 30 & #160; / 30 $d = 1 + 1 écris "a & #160;:" & #160; + $a + & #160; ", $b & #160;:" & #160; + b + & #160; ", c & #160;:" & #160; + $c + ", d & #160;:" & #160; + $d Savez vous quelles valeurs ont a, b, c et d & #160;? Notez le symbole d 'affectation =.
& kturtle; possède des fonctions mathématiques avancées. Il connaît le nombre pi et les fonctions trigonométriques comme sin, cos, tan, arcsin, arccos, arctan et les fonctions sqrt et exp.
Poser des questions, obtenir des réponses...
si et pendant sont des contrôleurs d'exécution dont nous allons discuter dans le prochain paragraphe. Dans ce paragraphe nous utilisons la commande si pour expliquer les questions.
Un simple exemple de question & #160;: $x = 6 si $x & gt; 5 {écris "bonjour"} Dans cet exemple, la question est la partie x & gt; 5. Si la réponse à cette question est vraie, le code entre les crochets sera exécuté. Les questions sont une partie importante en programmation et sont souvent utilisées avec des contrôleurs d'exécution, comme si. Tous les nombres et variables (conteneurs de nombres) peuvent être comparés les uns aux autres grâce à des questions.
Voici toutes les questions possibles & #160;:
Types de questions
a == b
égal à
la réponse est vraie si a est égal à b
a & #160;! = b
non égal
la réponse est vraie si a n'est pas égal à b
a & gt; b
plus grand que
la réponse est vraie si a est plus grand que b
a & lt; b
plus petit que
la réponse est vraie si a est plus petit que b
a & gt; = b
plus grand ou égal
la réponse est vraie si a est plus grand ou égal à b
a & lt; = b
plus petit ou égal
la réponse est vraie si a est plus petit ou égal à b
Mots collants pour questions
Les mots collants pour les questions nous permettent d'assembler plusieurs questions pour n'en former plus qu'une. $a = 1 $b = 5 si ($a & lt; 5) et ($b == 5) {écris "bonjour"} Dans cet exemple, le mot collant et est utilisé pour rassembler deux questions (a & lt; 5, b == 5) ensemble. Si un côté de et répondait faux toute la question aurait pour réponse faux, parce qu'avec le mot collant et les deux côtés doivent être vrai pour répondre vrai. N'oubliez pas d'utiliser les parenthèses autour des questions & #160;!
Voici un aperçu schématique, une explication plus détaillée suit plus bas & #160;:
Mots collants pour questions
et
les deux côtés doivent être vrai pour que la réponse soit vrai
ou
si l'un des côtés est vrai la réponse est vrai
non
et
Lorsque deux questions sont assemblées avec et, les deux côtés du et doivent être « & #160; vrai & #160; » pour que le résultat soit « & #160; vrai & #160; ». Un exemple & #160;: $a = 1 $b = 5 si (($a & lt; 10) et ($b == 5)) et ($a & lt; $b) {écris "bonjour"} Dans cet exemple, vous avez deux questions collées, assemblées à une troisième question.
ou
Si une des deux questions qui sont assemblées avec ou est « & #160; vrai & #160; », le résultat sera « & #160; vrai & #160; ». Un exemple & #160;: $a = 1 $b = 5 si (($a & lt; 10) ou ($b == 10)) ou ($a == 0) {écris "bonjour"} Dans cet exemple, vous voyez un assemblage de deux questions combiné avec une troisième question.
non
non
non est un mot collant spécial car il ne fonctionne qu'avec une question à la fois. non change « & #160; vrai & #160; » en « & #160; faux & #160; » et « & #160; faux & #160; » en « & #160; vrai & #160; ». Un exemple & #160;: $a = 1 $b = 5 si non (($a & lt; 10) et ($b == 5)) {écris "bonjour"} sinon {écris "pas bonjour & #160;; -)"} Dans cet exemple, la question collée est « & #160; vrai & #160; », pourtant le non le change en « & #160; faux & #160; ». Ainsi, en fin de compte, "pas bonjour & #160;; -)" est affiché sur le canevas.
si question [...] sinon [...]
pour point de départ à point d'arrivée [...]
pour point de départ à point d'arrivée pas taille pas {...}
Arrêter la tortue