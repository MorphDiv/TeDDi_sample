# language_name_wals:	French
# language_name_glotto:	French
# ISO_6393:	fra
# year_composed:	NA
# year_published:	2014
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	GNOME
# source:	https://object.pouta.csc.fi/OPUS-GNOME/v1/raw/fr.zip
# copyright_short:	http://opus.nlpl.eu/GNOME.php
# copyright_long:	http://opus.nlpl.eu/GNOME.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Toutes les fenêtres et toutes les boîtes de dialogue.
Sébastien Granjoux
seb.sfo@free.fr
Fenêtres et boîtes de dialogue
Démarrer un programme sans le débogueur.
Philip Chimento
philip.chimento@gmail.com
Exécution d'un programme
Si
Dans le
Le programme actuel et plusieurs paramètres peuvent être définis dans la boîte de dialogue
Dans le
Si le programme a besoin de fichiers de données, il vous faut probablement les installer avant de l'exécuter. Consultez
Boîte de dialogue des paramètres du programme
Boîte de dialogue « Paramètres du programme »
La boîte de dialogue
Programme
C'est le programme qui est exécuté quand vous le lancez avec ou sans le débogueur. La liste déroulante vous permet de sélectionner les programmes créés par le projet actuel, mais vous pouvez cliquer sur le bouton
Paramètres
Ce sont les paramètres de la ligne de commande utilisés par votre programme. La liste déroulante conserve un historique des derniers paramètres utilisés.
Répertoire de travail
Le répertoire de travail est le répertoire actuel où votre programme est exécuté.
Variables d'environnement
Cliquez sur la section déroulante pour afficher toutes les variables d'environnement accessibles à votre programme. Par défaut, elle inclut toutes les variables d'environnement actuelles, celles-ci sont affichées en gris clair.
Cliquez sur le bouton
Cliquez sur
Cliquez sur
Quand une variable n'a pas la même valeur que dans l'environnement actuel, elle s'affiche en noir.
Exécution dans un terminal
Cochez cette case pour exécuter le programme dans un terminal permettant de saisir des données et de les visualiser avec les flux Unix standards. Ce n'est pas nécessaire pour les programmes possédant une interface graphique.
Assistant de modèle de projet.
Assistant de modèle de projet
Un modèle de projet se compose d'un ensemble de fichiers qui peuvent être traités par un puissant moteur de gestion de modèle appelé
Ce fichier
Créer un projet à partir de rien.
Création d'un projet
Les nouveaux projets sont créés à partir de modèles.
Dans le
D'une autre façon, dans la liste déroulante du bouton
Sélectionnez l'icône représentant le type de projet que vous voulez créer et cliquez sur
En laissant le pointeur de souris sur une icône de projet pendant quelques instants, un message d'aide apparaît donnant des informations sur le type de projet.
Selon le type de projet sélectionné, vous devez saisir des informations différentes. Une fois réalisé, cliquez sur
Toutes les informations sont regroupées par pages et il vous faut souvent renseigner deux ou trois pages. Vous pouvez toujours revenir en arrière en utilisant le bouton
Laissez le pointeur de souris sur un bouton ou une zone de saisie pendant quelques instants pour obtenir un petit message d'aide donnant plus de détails sur les paramètres correspondants.
Après avoir renseigné toutes les pages, vous obtenez une page de résumé affichant les principales informations sur ce projet. Rien n'a encore été écrit sur votre disque jusque-là. Cliquez sur
Chaque type de projet correspond à un modèle.
Ajouter ou retirer une cible d'un projet.
Ajout ou retrait de cibles
Si le moteur de gestion de projet l'accepte, vous pouvez ajouter ou retirer des cibles dans votre projet sans modifier le fichier projet. Une cible regroupe des fichiers. Elle est habituellement utilisée pour représenter un programme, avec tous ses fichiers source et toutes ses dépendances.
Ajout d'une cible
Sélectionnez le répertoire dans lequel vous voulez ajouter la nouvelle cible dans la
D'une autre façon dans le
Vous pouvez sélectionner un autre répertoire dans la partie inférieure de la
Saisissez un nom de cible et sélectionnez le type de cible dans la liste déroulante en-dessous. Selon votre moteur de gestion de projet, différents types de cible sont possibles.
Les noms de cibles sont habituellement restreints aux lettres, chiffres et le caractère de soulignement. Aussi vaut-il mieux éviter d'utiliser d'autres caractères.
Quand vous avez choisi le nom, le type et le parent de la cible, cliquez sur le bouton
Suppression d'une cible
Sélectionnez la cible que vous voulez supprimer dans la
Confirmez la suppression. La cible et toutes ses propriétés sont alors supprimées du fichier projet. Tous ses fichiers restent intacts sur votre disque dur.
Gestionnaire de projet.
Greffon gestionnaire de projet

Quelle que soit le moteur de gestion sous-jacent, l'interface graphique est la même, mais certaines fonctions peuvent être désactivées.
Greffon moteur de gestion de projet
Ajouter ou retirer des paquets bibliothèques d'une cible.
Ajout ou retrait de paquets bibliothèques
Quand vous avez créé un module contenant une ou plusieurs bibliothèques, vous pouvez l'ajouter à une cible.
Ajout d'un paquet bibliothèque à une cible
Les bibliothèques ne peuvent pas être ajoutées directement à une cible. Il faut les placer d'abord dans un module, puis ajouter ce module à la cible.
Sélectionnez le programme dans lequel vous voulez ajouter la nouvelle bibliothèque dans la
D'une autre façon dans le
Vous devez choisir la cible où vous voulez ajouter le module dans la
Quand vous êtes prêt, cliquez sur le bouton
Suppression d'un paquet bibliothèque d'une cible
Sélectionnez la bibliothèque que vous voulez retirer dans la
Confirmez la suppression. La bibliothèque est retirée de la cible.
Ajouter ou retirer des bibliothèques d'un projet.
Ajout ou suppression de nouvelles bibliothèques
Sous Linux, la plupart des bibliothèques sont regroupées dans un paquet pour être facilement utilisables. Quand vous avez besoin d'une de ces bibliothèques,
Ajout d'un paquet de bibliothèques dans un nouveau module
Une bibliothèque ne peut pas être ajoutée directement à votre programme, pour cela, vous devez d'abord créer un module qui est juste un regroupement de bibliothèques.
Sélectionnez le programme où vous voulez ajouter la nouvelle bibliothèque dans la
D'une autre façon dans le
Vous obtenez une liste des paquets de bibliothèques installés sur votre système. Vous pouvez cocher une ou plusieurs bibliothèques.
Si la bibliothèque dont vous avez besoin n'est pas là, c'est probablement qu'elle n'est pas installée sur votre système. Lancez l'application que vous utilisez pour installer des nouveaux programmes et recherchez la bibliothèque. Le paquet voulu a souvent une extension « .dev » ou « .devel » et devrait inclure les fichiers d'en-tête (header) et un fichier pkg.config avec une extension
Une fois la bibliothèque sélectionnée, un nom de module est automatiquement généré, mais vous pouvez le modifier. Cela fait, cliquez sur le bouton
Lisez la
Ajout de paquets de bibliothèques dans un module existant
Sélectionnez le module dans lequel vous voulez ajouter la nouvelle bibliothèque dans la
Dans la liste de tous les paquets de bibliothèques, cochez les bibliothèques additionnelles désirées. Assurez-vous que le nom de module est sélectionné dans la boîte de texte inférieure puis, cliquez sur le bouton
Lisez la
Suppression d'un paquet de bibliothèques d'un module
Sélectionnez la bibliothèque que vous voulez retirer dans la
Confirmez la suppression. La bibliothèque est retirée du fichier projet.
Ajouter ou retirer des bibliothèques hors-paquet d'un projet.
Ajout ou retrait de bibliothèques hors-paquet
Ajout d'une bibliothèque hors-paquet à une cible
Pour utiliser une bibliothèque en C, vous devez indiquer au compilateur où se trouvent les fichiers d'en-tête (header) et à l'éditeur de lien (linker) où se trouvent les bibliothèques nécessaires. Le problème est que votre programme ne pourra pas être compilé sur un autre ordinateur si les fichiers d'en-tête et les bibliothèques sont situés ailleurs.
Sélectionnez le répertoire contenant le programme dans lequel vous voulez ajouter la bibliothèque dans la
D'une autre façon, dans le
Si les fichiers d'en-tête (header) sont installés dans un emplacement standard (
Il se peut que vous deviez cliquer sur le bouton
Ensuite, vous devez ajouter la bibliothèque à la cible. Sélectionnez le programme dans lequel vous voulez ajouter la bibliothèque dans la
Vous devez paramétrer la propriété
Si la bibliothèque n'est pas dans un répertoire standard,
Suppression d'une bibliothèque hors-paquet d'une cible
Sélectionnez la bibliothèque que vous voulez retirer dans la
Supprimez la bibliothèque des propriétés
Ajouter ou retirer des fichiers d'un projet.
Ajout ou suppression de fichiers
Si le moteur de gestion du projet l'accepte, vous pouvez ajouter ou retirer des fichiers de votre projet sans modifier le fichier projet.
Ajout de fichiers
Sélectionnez la cible dans laquelle vous voulez ajouter le nouveau fichier source dans la
D'une autre façon, dans le
La cible vous permet de regrouper des fichiers et possède un type qui définit comment les fichiers sont utilisés. Une cible de programme contient des fichiers sources qui sont compilés pour créer la cible. D'autre part, une cible de données ne regroupe que des fichiers de données qui sont installés au même endroit.
Vous pouvez sélectionner une autre cible dans la
Cliquez sur le bouton
Quand vous avez choisi la cible et les fichiers, cliquez sur le bouton
Certains formats de projet requièrent que le fichier soit dans le répertoire du projet. Les fichiers source ajoutés en dehors du répertoire du projet sont automatiquement copiés dans ce répertoire pour remplir cette condition.
Suppression d'un fichier
Sélectionnez le fichier que vous voulez retirer dans la
Confirmez la suppression. Le fichier est retiré du projet mais n'est pas supprimé de votre disque.
Importer un projet existant.
Importation d'un projet

Dans le
Sélectionnez
Vous pouvez aussi sélectionner
Après avoir sélectionné un projet existant, la boîte de texte

Moteur de gestion de projet Makefile.
Greffon moteur de gestion de projet Makefile
Un Makefile est probablement la façon la plus courante de bâtir un logiciel sur toutes sortes de plateformes. Un Makefile contient une liste de règles décrivant quelles commandes doivent être exécutées pour générer une cible à partir d'une liste de dépendances. Lors de la construction d'un programme, la cible est un fichier objet et les dépendances sont les fichiers sources. La cible d'une règle peut être la dépendance d'une autre, ce qui permet l'enchaînement de plusieurs règles de façon à fabriquer une cible finale.
C'est un outil général, de bas niveau, ce qui rend difficile de trouver tous les fichiers sources et toutes les cibles d'un projet. Aussi
Si le moteur de gestion de projet n'est pas capable de trouver les fichiers sources, vous pouvez utiliser le moteur de gestion de répertoire à la place. Il ne reconnaît aucune cible mais devrait récupérer tous les fichiers sources.
La modification des propriétés, l'ajout ou le retrait de cibles et de fichiers sources sont désactivés avec ce moteur de gestion, étant donné que la modification automatique du makefile n'est pas implémentée. Il doit être modifié manuellement en utilisant l'éditeur de texte. Quand le makefile est enregistré, il est néanmoins automatiquement rechargé.
@@image: 'figures/anjuta-in-action.png'; md5=a31f1c85a4a14032fcd30ab6f6d6b3c0
Introduction
Introduction à l'Environnement de développement intégré



Nous espérons que vous apprécierez l'usage d'
La capture d'écran suivante illustre une partie des éléments que vous trouvez dans

Fenêtre principale d'
Toutes les rubriques de l'aide.
Index
Moteur de gestion de projet Répertoire.
Greffon moteur de gestion de projet Répertoire
C'est le plus simple des moteurs de gestion de projet. Il n'y a pas de fichier projet. Il fonctionne comme un visionneur de fichiers, considérant tous les fichiers correspondants à des extensions de sources typiques (par exemple
Ce moteur de gestion est une solution alternative bien pratique si votre projet n'a pas de moteur de gestion correspondant dans
Il n'est pas possible d'ajouter ou de modifier quoi que ce soit avec un projet utilisant ce moteur de gestion. Mais si vous créez un fichier source dans le répertoire de projet, avec la bonne extension, il sera ajouté automatiquement.
Surveiller les expressions et les variables.
Inspection d'expressions
Les expressions inspectées sont des expressions que le débogueur évalue et dont il affiche le résultat, chaque fois que le programme est interrompu, par exemple après chaque
Affichage de la liste des expressions inspectées
Dans le
Tout comme les variables locales, toutes les expressions inspectées s'affichent selon une arborescence avec des enfants représentant les membres de la structure ou du tableau.
Variable
Nom de la variable ou de l'expression.
Valeur
Valeur de la variable ou de l'expression.
Type
Type du résultat pour la variable ou l'expression.
Mise à jour des expressions inspectées
Les expressions inspectées peuvent être mises à jour automatiquement dès que le programme est interrompu, ou à la demande de l'utilisateur.
Pour définir une expression inspectée en vue de sa mise à jour automatique :
Dans la fenêtre
Pour mettre à jour manuellement une variable inspectée :
Dans la fenêtre
Pour mettre à jour manuellement toutes les expressions inspectées en une fois :
Dans la fenêtre
Ajout d'une inspection sur une expression
Pour ajouter une expression à la liste des inspections :
Dans le
Saisissez l'expression à inspecter. Cochez
Une expression peut être évaluée et ensuite ajoutée en tant que variable inspectée de la façon suivante :
Dans le
Cliquez sur le bouton
Suppression d'une expression à inspecter
Vous pouvez enlever une expression de la liste des expressions inspectées.
Dans la fenêtre
Les expressions inspectées peuvent être enlevées toutes en même temps.
Dans la fenêtre
Modification de la valeur d'une variable
Si une expression inspectée correspond à une variable, vous pouvez modifier sa valeur.
Dans la fenêtre
Saisissez la nouvelle valeur.
Trucs et astuces de débogage.
Astuces de débogage
Résolution des erreurs critiques de Glib/GTK+
Il est parfois difficile de trouver où les erreurs critiques Glib sont survenues, car elles n'interrompent pas le programme. Vous pouvez régler le programme de façon à ce qu'il s'arrête dès qu'une erreur critique GLib survient en donnant à la variable d'environnement
Ouvrez la
Cliquez sur le signe plus, à côté de
Cliquez sur
Remplissez le
Cliquez sur
Exécutez le programme avec le débogueur en sélectionnant
Faites tourner le programme jusqu'à ce que l'erreur critique survienne.
Quand le programme s'interrompt, examinez
La fonction la plus haute avec le numéro d'enregistrement 0 est dans Glib, aussi devez-vous parcourir la pile jusqu'en bas. Habituellement, l'erreur provient de la fonction la plus élevée appartenant à votre programme.
Examiner les threads.
Threads
Liste des threads
Un programme peut être composé de plusieurs threads (ou fil d'exécution). Chaque thread est exécuté indépendamment et possède ses propres registres, piles et variables locales, mais partage toutes les variables globales.
Dans le
La fenêtre affiche les informations suivantes à propos de chaque thread :
Actif
Cela contient une flèche jaune qui pointe vers le thread actif.
ID
C'est un numéro correspondant à chaque thread.
Fichier
Nom du fichier contenant la fonction correspondant au cadre actuel du thread actuel.
Ligne
Numéro de ligne de la fonction correspondant au cadre actuel du thread actuel.
Fonction
Nom de la fonction correspondant au cadre du thread actuel.
Adresse
Adresse de la fonction correspondant au cadre du thread actuel.
Changement de thread actif
Le thread actuel est le thread dont la pile est les variables locales sont actuellement affichées dans le débogueur.
Dans la fenêtre
Faites un clic droit et sélectionnez
Affichage de la fonction actuelle
Faites un double clic, ou un clic droit et sélectionnez
Arrêter et continuer.
Arrêt et avancement d'un pas
Comme lors d'une session de montage vidéo, le programme peut être exécuté lentement, avec la possibilité d'avance, de pause, d'arrêt, etc. C'est essentiel pour suivre le comportement du programme. Toutefois, vous ne pouvez pas revenir en arrière.
Pas en avant
Dans le
Le pas en avant n'exécute qu'une seule instruction du programme (celle où le programme a été interrompu) puis rend le contrôle au débogueur. Si l'instruction qui est exécutée appelle une ou plusieurs fonctions, le débogueur essaie de poursuivre son avancée d'un pas dans les fonctions (dans l'ordre où elles sont exécutées). Une fois l'instruction exécutée et la main rendue, vous pouvez étudier l'état de votre programme.
Si la
Avancer en sautant
Dans le
« Avancer en sautant » est similaire à « Pas en avant », mis à part le fait que le débogueur ne s'arrête pas à l'intérieur des fonctions appelées par l'instruction en cours d'exécution.
Si la
Avancer pour sortir
Dans le
« Avancer pour sortir » exécute la fonction en cours jusqu'à ce qu'elle retourne à la fonction d'appel.
Exécuter ou continuer
Dans le
Cette commande redémarre le programme et continue son exécution jusqu'à ce qu'un point d'arrêt soit atteint ou que le programme se termine.
Exécuter jusqu'au curseur
Dans le
Cette commande redémarre le programme et continue son exécution jusqu'à ce que la ligne ou l'adresse (si la fenêtre
Arrêt du programme
Dans le
Cela interrompt le programme et rend le contrôle au débogueur, vous permettant de réaliser diverses tâches de débogage, comme l'inspection de données ou l'ajout de points d'arrêts.
Examiner la pile.
Pile
Affichage de la liste des cadres de pile
Un cadre de pile est une zone de la pile associée à chaque appel de fonction. Il énumère toutes les fonctions et leurs arguments dans l'ordre où ils ont été appelés. Chaque cadre de pile est numéroté en partant de 0 pour la fonction actuelle. Vous ne pouvez afficher les cadres de pile que pendant l'exécution du débogueur.
Dans le
Chaque cadre de pile contient les informations suivantes :
On y trouve une flèche jaune qui représente le cadre de pile actif. Par défaut, c'est le cadre 0, la fonction actuelle. Toutes les évaluations et les variables locales sont relatives à ce cadre actif. Vous pouvez changer de cadre actif pour examiner les variables locales dans d'autres fonctions.
Cadre
C'est le numéro de cadre partant de 0 pour la fonction en cours. La première fonction d'un programme, par exemple
Nom du fichier contenant la fonction correspondant à ce cadre.
Numéro de ligne de la fonction correspondant à ce cadre.
Nom de la fonction correspondant à ce cadre.
Adresse de la fonction correspondant à ce cadre.
Les paramètres de la fonction.
Changement de cadre de pile actuel
Dans la fenêtre
Faites un clic droit et sélectionnez
Affichage de la fonction actuelle
Obtention d'une trace de la pile
Dans la fenêtre
Démarrer un programme avec le débogueur.
Débogage d'un programme
Lancement d'un programme dans le débogueur
Le programme actuel est défini dans la boîte de dialogue
Dans le
Un programme peut être difficile à déboguer s'il est hautement optimisé ou si les informations de débogage sont absentes. L'optimisation et les informations de débogage sont activées lors de l'étape de configuration. Normalement, une configuration de débogage est disponible, qui désactive l'optimisation et inclut toutes les informations de débogage. Anjuta affiche un avertissement si cette configuration n'est pas utilisée. Reportez-vous à
Débogage d'une application déjà en cours d'exécution
Vous pouvez utiliser le débogueur sur une application déjà en cours d'exécution.
Dans le
Sélectionnez un processus dans la boîte de dialogue
Débogage d'une application distante
Vous pouvez utiliser le débogueur pour déboguer une application exécutée sur un autre ordinateur à travers une connexion TCP (protocole de contrôle de transmission) ou une connexion série.
Dans le
Sélectionnez le type de connexion vers l'application distante,
S'il s'agit d'une connexion TCP/IP, remplissez les champs
S'il s'agit d'une connexion en ligne série, remplissez la boîte de texte en-dessous avec le nom du périphérique série, par exemple
Cliquez sur
Arrêt du débogueur
Le débogueur et le programme peuvent être arrêtés à tout moment de la façon suivante :
Dans le
Boîte de dialogue « Attacher au processus »
Boîte de dialogue « Attacher au processus »
La boîte de dialogue
Masquer les chemins
Si cette option est cochée, les chemins de commande sont masqués dans la liste des processus.
Masquer les paramètres du processus
Si cette option est cochée, les paramètres de la ligne de commande sont masqués dans la liste des processus.
Afficher l'arborescence des processus
Si cette option n'est pas cochée, les processus sont affichés sous forme de liste. Si elle est cochée, les processus sont affichés sous forme d'arborescence.
Examiner les variables locales.
Variables locales
Les variables locales du cadre courant (c.-à-d. la fonction actuellement sous contrôle du programme) sont affichées dans la fenêtre
Affichage de la liste des variables locales
Dans le
Toutes les variables locales sont affichées sous forme d'arborescence avec des enfants représentant les membres de la structure ou du tableau.
Le nom de la variable.
La valeur de la variable.
Le type de la variable.
Dans la fenêtre
Saisissez la nouvelle valeur.
Examiner les informations complémentaires du programme.
Informations diverses
Le débogueur peut vous donner des informations variées sur le programme pendant son exécution.
Affichage des bibliothèques partagées
Dans le
Cette commande ouvre une fenêtre qui donne la liste de toutes les bibliothèques partagées que le programme a chargé et leur emplacement en mémoire. Elle montre également si la table de symboles de chaque bibliothèque a été lue ou non.
Affichage des signaux
Dans le
Cette commande donne la liste de tous les signaux disponibles avec une courte description et trois colonnes pour définir ce qui est à faire quand un signal est reçu :
Arrête
Le débogueur arrête l'exécution du programme lorsque le programme reçoit ce signal.
Affiche
Le débogueur affiche le signal reçu.
Transmet
Le débogueur transmet le signal reçu au programme.
Le menu contextuel affiché lorsque vous cliquez avec le bouton droit de la souris n'a que des éléments inactifs car les fonctions correspondantes ne sont pas encore implémentées.
Évaluer les expressions et modifier les variables.
Examen des expressions
Inspection d'une expression et modification d'une variable
Lors du débogage d'un programme, le programme étant en pause, vous pouvez obtenir la valeur d'une expression ou d'une variable. Il est parfois utile de modifier la valeur d'une variable.
Dans le
Si l'expression est un nom de variable, vous pouvez modifier sa valeur en cliquant sur la colonne
Contrôler l'exécution d'un programme.
Contrôle de l'exécution
Examiner les données du programme.
Examen des données
Utiliser une commande personnalisée du débogueur.
Commande personnalisée
Vous pouvez envoyer une commande personnalisée au débogueur de la façon suivante :
Dans le
Saisissez votre commande.
La sortie de la commande est affichée dans la fenêtre de message utilisée par le débogueur.
Cette commande est envoyée directement au débogueur sans effectuer aucun contrôle. Par exemple, si vous définissez un point d'arrêt de cette façon, il n'apparaît pas dans la fenêtre
Examiner les informations du processeur.
Processeur
Affichage des registres du processeur
Dans le
Les registres dont la valeur a changé depuis le dernier arrêt sont en rouge. Il est possible de modifier la valeur de n'importe quel registre en le sélectionnant et en cliquant dans la colonne « Valeur » et en saisissant une nouvelle valeur.
Affichage de la mémoire
Dans le
La première colonne affiche les adresses mémoires en hexadécimal, la seconde octet par octet le contenu de la mémoire en hexadécimal et la dernière le même contenu en ASCII.
L'espace d'adressage d'un simple microprocesseur 32-bits est très grand (4 gigaoctets), il est donc très difficile de vous rendre à une adresse précise à l'aide de la barre de défilement. Mais, si vous cliquez avec le bouton droit de la souris pour afficher le menu contextuel et choisissez
Fenêtre « Désassemblage »
Dans le
La première colonne affiche les adresses en hexadécimal. Dans la seconde colonne, vous avez soit une étiquette affichée dès le début de la ligne et terminée par deux points, soit une instruction en langage d'assemblage indentée de 4 espaces.
La position dans la fenêtre de désassemblage est remplacée par la valeur du pointeur d'instruction quand le programme est arrêté.
Gèrer les points d'arrêt.
Points d'arrêt
Les points d'arrêt sont utilisés pour interrompre l'exécution du programme en un point particulier de façon à pouvoir examiner l'état du programme à cet endroit.
Affichage de la liste des points d'arrêt
Dans le
Cette fenêtre comporte les colonnes suivantes :
Emplacement
C'est la position du point d'arrêt dans le fichier source. Lorsqu'il a été défini à l'aide du débogueur, vous obtenez des informations supplémentaires comme le nom de la fonction contenant le point d'arrêt.
Ce champ indique l'adresse mémoire du point d'arrêt lorsqu'il a été défini à l'aide du débogueur.
Cette zone affiche toujours « point d'arrêt ». Elle sera utilisée dans une version future pour la prise en charge de différentes sortes de points d'arrêt.
Condition
C'est la condition du point d'arrêt. Ce champ reste vide si aucune condition n'a été définie.
Nombre de passages
Lorsque le débogueur n'est pas en fonctionnement, cette colonne indique le nombre de passages sur le point d'arrêt ou zéro si ce nombre n'est pas défini.
Lorsque le débogueur est en fonctionnement, si le nombre de passages est égal à zéro, cette colonne affiche le nombre de fois où ce point d'arrêt a été actif. Si le nombre de passages n'est pas égal à zéro, deux nombres sont affichés. Le nombre de passages est le deuxième nombre.
État
C'est l'état du point d'arrêt. Il peut être :
Suspendu :
le point d'arrêt n'est pas actif dans le programme.
Permanent :
le point d'arrêt est activé (son numéro d'identification est fourni entre parenthèses).
Temporaire :
le point d'arrêt est activé mais il sera supprimé s'il est atteint.
Au cours d'une session Anjuta, tous les points d'arrêt sont conservés même s'ils correspondent à un emplacement non-existant, par exemple dans le code source d'une bibliothèque partagée non encore chargée. Dans ce cas, leur état est défini à suspendu.
Paramétrage des points d'arrêt
Dans le
Remplissez le champ
Une autre solution est d'utiliser la fonction Basculer le point d'arrêt. S'il n'y pas de point d'arrêt à la ligne en cours, cette fonction en ajoute un. Sinon, elle l'enlève.
Dans le
Modification des points d'arrêt
Il n'est pas possible de modifier l'emplacement d'un point d'arrêt ; vous devez en créer un nouveau. Néanmoins, vous pouvez modifier la condition d'arrêt ou le nombre de passages. Pour modifier un point d'arrêt :
Sélectionnez un point d'arrêt dans la fenêtre
Faites un clic droit dans la fenêtre
Modifiez les champs
Suppression de points d'arrêt
Vous pouvez retirer un point d'arrêt en utilisant la fonction de bascule du point d'arrêt décrite plus haut. Mais si voulez retirer plusieurs points d'arrêt ou un point d'arrêt dans un fichier autre que celui que vous êtes en train de modifier, utilisez la fenêtre Point d'arrêt :
Faites un clic droit dans la fenêtre
Pour enlever tous les points d'arrêt :
Dans le
Activation ou désactivation de points d'arrêt
Il se peut que vous ayez besoin de désactiver temporairement un point d'arrêt au lieu de le retirer. Pour désactiver ou ré-activer un point d'arrêt :
Cochez l'option
Vous avez la possibilité de désactiver tous les points d'arrêt en utilisant :
Dans le
Utilisée pour créer ou modifier un point d'arrêt
Boîte de dialogue « Propriétés du point d'arrêt »
C'est la position du point d'arrêt. S'il s'agit d'un point d'arrêt existant, il est impossible de la modifier. Vous pouvez fixer un point d'arrêt à un certain numéro de ligne ou au début d'une fonction. Utilisez un des formats suivants :

nom_de_la_fonction

La condition d'arrêt est une expression qui doit retourner une valeur booléenne
Si ce champ est vide, la condition est toujours
Nombre de passages
Le débogueur peut sauter le point d'arrêt un certain nombre de fois avant de s'y arrêter. Si le nombre de passages n'est pas zéro, le débogueur devra sauter le point d'arrêt ce nombre de fois avant d'arrêter le programme.
Le nombre de passages a une priorité plus forte que la condition. C'est seulement quand le nombre de passages a été atteint que le débogueur évalue la condition, si elle est présente et interrompt l'exécution du programme.
Boîte de dialogue des préférences de construction autotools.
Boîte de dialogue des préférences Construire les « autotools ».
Cette boîte de dialogue vous permet de paramétrer les options globales pour la construction des fichiers.
Exécuter plusieurs commandes en même temps

Poursuivre malgré les erreurs
Par défaut,
Traduire les messages
Par défaut, les messages d'erreur et d'avertissement sont traduits. Cela a toutefois deux inconvénients. Pour reconnaître les erreurs et les avertissements, il faut que la traduction d'
Mettre en surbrillance des erreurs et des avertissements dans l'éditeur
Les erreurs et les avertissements survenant lors de la construction s'affichent normalement en surbrillance dans la fenêtre Messages. En cochant cette option, ils s'affichent également en surbrillance dans l'éditeur.
Installer en tant que root
L'installation d'un programme nécessite la copie de fichiers dans des répertoires systèmes pour lesquels l'utilisateur ne possède pas les droits d'écriture. Si cette option est cochée, vous pouvez utiliser
Greffon de construction autotools
Ce greffon vise les projets autotools, mais comme ils utilisent make, il sert aussi à d'autres sortes de projets utilisant make.
Utilisation de la commande make
Voici une liste des cibles utilisées par le greffon. Elles sont mises en œuvre dans tous les projets autotools, mais vous aurez à les mettre en œuvre vous-même si vous utilisez un makefile personnalisé.
nom_du_fichier_objet
make
Utilisée pour compiler un fichier source. Le nom du fichier objet est obtenu en remplaçant l'extension du fichier source par l'extension de l'objet correspondant.
make
Utilisée pour construire toutes les cibles dans un répertoire.
make install
Utilisée pour installer toutes les cibles dans un répertoire.
make clean
Utilisée pour supprimer tous les fichiers construits dans un répertoire.
make dist
Utilisée pour construire un paquet de distribution, n'est appelée que dans le répertoire du projet.
Étant donné que make est livré avec des règles par défaut qui lui permettent de compiler et de faire l'édition de lien d'un programme C sans avoir besoin d'un makefile, il est possible de compiler un programme C à partir d'un fichier source unique, sans makefile ni projet.
Installer des cibles ou un projet.
Installation de cibles
À moins que le projet ne soit très simple, il a besoin de certains fichiers de données tels que les fichiers de description de l'interface utilisateur. Ces fichiers sont habituellement copiés dans des répertoires standards où ils sont lus. Cela signifie que vous ne pouvez pas exécuter le programme dans le répertoire de construction. Vous devez installer le programme de façon à copier tous ces fichiers dans l'emplacement définitif, par exemple dans un sous-répertoire de
Il existe plusieurs façons d'installer des cibles ou un projet.
Dans le
Dans le
Dans le
Cliquez sur le bouton droit de la souris pour faire apparaître le
Dans le
Cliquez sur le bouton droit de la souris pour faire apparaître le
Si vous installez le programme dans un répertoire système, il vous faut certainement recourir au commande
Créer un paquet de distribution.
Création d'un paquet de distribution
La façon habituelle de distribuer un projet autotools est de recourir à une archive tar compressée contenant tous les fichiers sources. L'utilisateur doit la décompresser, puis compiler et installer le projet sur son système grâce à la séquence de commandes
Dans le
Configurer un projet autotools et gérer les configurations.
Configuration d'un projet
Avant de compiler et de construire des fichiers, un projet autotools doit être configuré. Cette étape est nécessaire pour paramétrer des options globales, s'assurer que toutes les bibliothèques et tous les programmes requis sont installés sur votre système et pour générer les scripts de construction appropriés.
Configuration du projet
Dans le
Conservez la configuration par défaut, sélectionnez une nouvelle configuration ou créez en une nouvelle. Vous pouvez examiner et modifier toutes les options de configuration. Reportez-vous à
Cliquez sur
La configuration peut échouer si certaines bibliothèques ou programmes ne sont pas installés ou n'ont pas la bonne version. Un message d'erreur vous dira ce qui manque.
Changement de configuration
Dans le
Si le projet n'a pas encore été configuré, il le sera automatiquement avant la construction du premier fichier.
Suppression d'une configuration
Cela ressemble à un nettoyage de projet, sauf que beaucoup plus de fichiers sont supprimés. Après cela, vous devrez configurer à nouveau le projet pour pouvoir le construire.
Dans le
Boîte de dialogue de configuration autotools
Boîte de dialogue de configuration autotools
La boîte de dialogue
Régénérer le projet
Si cette option est cochée, le projet sera complètement régénéré, sinon seule l'étape de configuration est effectuée.
Configuration
Il est possible d'avoir plusieurs configurations avec chacune ses propres options et son propre répertoire. Cette boîte de texte permet de les nommer. Habituellement, vous disposez déjà d'une configuration Par défaut, d'une configuration Débogage rendant plus facile le débogage (en conservant les variables intermédiaires et l'ordre du code), ainsi qu'une configuration Optimisé générant des programmes plus rapides mais accroissant le temps de construction. Vous pouvez aussi définir des configurations personnalisées supplémentaires.
Répertoire de construction
Sélectionnez ici le répertoire de construction ; cela peut être le répertoire du projet ou un sous-répertoire. C'est particulièrement utile en cas de passage d'une configuration à une autre pour éviter de reconstruire tout le projet.
Avec autotools, il n'est pas possible d'avoir une configuration utilisant un répertoire différent s'il existe déjà une configuration utilisant le répertoire du projet. Vous devez l'enlever d'abord.
Certains projets autotools ne peuvent pas être construits en dehors du répertoire projet. Vous pouvez encore vous servir de différentes configurations, mais elles doivent toutes utiliser le répertoire du projet et tout sera recompilé à chaque changement de configuration.
Options de configuration
Cette boîte de texte donne la liste de tous les paramètres de la ligne de commande utilisés lors de l'étape de configuration (configure). Les paramètres sont séparés par des espaces et doivent être mis entre guillemets anglais simple « ' » s'ils contiennent un espace. Chaque configuration complète cette boîte de texte avec des valeurs par défaut que vous pouvez modifier.
Chaque projet autotools prend en compte une liste commune de paramètres mais peut aussi comporter des paramètres spécifiques. La liste de tous les paramètres acceptés peut être obtenue en lançant
Compiler les fichiers.
Compilation de fichiers
La plupart des langages de programmation permettent de compiler un fichier source individuel. Cela consiste à lire le fichier, vérifier s'il y a des erreurs et le convertir en un fichier objet intermédiaire. La plupart des erreurs surviennent pendant ce traitement. Aussi est-il judicieux de compiler un fichier après l'avoir modifier. Il existe plusieurs façons de faire cela.
Dans le
Dans le
Cliquez sur le bouton droit de la souris pour faire apparaître le
Dans le
Cliquez sur le bouton droit de la souris pour faire apparaître le
Il n'est pas nécessaire d'enregistrer le fichier avant de compiler,
Supprimer les fichiers construits.
Nettoyage des cibles
Il peut être utile de supprimer tous les fichiers créés par le processus de construction. Par exemple, si toutes les dépendances ne sont pas satisfaites et qu'un fichier modifié ne déclenche pas une re-compilation comme il devrait, le fait de supprimer tous les fichiers règle le problème. Il y a plusieurs façons de faire cela :
Dans le
Dans le
Cliquez sur le bouton droit de la souris pour faire apparaître le
Cliquez sur le bouton droit de la souris pour faire apparaître le
Construire des cibles ou un projet.
Construction de cibles
Une cible est un fichier créé à partir de fichiers source. C'est typiquement un programme ou une bibliothèque, mais ce peut être aussi une documentation par exemple, si cette documentation doit être construite.
La commande « Construire » compile tous les fichiers nécessaires et éventuellement les lie à d'autres fichiers, comme des bibliothèques, de façon à créer la cible. Si certains fichiers sources ont déjà été compilés et n'ont pas été modifiés depuis, ils ne sont pas recompilés pour éviter une perte de temps. Il existe plusieurs façons de déclencher une construction.
Dans le
Dans le
Cliquez sur le bouton droit de la souris pour faire apparaître le
Cliquez sur le bouton droit de la souris pour faire apparaître le
Johannes Schmid
jhs@gnome.org
Prise en main de l'éditeur d'interface utilisateur
Démarrage de l'éditeur d'interface utilisateur
Création d'un nouveau fichier d'interface utilisateur
Ouverture d'un fichier d'interface utilisateur existant
Ajout de composants graphiques
Organisation des composants graphiques en conteneurs
Composants graphiques habituels et nature de leur utilisation
Ajout de propriétés aux composants graphiques
Connexion automatique de signaux
Ajout de signaux à l'éditeur de signaux
Création du gestionnaire de signal
C
Python
Vala
Parcours du code en utilisant le navigateur de symboles
Utilisation du navigateur de symboles
Navigation dans l'éditeur
Indentation automatique
Configuration de l'indentation automatique
Configuration manuelle
Modificateurs
Indentation de blocs de code
Utilisation de la référence des API
Consultation de la référence des API
Accès à la référence des API en utilisant des raccourcis dans l'éditeur
Complétion automatique et aide des appels
La complétion automatique ne fonctionne pas
Codage efficace avec l'aide des appels
@@image: 'figures/anjuta_logo.png'; md5=82636133d39ac4a688facd76954b8b29
Manuel de Anjuta DevStudio.
Anjuta
Anjuta DevStudio

Gestion du projet
Codage et parcours du code
Construction du projet
Débogage du programme
Éditeur d'interface utilisateur
Référence
Bruno Brouard <annoa\.b\@gmail\.com>, 2009-2011.
Gérard Baylard <gerard\.b\|\@\|bbox\.fr>, 2010.
Julien Hardelin <jhardlin\@orange\.fr>, 2011.
Alain Lojewski <allomervan\@gmail\.com>, 2011.