# language_name_wals:	French
# language_name_glotto:	French
# iso639_3:	fra
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/fr.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Manuel PHP
Précédent
Annexe G.
Mot réservés en PHP
Suivant

Introduite en 4.1.0.
Dans les versions plus anciennes, elle s 'appelait $HTTP_SERVER_VARS.




Cette variable est une 'superglobal', ou globale automatique.
Cela signifie qu'elle est simplement disponible dans tous les contextes d'exécution (fonctions ou méthodes).
Vous n'avez pas besoin de faire global $_SERVER; pour y accéder, comme vous le faisiez avec $HTTP_SERVER_VARS.
$HTTP_SERVER_VARS contient les mêmes informations, mais n 'est pas autoglobale.
Si la directive register_globals est active, alors ces variables seront aussi rendues directement accessible dans le contexte d 'exécution global.
C 'est à dire séparément des tableaux $_SERVER et $HTTP_SERVER_VARS.
Pour plus d 'informations sur la sécurité de cette configuration, voyez le chapitre Utiliser la directive Register Globals.
Ces variables globales individuelles ne sont pas des globales.


Le nom du fichier du script en cour d 'éxécution, par rapport au document root.
Par exemple, $_SERVER[ 'PHP_SELF'] dans le script situé à l 'adresse http: / /www.monsite.com / test.php / foo.bar sera / test.php / foo.bar.
Si PHP fonctionne en ligne de commande, cette variable n 'est pas disponible.
Tableau des arguments passées au script.
Lorsque le script est appelé en ligne de commande, cela donne accès aux arguments, comme en langage C.
Lorsque le script est appelé avec la méthode GET, ce tableau contiendra la chaîne de requête.
Contient le nombre de paramètres de la ligne de commande passés au script (si le script fonctionne en ligne de commande).
Numéro de révision de l'interface CGI du serveur: i.e. 'CGI / 1.1'.
Le nom du serveur hôte qui éxécute le script suivant.
Si le script est exécuté sur un hôte virtuel, ce sera la valeur définie pour cet hôte virtuel.
Chaîne d 'identification du serveur, qui est donnée dans les en-têtes lors de la réponse aux requêtes.
Nom et révision du protocole de communication: i.e. 'HTTP / 1.0';
Méthode de requête utilisée pour accéder à la page; i.e. 'GET', 'HEAD', 'POST', 'PUT'.
La chaîne de requête, si elle existe, qui est utilisée pour accéder à la page.
La racine sous laquelle le script courant est exécuté, comme défini dans la configuration du serveur.
Contenu de l'en-tête Accept: de la requête courante, s 'il y en a une.
Contenu de l'en-tête Accept-Charset: de la requête courante, s 'elle existe.
Par exemple: 'iso-8859-1,*,utf-8'.
Contenu de l 'en-tête Accept-Encoding: de la requête courante, si elle existe.
Par exemple: 'gzip'.
Contenu de l 'en-tête Accept-Language: de la requête courante, si elle existe.
Par exemple: 'fr'.
Contenu de l 'en-tête Connection: de la requête courante, si elle existe.
Par exemple: 'Keep-Alive'.
Contenu de l 'en-tête Host: de la requête courante, si elle existe.
L'adresse de la page (si elle existe) qui a conduit le client à la page courante.
Cette valeur est affectée par le client, et tous les clients ne le font pas.
Certains navigateur permettent même de modifier la valeur de HTTP_REFERER, sous forme de fonctionnalité.
En bref, ce n 'est pas une valeur de confiance.
Contenu de l 'en-tête User_Agent: de la requête courante, si elle existe.
C 'est une chaîne qui décrit le client HTML utilisé pour voir la page courante.
Par exemple:

Entre autres choses, vous pouvez utiliser cette valeur avec get_browser() pour optimiser votre page en fonction des capacités du client.
L 'adresse IP du client qui demande la page courante.
Le port utilisé par la machine cliente pour communiquer avec le serveur web.
Le chemin absolu jusqu 'au script courant.
La valeur donnée à la directive SERVER_ADMIN (pour Apache), dans le fichier de configuration.
Si le script est exécuté par un hôte virtuel, ce sera la valeur définie par l 'hôte virtuel.
Le port de la machine serveur utilisé pour les communications.
Par défaut, c'est '80 '.
En utilisant SSL, par exemple, il sera remplacé par le numéro de port HTTP sécurisé.
Chaîne contenant le numéro de version du serveur et le nom d 'hôte virtuel, qui sont ajoutés aux pages générées par le serveur, si cette option est activée.
Chemin dans le système de fichier (pas le document root -) jusqu 'au script courant, une fois que le serveur a fait une chemin traduction virtuel - réel.
Contient le nom du script courant.
Cela sert lorsque les pages doivent s 'appeler elles-mêmes.
L 'URI qui a été fourni pour accéder à cette page.
Par exemple: '/ index.html'.

Introduite en 4.1.0.
Dans les versions plus anciennes, elle s 'appelait $HTTP_ENV_VARS.
Cette variable est importée dans l'espace de nom global de PHP, depuis l'environnement dans lequel l 'exécutable PHP fonctionne.
De nombreuses valeur sont fournies par le shell qui exécute PHP, et différents systèmes pouvant disposer de différents shell, même un début de liste serait ici impossible.
Reportez vous à la documentation de votre shell pour connaître une liste de variables prédéfinies.
Les autres variables d 'environnement incluent les variables CGI, placées ici, indépendemment du fait que PHP fonctionne en tant que CGI ou bien que module du serveur.
Cette variable est une 'superglobal', ou globale automatique.
Cela signifie qu'elle est simplement disponible dans tous les contextes d'exécution (fonctions ou méthodes).
Vous n'avez pas besoin de faire global $_ENV; pour y accéder, comme vous le faisiez avec $HTTP_ENV_VARS.
$HTTP_ENV_VARS contient les mêmes informations, mais n 'est pas autoglobale.
Si la directive register_globals est active, alors ces variables seront aussi rendues directement accessible dans le contexte d 'exécution global.
C 'est à dire séparément des tableaux $_ENV et $HTTP_ENV_VARS.
Pour plus d 'informations sur la sécurité de cette configuration, voyez le chapitre Utiliser la directive Register Globals.
Ces variables globales individuelles ne sont pas des globales.

Introduite en 4.1.0.
Dans les versions plus anciennes, elle s 'appelait $HTTP_COOKIE_VARS.
Un tableau associatif des valeurs passées au script courant via les cookies HTTP.
Elle est automatiquement global dans tous les contextes d 'exécution.
Cette variable est une 'superglobal', ou globale automatique.
Cela signifie qu'elle est simplement disponible dans tous les contextes d'exécution (fonctions ou méthodes).
Vous n'avez pas besoin de faire global $_COOKIE; pour y accéder, comme vous le faisiez avec $HTTP_COOKIE_VARS.
$HTTP_COOKIE_VARS contient les mêmes informations, mais n 'est pas autoglobale.
Si la directive register_globals est active, alors ces variables seront aussi rendues directement accessible dans le contexte d 'exécution global.
C 'est à dire séparément des tableaux $_COOKIE et $HTTP_COOKIE_VARS.
Pour plus d 'informations sur la sécurité de cette configuration, voyez le chapitre Utiliser la directive Register Globals.
Ces variables globales individuelles ne sont pas des globales.

Introduite en 4.1.0.
Dans les versions plus anciennes, elle s 'appelait $HTTP_GET_VARS.
Un tableau associatif des valeurs passées au script courant via le protocole HTTP et la méthode GET.
Elle est automatiquement globale dans tous les contextes d 'exécution.
Cette variable est une 'superglobal', ou globale automatique.
Cela signifie qu'elle est simplement disponible dans tous les contextes d'exécution (fonctions ou méthodes).
Vous n'avez pas besoin de faire global $_GET; pour y accéder, comme vous le faisiez avec $HTTP_GET_VARS.
$HTTP_GET_VARS contient les mêmes informations, mais n 'est pas autoglobale.
Si la directive register_globals est active, alors ces variables seront aussi rendues directement accessible dans le contexte d 'exécution global.
C 'est à dire séparément des tableaux $_GET et $HTTP_GET_VARS.
Pour plus d 'informations sur la sécurité de cette configuration, voyez le chapitre Utiliser la directive Register Globals.
Ces variables globales individuelles ne sont pas des globales.

Introduite en 4.1.0.
Dans les versions plus anciennes, elle s 'appelait $HTTP_POST_VARS.
Un tableau associatif des valeurs passées au script courant via le protocole HTTP et la méthode POST.
Elle est automatiquement globale dans tous les contextes d 'exécution.
Cette variable est une 'superglobal', ou globale automatique.
Cela signifie qu'elle est simplement disponible dans tous les contextes d'exécution (fonctions ou méthodes).
Vous n'avez pas besoin de faire global $_POST; pour y accéder, comme vous le faisiez avec $HTTP_POST_VARS.
$HTTP_POST_VARS contient les mêmes informations, mais n 'est pas autoglobale.
Si la directive register_globals est active, alors ces variables seront aussi rendues directement accessible dans le contexte d 'exécution global.
C 'est à dire séparément des tableaux $_POST et $HTTP_POST_VARS.
Pour plus d 'informations sur la sécurité de cette configuration, voyez le chapitre Utiliser la directive Register Globals.
Ces variables globales individuelles ne sont pas des globales.

Introduite en 4.1.0.
Dans les versions plus anciennes, elle s 'appelait $HTTP_POST_FILES.
Un tableau associatif des valeurs téléchargées au script courant via le protocole HTTP et la méthode POST.
Elle est automatiquement globale dans tous les contextes d 'exécution.
Cette variable est une 'superglobal', ou globale automatique.
Cela signifie qu'elle est simplement disponible dans tous les contextes d'exécution (fonctions ou méthodes).
Vous n'avez pas besoin de faire global $_FILES; pour y accéder, comme vous le faisiez avec $HTTP_POST_FILES.
$HTTP_POST_FILES contient les mêmes informations, mais n 'est pas autoglobale.
Si la directive register_globals est active, alors ces variables seront aussi rendues directement accessible dans le contexte d 'exécution global.
C 'est à dire séparément des tableaux $_FILES et $HTTP_POST_FILES.
Pour plus d 'informations sur la sécurité de cette configuration, voyez le chapitre Utiliser la directive Register Globals.
Ces variables globales individuelles ne sont pas des globales.

Introduite en 4.1.0.
Dans les versions plus anciennes, elle n'avait pas d 'équivalent.
Un tableau associatif constitué du contenu des variables $_GET, $_POST, $_COOKIE, et $_FILES.
Cette variable est une 'superglobal', ou globale automatique.
Cela signifie qu'elle est simplement disponible dans tous les contextes d'exécution (fonctions ou méthodes).
Vous n'avez pas besoin de faire global $_REQUEST; pour y accéder.
Si la directive register_globals est active, alors ces variables seront aussi rendues directement accessible dans le contexte d 'exécution global.
C 'est à dire séparément des tableaux $_REQUEST.
Pour plus d 'informations sur la sécurité de cette configuration, voyez le chapitre Utiliser la directive Register Globals.
Ces variables globales individuelles ne sont pas des globales.

Introduite en 4.1.0.
Dans les versions plus anciennes, elle s 'appelait $HTTP_SESSION_VARS.
Un tableau associatif des valeurs stockées dans les sessions, et accessible au script courant.
Elle est automatiquement globale dans tous les contextes d 'exécution.
Voyez l 'extension Sessions pour plus de détails sur comment est utilisée cette variable.
Cette variable est une 'superglobal', ou globale automatique.
Cela signifie qu'elle est simplement disponible dans tous les contextes d'exécution (fonctions ou méthodes).
Vous n'avez pas besoin de faire global $_SESSION; pour y accéder, comme vous le faisiez avec $HTTP_SESSION_VARS.
$HTTP_SESSION_VARS contient les mêmes informations, mais n 'est pas autoglobale.
Si la directive register_globals est active, alors ces variables seront aussi rendues directement accessible dans le contexte d 'exécution global.
C 'est à dire séparément des tableaux $_SESSION et $HTTP_SESSION_VARS.
Pour plus d 'informations sur la sécurité de cette configuration, voyez le chapitre Utiliser la directive Register Globals.
Ces variables globales individuelles ne sont pas des globales.
Un tableau associatif contenant les références sur toutes les variables globales actuellement définies dans le contexte d 'exécution global du script.
Les noms des variables sont les index du tableau.
Cette variable est une 'superglobal', ou globale automatique.
Cela signifie qu'elle est simplement disponible dans tous les contextes d'exécution (fonctions ou méthodes).
Vous n'avez pas besoin de faire global $GLOBALS; pour y accéder.
$php_errormsg est une variable qui contient le texte de la dernière erreur générée par PHP.
Cette variable sera uniquement accessible dans le même contexte d'exécution que celui de la ligne qui a généré l'erreur, et uniquement si la directive de configuration track_errors est activée (elle est désactivée par défaut).
Précédent
Sommaire
Suivant
Mot réservés en PHP
Niveau supérieur
Classes prédéfinies