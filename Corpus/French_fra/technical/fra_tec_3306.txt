# language_name_wals:	French
# language_name_glotto:	French
# ISO_6393:	fra
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/fr.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Manuel PHP
Précédent
Suivant

htmlentities est identique à la fonction htmlspecialchars(), sauf que tous les caractères qui ont des équivalents en entités HTML sont effectivement traduits.
Comme htmlspecialchars(), cette fonction prend un deuxième argument optionnel, qui indique comment doivent être traité les guillemets doubles et simples.
Vous pouvez utiliser l 'une des constantes suivantes:
ENT_COMPAT, la constante par défaut, va convertir les guillemets doubles, et ignorer les guillemets simples; ENT_QUOTES va convertir les guillemets doubles et les guillemets simples; ENT_NOQUOTES va ignorer les guillemets doubles et les guillemets simples.
Actuellement, le jeu de caractères ISO-8859-1 est utilisé par défaut.
Le support pour le second argument optionnel a été ajouté en PHP 3.0.17 et PHP 4.0.3.
Comme htmlspecialchars(), cette fonction prend un troisième argument optionnel qui définit le jeux de caractères utilisé durant la conversion.
Le support de cet argumetn a été ajouté en PHP 4.1.0.
Il n 'y a pas de fonction inverse de cette fonction.
Toutes fois, vous pouvez en créer une facilement.
Voici comment faire:
Exemple 1.
Inverse de htmlentities()
?php function unhtmlentities ($string) {$trans_tbl = get_html_translation_table (HTML_ENTITIES); $trans_tbl = array_flip ($trans_tbl); return strtr ($string, $trans_tbl);}?
Voir aussi htmlspecialchars() et nl2br().
Précédent
Sommaire
Suivant

Niveau supérieur
