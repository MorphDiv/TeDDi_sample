# language_name_wals:	French
# language_name_glotto:	French
# ISO_6393:	fra
# year_composed:	NA
# year_published:	2014
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	GNOME
# source:	https://object.pouta.csc.fi/OPUS-GNOME/v1/raw/fr.zip
# copyright_short:	http://opus.nlpl.eu/GNOME.php
# copyright_long:	http://opus.nlpl.eu/GNOME.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Bruno Brouard <annoa\.b\@gmail\.com>, 2009-2012
Gérard Baylard <gerard\.b\|\@\|bbox\.fr>, 2010
Julien Hardelin <jhardlin\@orange\.fr>, 2011
Alain Lojewski <allomervan\@gmail\.com>, 2011, 2012
Mickael Albertus <mickael\.albertus\@gmail\.com>, 2012_
external ref='figures/anjuta_logo.png' md5='82636133d39ac4a688facd76954b8b29'
Manuel de Anjuta DevStudio.link
Anjutatext
Anjuta DevStudio
Johannes Schmid

Gestion du projet
Codage et parcours du code
Construction du projet
Débogage du programme
Éditeur d'interface utilisateur
Référence
Configurer et utiliser les fonctions de l'éditeur intégré
Complétion automatique et aide des appels
Complétion automatique
La complétion automatique suggère des fonctions et d'autres symboles du code dès le début de la frappe en essayant de faire correspondre les premiers caractères tapés avec les symboles existants. Un menu déroulant apparaît dans lequel vous pouvez sélectionner une correspondance en appuyant sur la touche
Anjuta gère la complétion automatique pour le code écrit en C/C++, Vala, Javascript et Python. Notez que la complétion automatique ne fonctionne que si Anjuta connaît les symboles utilisés. Si vous vous servez de bibliothèques C/C++ qui ne sont pas configurées avec
En outre, une partie de la syntaxe risque d'être trop complexe pour l'analyseur intégré et il est possible qu'il n'arrive pas à détecter la complétion requise.
Codage efficace avec l'aide des appels
Comme il est très difficile de se souvenir de la signature de toutes les méthodes ou fonctions utilisées dans un projet, l'éditeur affiche une infobulle chaque fois que vous saisissez une parenthèse « ( » après un nom de fonction, et vous affiche la signature d'appel.
Rechercher rapidement de l'information dans la documentation API
Utilisation de la référence des API
Consultation de la référence des API
Afin d'accéder rapidement à la références des API des bibliothèques, anjuta comporte un navigateur d'API intégré. Si ce n'est pas déjà fait, vous pouvez l'activer dans les préférences (
La référence des API possède deux fenêtres, l'une pour rechercher un symbole particulier et l'autre, le navigateur, pour afficher la documentation d'aide.
Accès à la référence des API en utilisant des raccourcis dans l'éditeur
Si vous n'êtes pas certain de la façon dont une fonction particulière du code existant fonctionne, placez simplement le curseur sur le nom de la fonction et saisissez
Configurer et utiliser l'indentation automatique pour obtenir un style de code cohérent
Indentation automatique
Configuration et utilisation de l'indentation automatique
Configuration manuelle
L'indentation automatique est configurée dans les préférences (
Le grand inconvénient de configurer l'indentation manuellement est que les différents programmeurs travaillant sur un projet doivent utiliser le même paramétrage, sinon cela aboutira à des styles différents au sein d'un même fichier. Pour une meilleure solution, reportez-vous à la section suivante.
À moins que ce ne soit explicitement indiqué dans les préférences, les réglages d'indentation trouvés dans les modificateurs d'un fichier sont utilisés à la place des réglages configurés de façon à conserver la compatibilité du fichier.
Modificateurs
Les modificateurs aident les éditeurs de fichiers à détecter automatiquement le mode d'indentation utilisé pour un fichier particulier. Ils sont très utiles quand plusieurs programmeurs travaillent sur un même projet avec des environnements différents.
Anjuta prend en charge les modificateurs des deux formats utilisés par
Indentation de blocs de code
Normalement, les nouvelles lignes sont indentées correctement de façon automatique, mais vous pouvez indenter les lignes existantes ou le code sélectionné grâce à l'élément de menu
Méthodes efficaces de navigation dans le code source
Parcours du code en utilisant le navigateur de symboles
Utilisation du navigateur de symboles
Le navigateur de symboles vous permet d'obtenir un aperçu des symboles utilisés dans votre projet. Ici, les symboles se rapportent à des variables, des fonctions/méthodes et des classes et leur définition exacte dépend du langage de programmation utilisé.
Le navigateur de symboles comporte trois onglets :



Un double clic sur un symbole permet de se rendre là où celui-ci est défini dans l'éditeur.
Navigation dans l'éditeur
Dans le menu surgissant


Vous pouvez revenir à votre position de départ avant le
Connexion automatique de signaux
Ajout de signaux à l'éditeur de signaux
Création du gestionnaire de signal
C
Python
Vala
Prise en main de l'éditeur d'interface utilisateur
Démarrage de l'éditeur d'interface utilisateur
Création d'un nouveau fichier d'interface utilisateur
Ouverture d'un fichier d'interface utilisateur existant
Ajout de composants graphiques
Organisation des composants graphiques en conteneurs
Composants graphiques habituels et nature de leur utilisation
Ajout de propriétés aux composants graphiques
Écriture de code pour les composants graphiques
Introduction
Dans un programme d'interface utilisateur, certains composants graphiques ne sont importants que pour créer des événements (comme des boutons statiques) alors que d'autres sont nécessaires pour obtenir ou afficher des données à l'utilisateur (comme un champ de saisie). Dans ce dernier cas, il faut générer du code afin que ces composants graphiques puissent être accessibles au moment de l'exécution. Avec le greffon « glade »,
Écriture automatique
Il y a certaines conditions à respecter pour écrire automatiquement le code d'un composant graphique : le greffon « glade » doit être activé et le fichier source qui contiendra le code doit être ouvert. Pour être certain que le greffon glade est lancé, ouvrez simplement le fichier
Dès que le greffon glade est lancé et que le fichier de destination du code est ouvert, faites seulement un double clic sur un composant graphique de l'inspecteur glade. Le fichier ouvert est alors analysé pour rechercher des lignes de commentaires (/* ANJUTA: Widgets declaration for application.ui - DO NOT REMOVE */ et /* ANJUTA: Widgets initialization for application.ui - DO NOT REMOVE */) et, si la recherche est positive, le code est ajouté juste après ces commentaires. Donc, pour que cette fonction se déroule correctement, il est important de ne pas modifier ces lignes de commentaires.
Moteur de gestion de projet autotools.
Sébastien Granjoux
Philip Chimento
Greffon moteur de gestion de projet GNU Autotools
Il est le format de projet le plus répandu sous Linux. Il a été prévu pour distribuer des paquets de code source pour un vaste éventail de systèmes basés sur Unix. S'il vous est arrivé d'installer un programme avec
Il est typiquement un peu plus compliqué d'utilisation en tant que développeur. Cependant, c'est le moteur par défaut dans
Les fichiers autotools donnent plus d'informations qu'un makefile, mais le moteur ne prend pas en charge toutes les astuces possibles. Si vous trouvez un projet qui ne peut pas être lu correctement, merci d'envoyer un
Modifier les propriétés du dossier autotools.
Modification d'un dossier autotools
Ces propriétés vous permettent d'attribuer des propriétés communes à toutes les cibles appartenant à ce dossier.

Les drapeaux à transmettre au compilateur C si une valeur individuelle n'est pas définie pour les cibles.

Ces drapeaux sont transmis à chaque compilation faisant appel au pré-processeur C. Cette valeur est ignorée si ces drapeaux sont déjà définis pour la cible.

Les drapeaux à transmettre au compilateur C++ si une valeur individuelle n'est pas définie pour les cibles.

Les drapeaux à transmettre au compilateur Fortran 9x si une valeur individuelle n'est pas définie pour les cibles.

Ceci définit les répertoires d'installation. C'est nécessaire si vous souhaitez installer les fichiers dans des dossiers personnalisés.

Les drapeaux à transmettre au compilateur Java si une valeur individuelle n'est pas définie pour les cibles.

Les drapeaux à transmettre au générateur de scanner Lex ou Flex si une valeur individuelle n'est pas définie pour les cibles.

Les drapeaux à transmettre à l'éditeur de liens si une valeur individuelle n'est pas définie pour les cibles.

Les drapeaux à transmettre au compilateur Objective C si une valeur individuelle n'est pas définie pour les cibles.

Les drapeaux à transmettre au compilateur Vala si une valeur individuelle n'est pas définie pour les cibles.

Les drapeaux à transmettre aux générateurs d'analyses Bison ou Yacc si une valeur individuelle n'est pas définie pour les cibles.
Modifier les propriétés du projet autotools.
Modification des propriétés du projet Autotools
Voici les propriétés de l'élément racine.

Le nom de votre projet. Il peut contenir des espaces.

C'est la version du projet.

C'est un URL permettant de soumettre un rapport d'anomalie, par exemple une adresse électronique ou un lien vers un outil de suivi de bogues. Il est facultatif.

C'est le nom de la distribution, il ne doit pas contenir d'espace. Il est facultatif.

Ceci est la page d'accueil du projet. Elle est facultative.
De plus, l'élément racine se comporte comme un dossier et en possède toutes les propriétés. Consultez la liste
Modifier les propriétés de la cible autotools.
Modification d'une cible Autotools
Voici une liste de toutes les propriétés de cible utilisées dans le projet autotools. Certaines ne sont pas disponibles pour toutes les cibles.

Si cochée, cette cible n'est pas installée et doit être construite seulement au moment des vérifications.
Les drapeaux à transmettre au compilateur C pendant la construction des fichiers source de la cible. Cette valeur outrepasse celle éventuellement définie dans le dossier parent.
Ces drapeaux sont transmis à chaque compilation faisant appel au pré-processeur C. Cette valeur outrepasse celle éventuellement définie dans le dossier parent.
Les drapeaux à transmettre au compilateur C++ pendant la construction des fichiers source de la cible. Cette valeur outrepasse celle éventuellement définie dans le dossier parent.

Si cochée, cette cible n'est pas installée. Elle ne peut servir qu'aux développeurs comme utilitaire pour construire d'autres cibles ou programmes.

Si coché, ne pas ajouter le préfixe à la page du manuel et à l'exécutable. Ce type de préfixe est utilisé pour fournir une alternative aux outils système.
Les drapeaux à transmettre au compilateur Fortran 9x pendant la construction des fichiers source de la cible. Cette valeur outrepasse celle éventuellement définie dans le dossier parent.

Si coché, inclut la cible dans le paquet de la distribution.

Cela définit l'emplacement où la cible est installée. Ce n'est pas directement le dossier où les fichiers sont installés, mais le nom de l'une des variables standard de dossier (bindir, sbindir, libdir, libexecdir, datadir, pkgdatadir, pkglibexecdir, includedir, mandir, infodir, docdir) ou une variable personnalisée définie dans les propriétés du dossier.
Les drapeaux à transmettre au compilateur Java pendant la construction des fichiers source de la cible. Cette valeur outrepasse celle éventuellement définie dans le dossier parent.

Si coché, préserve la hiérarchie du dossier du projet pendant l'installation des fichiers.
Les drapeaux à transmettre au générateur d'analyse Lex ou Flex pendant la création des fichiers source de la cible. Cette valeur outrepasse celle éventuellement définie dans le dossier parent.

Définit les bibliothèques supplémentaires utilisées par la cible. Ceci est utile pour ajouter des bibliothèques hors paquet. Consultez la page
Les drapeaux à transmettre à l'éditeur de liens pendant la liaison de la cible. Cette valeur outrepasse celle éventuellement définie dans le dossier parent.

Définit la section du manuel où ajouter la page man. Les caractères valides pour le nom de la section sont les chiffres « 0 » à « 9 » et les lettres « l » et « n ».
Les drapeaux à transmettre au compilateur Objective C pendant la compilation des fichiers source de la cible. Cette valeur outrepasse celle éventuellement définie dans le dossier parent.
Les drapeaux à transmettre au compilateur Vala pendant la compilation des fichiers source de la cible. Cette valeur outrepasse celle éventuellement définie dans le dossier parent.
Les drapeaux à transmettre aux générateurs d'analyse Bison ou Yacc pendant la création des fichiers source de la cible. Cette valeur outrepasse celle éventuellement définie dans le dossier parent.
Type de cible autotools.
Type de projet autotools
Il y a plusieurs types différents de cibles disponibles.
Bibliothèque partagée (Libtool)
Elle représente une bibliothèque partagée par plusieurs programmes qui est connectée au moment de l'exécution. C'est la plus répandue des bibliothèques sous Linux. Sous Windows, elle se nomme « bibliothèque de liaison dynamique ».
Elle utilise le paquet « Libtool ». Son nom doit commencer par « lib » et se termine par l'extension « .la ».
Module (Libtool)
Il représente une bibliothèque souvent appelée « greffon » qui est connectée au moment de l'exécution explicitement par le programme lui-même. Il sert seulement à charger le code correspondant aux fonctions utilisées.
Il utilise le paquet « Libtool ». Son nom ne nécessite pas l'usage du préfixe « lib » mais doit comporter l'extension « .la ».
Bibliothèque statique (Libtool)
Elle représente une bibliothèque connectée au programme au moment de la compilation. Seules les fonctions utilisées sont inclues dans l'exécutable généré.
Elle utilise le paquet « Libtool ». Son nom doit commencer par « lib » et comporte l'extension « .la ».
Programme
Elle représente le programme compilé, par exemple à partir des fichiers sources C. Tous les enfants représentent les fichiers source compilés pour générer le programme.
Module Python
Il représente un programme écrit en Python.
Module Java
Il représente un programme écrit en Java.
Module LISP
Il représente un programme écrit en LISP.
Fichiers en-tête
Cette cible vous permet de regrouper les fichiers en-tête et définir où ils doivent être installés.
Documentation Man
Elle regroupe les pages man nécessaires au projet.
Documentation informative
Elle regroupe les pages d'informations nécessaires au projet.
Données diverses
Elle regroupe les fichiers de données nécessaires au projet, comme les images, la description de l'interface utilisateur, les fichiers de configuration...
Script
Elle représente des programmes qui sont des scripts. Ils sont uniquement placés dans le dossier spécifié. Si des scripts doivent être créés, des règles supplémentaires sont nécessaires.
Construire des cibles ou un projet.
Construction de cibles
Une cible est un fichier créé à partir de fichiers source. C'est typiquement un programme ou une bibliothèque, mais ce peut être aussi une documentation par exemple, si cette documentation doit être construite.
La commande « Construire » compile tous les fichiers nécessaires et éventuellement les lie à d'autres fichiers, comme des bibliothèques, de façon à créer la cible. Si certains fichiers sources ont déjà été compilés et n'ont pas été modifiés depuis, ils ne sont pas recompilés pour éviter une perte de temps. Il existe plusieurs façons de déclencher une construction.
Dans le
Dans le
Dans le
Cliquez sur le bouton droit de la souris pour faire apparaître le
Dans le
Cliquez sur le bouton droit de la souris pour faire apparaître le
Supprimer les fichiers construits.
Nettoyage des cibles
Il peut être utile de supprimer tous les fichiers créés par le processus de construction. Par exemple, si toutes les dépendances ne sont pas satisfaites et qu'un fichier modifié ne déclenche pas une re-compilation comme il devrait, le fait de supprimer tous les fichiers règle le problème. Il y a plusieurs façons de faire cela :
Dans le
Dans le
Cliquez sur le bouton droit de la souris pour faire apparaître le
Cliquez sur le bouton droit de la souris pour faire apparaître le
Compiler les fichiers.
Compilation de fichiers
La plupart des langages de programmation permettent de compiler un fichier source individuel. Cela consiste à lire le fichier, vérifier s'il y a des erreurs et le convertir en un fichier objet intermédiaire. La plupart des erreurs surviennent pendant ce traitement. Aussi est-il judicieux de compiler un fichier après l'avoir modifié. Il existe plusieurs façons de faire cela.
Dans le
Dans le
Cliquez sur le bouton droit de la souris pour faire apparaître le
Dans le
Cliquez sur le bouton droit de la souris pour faire apparaître le
Il n'est pas nécessaire d'enregistrer le fichier avant de compiler,
Boîte de dialogue de configuration autotools
Boîte de dialogue de configuration autotools
La boîte de dialogue

Si cette option est cochée, le projet sera complètement régénéré, sinon seule l'étape de configuration est effectuée.

Il est possible d'avoir plusieurs configurations avec chacune ses propres options et son propre répertoire. Cette boîte de dialogue permet de les nommer. Habituellement, vous disposez déjà d'une configuration Par défaut, d'une configuration Débogage rendant plus facile le débogage (en conservant les variables intermédiaires et l'ordre du code), ainsi qu'une configuration Optimisé générant des programmes plus rapides mais accroissant le temps de construction. Vous pouvez aussi définir des configurations personnalisées supplémentaires.

Sélectionnez ici le répertoire de construction ; cela peut être le répertoire du projet ou un sous-répertoire. C'est particulièrement utile en cas de passage d'une configuration à une autre pour éviter de reconstruire tout le projet.
Avec autotools, il n'est pas possible d'avoir une configuration utilisant un répertoire différent s'il existe déjà une configuration utilisant le répertoire du projet. Vous devez l'enlever d'abord.
Certains projets autotools ne peuvent pas être construits en dehors du répertoire projet. Vous pouvez encore vous servir de différentes configurations, mais elles doivent toutes utiliser le répertoire du projet et tout sera recompilé à chaque changement de configuration.

Cette boîte de texte donne la liste de tous les paramètres de la ligne de commande utilisés lors de l'étape de configuration (configure). Les paramètres sont séparés par des espaces et doivent être mis entre guillemets anglais simple « ' » s'ils contiennent un espace. Chaque configuration complète cette boîte de texte avec des valeurs par défaut que vous pouvez modifier.
Chaque projet autotools prend en compte une liste commune de paramètres mais peut aussi comporter des paramètres spécifiques. La liste de tous les paramètres acceptés peut être obtenue en lançant
Configurer un projet autotools et gérer les configurations.
Configuration d'un projet
Avant de compiler et de construire des fichiers, un projet autotools doit être configuré. Cette étape est nécessaire pour paramétrer des options globales, s'assurer que toutes les bibliothèques et tous les programmes requis sont installés sur votre système et pour générer les scripts de construction appropriés.
Configuration du projet
Dans le
Conserver la configuration par défaut, sélectionner une nouvelle configuration ou en créer une nouvelle. Vous pouvez examiner et modifier toutes les options de configuration. Reportez-vous à
Cliquez sur
La configuration peut échouer si certaines bibliothèques ou programmes ne sont pas installés ou n'ont pas la bonne version. Un message d'erreur vous dira ce qui manque.
Changement de configuration
Dans le
Si le projet n'a pas encore été configuré, il le sera automatiquement avant la construction du premier fichier.
Suppression d'une configuration
Cela ressemble à un nettoyage de projet, sauf que beaucoup plus de fichiers sont supprimés. Après cela, vous devrez configurer à nouveau le projet pour pouvoir le construire.
Dans le
Créer un paquet de distribution.
Création d'un paquet de distribution
La façon habituelle de distribuer un projet autotools est de recourir à une archive tar compressée contenant tous les fichiers sources. L'utilisateur doit la décompresser, puis compiler et installer le projet sur son système grâce à la séquence de commandes
Dans le
Installer des cibles ou un projet.
Installation de cibles
À moins que le projet ne soit très simple, il a besoin de certains fichiers de données tels que les fichiers de description de l'interface utilisateur. Ces fichiers sont habituellement copiés dans des répertoires standards où ils sont lus. Cela signifie que vous ne pouvez pas exécuter le programme dans le répertoire de construction. Vous devez installer le programme de façon à copier tous ces fichiers dans l'emplacement définitif, par exemple dans un sous-répertoire de
Il existe plusieurs façons d'installer des cibles ou un projet.
Dans le
Dans le
Cliquez sur le bouton droit de la souris pour faire apparaître le
Cliquez sur le bouton droit de la souris pour faire apparaître le
Si vous installez le programme dans un répertoire système, il vous faut certainement recourir au commande
Greffon de construction autotools
Ce greffon vise les projets autotools, mais comme ils utilisent make, il sert aussi à d'autres sortes de projets utilisant make.
Utilisation de la commande make
Voici une liste des cibles utilisées par le greffon. Elles sont mises en œuvre dans tous les projets autotools, mais vous aurez à les mettre en œuvre vous-même si vous utilisez un makefile personnalisé.

Utilisée pour compiler un fichier source. Le nom du fichier objet est obtenu en remplaçant l'extension du fichier source par l'extension de l'objet correspondant.

Utilisée pour construire toutes les cibles dans un répertoire.

Utilisée pour installer toutes les cibles dans un répertoire.

Utilisée pour supprimer tous les fichiers construits dans un répertoire.

Utilisée pour construire un paquet de distribution, n'est appelée que dans le répertoire du projet.
Étant donné que make est livré avec des règles par défaut qui lui permettent de compiler et de faire l'édition de lien d'un programme C sans avoir besoin d'un makefile, il est possible de compiler un programme C à partir d'un fichier source unique, sans makefile ni projet.
Boîte de dialogue des préférences de construction autotools.
Boîte de dialogue des préférences Construire les « autotools ».
Cette boîte de dialogue vous permet de paramétrer les options globales pour la construction des fichiers.



Par défaut,

Par défaut, les messages d'erreur et d'avertissement sont traduits. Cela a toutefois deux inconvénients. Pour reconnaître les erreurs et les avertissements, il faut que la traduction d'

Les erreurs et les avertissements survenant lors de la construction s'affichent normalement en surbrillance dans la fenêtre Messages. En cochant cette option, ils s'affichent également en surbrillance dans l'éditeur.

L'installation d'un programme nécessite la copie de fichiers dans des répertoires systèmes pour lesquels l'utilisateur ne possède pas les droits d'écriture. Si cette option est cochée, vous pouvez utiliser
Utilisée pour créer ou modifier un point d'arrêt
Boîte de dialogue « Propriétés du point d'arrêt »

C'est la position du point d'arrêt. S'il s'agit d'un point d'arrêt existant, il est impossible de la modifier. Vous pouvez fixer un point d'arrêt à un certain numéro de ligne ou au début d'une fonction. Utilisez un des formats suivants :




La condition d'arrêt est une expression qui doit retourner une valeur booléenne
Si ce champ est vide, la condition est toujours

Le débogueur peut sauter le point d'arrêt un certain nombre de fois avant de s'y arrêter. Si le nombre de passages n'est pas zéro, le débogueur devra sauter le point d'arrêt ce nombre de fois avant d'arrêter le programme.
Le nombre de passages a une priorité plus forte que la condition. C'est seulement quand le nombre de passages a été atteint que le débogueur évalue la condition, si elle est présente et interrompt l'exécution du programme.
Gérer les points d'arrêt.
Points d'arrêt
Les points d'arrêt sont utilisés pour interrompre l'exécution du programme en un point particulier de façon à pouvoir examiner l'état du programme à cet endroit.
Affichage de la liste des points d'arrêt
Dans le
Cette fenêtre comporte les colonnes suivantes :
Emplacement
C'est la position du point d'arrêt dans le fichier source. Lorsqu'il a été défini à l'aide du débogueur, vous obtenez des informations supplémentaires comme le nom de la fonction contenant le point d'arrêt.
Adresse
Ce champ indique l'adresse mémoire du point d'arrêt lorsqu'il a été défini à l'aide du débogueur.
Type
Cette zone affiche toujours
Condition
C'est la condition du point d'arrêt. Ce champ reste vide si aucune condition n'a été définie.
Nombre de passages
Lorsque le débogueur n'est pas en fonctionnement, cette colonne indique le nombre de passages sur le point d'arrêt ou zéro si ce nombre n'est pas défini.
Lorsque le débogueur est en fonctionnement, si le nombre de passages est égal à zéro, cette colonne affiche le nombre de fois où ce point d'arrêt a été actif. Si le nombre de passages n'est pas égal à zéro, deux nombres sont affichés. Le nombre de passages est le deuxième nombre.
État
C'est l'état du point d'arrêt. Il peut être :
Suspendu :
le point d'arrêt n'est pas actif dans le programme.
Permanent :
le point d'arrêt est activé (son numéro d'identification est fourni entre parenthèses).
Temporaire :
le point d'arrêt est activé mais il sera supprimé s'il est atteint.
Au cours d'une session Anjuta, tous les points d'arrêt sont conservés même s'ils correspondent à un emplacement non-existant, par exemple dans le code source d'une bibliothèque partagée non encore chargée. Dans ce cas, leur état est défini à suspendu.
Paramétrage des points d'arrêt
Dans le
Remplissez le champ
Une autre solution est d'utiliser la fonction Basculer le point d'arrêt. S'il n'y pas de point d'arrêt à la ligne en cours, cette fonction en ajoute un. Sinon, elle l'enlève.
Dans le
Modification des points d'arrêt
Il n'est pas possible de modifier l'emplacement d'un point d'arrêt ; vous devez en créer un nouveau. Néanmoins, vous pouvez modifier la condition d'arrêt ou le nombre de passages. Pour modifier un point d'arrêt :
Sélectionnez un point d'arrêt dans la fenêtre
Faites un clic droit dans la fenêtre
Modifiez les champs
Suppression de points d'arrêt
Vous pouvez retirer un point d'arrêt en utilisant la fonction de bascule du point d'arrêt décrite plus haut. Mais si voulez retirer plusieurs points d'arrêt ou un point d'arrêt dans un fichier autre que celui que vous êtes en train de modifier, utilisez la fenêtre Point d'arrêt :
Faites un clic droit dans la fenêtre
Pour enlever tous les points d'arrêt :
Dans le
Activation ou désactivation de points d'arrêt
Il se peut que vous ayez besoin de désactiver temporairement un point d'arrêt au lieu de le retirer. Pour désactiver ou ré-activer un point d'arrêt :
Cochez l'option
Vous avez la possibilité de désactiver tous les points d'arrêt en utilisant :
Dans le
Examiner les informations du processeur.
Processeur
Affichage des registres du processeur
Dans le
Les registres dont la valeur a changé depuis le dernier arrêt sont en rouge. Il est possible de modifier la valeur de n'importe quel registre en cliquant dans la colonne « Valeur » et en saisissant une nouvelle valeur.
Affichage de la mémoire
Dans le
La première colonne affiche les adresses mémoires en hexadécimal, la seconde affiche le contenu de la mémoire en hexadécimal et la dernière le même contenu en ASCII.
L'espace d'adressage d'un simple microprocesseur 32 bits est très grand (4 gigaoctets), il est donc très difficile de se rendre à une adresse précise à l'aide de la barre de défilement. Mais, si vous cliquez avec le bouton droit de la souris pour afficher le menu contextuel et choisissez
Fenêtre « Désassemblage »
Dans le
La première colonne affiche les adresses en hexadécimal. La seconde colonne affiche soit une étiquette dès le début de la ligne et terminée par deux points, soit une instruction en langage assembleur indentée de 4 espaces.
La position dans la fenêtre de désassemblage est remplacée par la valeur du pointeur d'instruction quand le programme est arrêté.
Utiliser une commande de débogueur personnalisée.
Commande personnalisée
Vous pouvez envoyer une commande personnalisée au débogueur de la façon suivante :
Dans le
Saisissez votre commande.
La sortie de la commande est affichée dans la fenêtre de message utilisée par le débogueur.
Cette commande est envoyée directement au débogueur sans effectuer aucun contrôle. Par exemple, si vous définissez un point d'arrêt de cette façon, il n'apparaît pas dans la fenêtre
Examiner les données du programme.
Examen des données
Contrôler l'exécution d'un programme.
Contrôle de l'exécution
Évaluer les expressions et modifier les variables.
Examen des expressions
Inspection d'une expression et modification d'une variable
Lors du débogage d'un programme, le programme étant en pause, vous pouvez obtenir la valeur d'une expression ou d'une variable. Il est parfois utile de modifier la valeur d'une variable.
Dans le
Si l'expression est un nom de variable, vous pouvez modifier sa valeur en cliquant sur la colonne
Examiner les informations complémentaires du programme.
Informations diverses
Le débogueur peut vous donner des informations variées sur le programme pendant son exécution.
Affichage des bibliothèques partagées
Dans le
Cette commande ouvre une fenêtre qui affiche la liste de toutes les bibliothèques partagées que le programme a chargé et leur emplacement en mémoire. Elle montre également si la table de symboles de chaque bibliothèque a été lue ou non.
Affichage des signaux
Dans le
Cette commande affiche la liste de tous les signaux disponibles avec une courte description et trois colonnes pour définir ce qui est à faire quand un signal est reçu :
Arrêt
Le débogueur arrête l'exécution du programme lorsque le programme reçoit ce signal.
Affichage
Le débogueur affiche le signal reçu.
Transmission
Le débogueur transmet le signal reçu au programme.
Le menu contextuel affiché lorsque vous cliquez avec le bouton droit de la souris n'a que des éléments inactifs car les fonctions correspondantes ne sont pas encore implémentées.
Examiner les variables locales.
Variables locales
Les variables locales du cadre courant (c-à-d. la fonction actuellement sous contrôle du programme) sont affichées dans la fenêtre
Affichage de la liste des variables locales
Dans le
Toutes les variables locales sont affichées sous forme d'arborescence avec des enfants représentant les membres de la structure ou du tableau.
Variable
Le nom de la variable.
Valeur
La valeur de la variable.
Le type de la variable.
Modification de la valeur d'une variable
Dans la fenêtre
Saisissez la nouvelle valeur.
Boîte de dialogue « Attacher au processus »
Boîte de dialogue « Attacher au processus »
La boîte de dialogue

Si cette option est cochée, les chemins de commande sont masqués dans la liste des processus.

Si cette option est cochée, les paramètres de la ligne de commande sont masqués dans la liste des processus.

Si cette option n'est pas cochée, les processus sont affichés sous forme de liste. Si elle est cochée, les processus sont affichés sous forme d'arborescence.
Démarrer un programme avec le débogueur.
Débogage d'un programme
Lancement d'un programme dans le débogueur
Le programme actuel est défini dans la boîte de dialogue
Dans le
Un programme peut être difficile à déboguer s'il est hautement optimisé ou si les informations de débogage sont absentes. L'optimisation et les informations de débogage sont activées lors de l'étape de configuration. Normalement, une configuration de débogage est disponible, qui désactive l'optimisation et inclut toutes les informations de débogage. Anjuta affiche un avertissement si cette configuration n'est pas utilisée. Reportez-vous à
Débogage d'une application déjà en cours d'exécution
Vous pouvez utiliser le débogueur sur une application déjà en cours d'exécution.
Dans le
Sélectionnez un processus dans la boîte de dialogue
Débogage d'une application distante
Vous pouvez utiliser le débogueur pour déboguer une application exécutée sur un autre ordinateur à travers une connexion TCP (protocole de contrôle de transmission) ou une connexion série.
Dans le
Sélectionnez le type de connexion vers l'application distante,
S'il s'agit d'une connexion TCP/IP, remplissez les champs
S'il s'agit d'une connexion en ligne série, remplissez la boîte de texte en-dessous avec le nom du périphérique série, par exemple
Cliquez sur
Arrêt du débogueur
Le débogueur et le programme peuvent être arrêtés à tout moment de la façon suivante :
Dans le
Examiner la pile.
Pile
Affichage de la liste des cadres de pile
Un cadre de pile est une zone de la pile associée à chaque appel de fonction. Il énumère toutes les fonctions et leurs arguments dans l'ordre où ils ont été appelés. Chaque cadre de pile est numéroté en partant de 0 pour la fonction actuelle. Vous ne pouvez afficher les cadres de pile que pendant l'exécution du débogueur.
De plus, un programme peut être composé de plusieurs threads (ou fil d'exécution). Chaque thread est exécuté indépendamment et possède ses propres registres, piles et variables locales, mais partage toutes les variables globales.
Dans le
Les piles s'affichent selon une arborescence avec leur thread correspondant comme parent et présentant les informations suivantes :
Actif
On y trouve une flèche jaune qui représente le cadre de pile actif. Par défaut, c'est le cadre 0, la fonction actuelle. Toutes les évaluations et les variables locales sont relatives à ce cadre actif. Vous pouvez changer de cadre actif pour examiner les variables locales dans d'autres fonctions.
Thread
C'est un numéro correspondant à chaque thread.
Cadre
C'est le numéro de cadre partant de 0 pour la fonction en cours. La première fonction d'un programme, par exemple
Fichier
Nom du fichier contenant la fonction correspondant à ce cadre.
Ligne
Numéro de ligne de la fonction correspondant à ce cadre.
Fonction
Nom de la fonction correspondant à ce cadre.
Adresse de la fonction correspondant à ce cadre.
Paramètres
Les paramètres de la fonction.
Changement de cadre de pile ou de thread actif
Dans la fenêtre
Faites un clic droit et sélectionnez
Le fait de cliquer sur un cadre de pile dans le même thread ne modifie que ce cadre de pile, permettant de voir les autres variables locales. Mais faire cela dans un autre thread modifie à la fois le cadre de pile et le thread sélectionné. Les valeurs des registres sont différentes et le débogueur redémarrera dans le thread sélectionné.
Affichage de la fonction actuelle
Faites un double clic, ou un clic droit et sélectionnez
Obtention d'une trace de la pile
Dans la fenêtre
Arrêter et continuer.
Arrêt et avancement d'un pas
Comme lors d'une session de montage vidéo, le programme peut être exécuté lentement, avec la possibilité d'avance, de pause, d'arrêt, etc. C'est essentiel pour suivre le comportement du programme. Toutefois, vous ne pouvez pas revenir en arrière.
Pas en avant
Dans le
Le pas en avant n'exécute qu'une seule instruction du programme (celle où le programme a été interrompu) puis rend le contrôle au débogueur. Si l'instruction qui est exécutée appelle une ou plusieurs fonctions, le débogueur essaie de poursuivre son avancée d'un pas dans les fonctions (dans l'ordre où elles sont exécutées). Une fois l'instruction exécutée et la main rendue, vous pouvez étudier l'état de votre programme.
Si la
Avancer en sautant
Dans le
« Avancer en sautant » est similaire à « Pas en avant », mis à part le fait que le débogueur ne s'arrête pas à l'intérieur des fonctions appelées par l'instruction en cours d'exécution.
Si la
Avancer pour sortir
Dans le
« Avancer pour sortir » exécute la fonction en cours jusqu'à ce qu'elle retourne à la fonction d'appel.
Exécuter ou continuer
Dans le
Cette commande redémarre le programme et continue son exécution jusqu'à ce qu'un point d'arrêt soit atteint ou que le programme se termine.
Exécuter jusqu'au curseur
Dans le
Cette commande redémarre le programme et continue son exécution jusqu'à ce que la ligne ou l'adresse (si la fenêtre
Arrêt du programme
Dans le
Cela interrompt le programme et rend le contrôle au débogueur, vous permettant de réaliser diverses tâches de débogage, comme l'inspection de données ou l'ajout de points d'arrêts.
Trucs et astuces de débogage.
Astuces de débogage
Résolution des erreurs critiques de Glib/GTK+
Il est parfois difficile de trouver où les erreurs critiques Glib sont survenues, car elles n'interrompent pas le programme. Vous pouvez régler le programme de façon à ce qu'il s'arrête dès qu'une erreur critique GLib survient en donnant à la variable d'environnement
Ouvrez la
Cliquez sur le signe plus, à côté de
Cliquez sur
Remplissez le
Cliquez sur
Exécutez le programme avec le débogueur en sélectionnant
Faites tourner le programme jusqu'à ce que l'erreur critique survienne.
Quand le programme s'interrompt, examinez
La fonction la plus haute avec le numéro d'enregistrement 0 est dans Glib, aussi devez-vous parcourir la pile jusqu'en bas. Habituellement, l'erreur provient de la fonction la plus élevée appartenant à votre programme.
Surveiller les expressions et les variables.
Inspection d'expressions
Les expressions inspectées sont des expressions que le débogueur évalue et dont il affiche le résultat, chaque fois que le programme est interrompu, par exemple après chaque
Affichage de la liste des expressions inspectées
Dans le
Tout comme les variables locales, toutes les expressions inspectées s'affichent selon une arborescence avec des enfants représentant les membres de la structure ou du tableau.
Nom de la variable ou de l'expression.
Valeur de la variable ou de l'expression.
Type du résultat pour la variable ou l'expression.
Mise à jour des expressions inspectées
Les expressions inspectées peuvent être mises à jour automatiquement dès que le programme est interrompu, ou à la demande de l'utilisateur.
Pour définir une expression inspectée en vue de sa mise à jour automatique :
Dans la fenêtre
Pour mettre à jour manuellement une variable inspectée :
Dans la fenêtre
Pour mettre à jour manuellement toutes les expressions inspectées en une fois :
Dans la fenêtre
Ajout d'une inspection sur une expression
Pour ajouter une expression à la liste des inspections :
Dans le
Saisissez l'expression à inspecter. Cochez
Une expression peut être évaluée et ensuite ajoutée en tant que variable inspectée de la façon suivante :
Dans le
Cliquez sur le bouton
Suppression d'une expression à inspecter
Vous pouvez enlever une expression de la liste des expressions inspectées.
Dans la fenêtre
Les expressions inspectées peuvent être enlevées toutes en même temps.
Dans la fenêtre
Si une expression inspectée correspond à une variable, vous pouvez modifier sa valeur.
Dans la fenêtre
Saisissez la nouvelle valeur.
Moteur de gestion de projet Répertoire.
Greffon moteur de gestion de projet Répertoire
C'est le plus simple des moteurs de gestion de projet. Il n'y a pas de fichier projet. Il fonctionne comme un visionneur de fichiers, considérant tous les fichiers correspondants à des extensions de sources typiques (par exemple
Ce moteur de gestion est une solution alternative bien pratique si votre projet n'a pas de moteur de gestion correspondant dans
Il n'est pas possible d'ajouter ou de modifier quoi que ce soit avec un projet utilisant ce moteur de gestion. Mais si vous créez un fichier source dans le répertoire de projet, avec la bonne extension, il sera ajouté automatiquement.
Toutes les rubriques de l'aide.
Index_
external ref='figures/anjuta-in-action.png' md5='a31f1c85a4a14032fcd30ab6f6d6b3c0'
Introduction à l'Environnement de développement intégré



Nous espérons que vous apprécierez l'usage d'
La capture d'écran suivante illustre une partie des éléments que vous trouvez dans

Fenêtre principale d'
Fonctionnalités modificateurs Emacs prises en charge.
Modificateurs Emacs
Ce type de modificateur est un commentaire dans la première ligne du fichier. Il est composé d'une liste de noms de variables suivies par
Un modificateur
/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*- */
Anjuta ne prend en charge que les variables suivantes.

Définir à

Nombre d'espaces correspondants à une tabulation.

Nombre d'espaces utilisés pour indenter le code C.
Fonctionnalités modificateurs Vim prises en charge.
Modificateurs Vim
Ce modificateur est un commentaire dans la première ligne du fichier et doit commencer par
Un modificateur
/* vim: set noet ts=4 sw=4: */


Utiliser des espaces pour l'indentation.


Utiliser des tabulations pour l'indentation.






Moteur de gestion de projet Makefile.
Greffon moteur de gestion de projet Makefile
Un Makefile est probablement la façon la plus courante de bâtir un logiciel sur toutes sortes de plateformes. Un Makefile contient une liste de règles décrivant quelles commandes doivent être exécutées pour générer une cible à partir d'une liste de dépendances. Lors de la construction d'un programme, la cible est un fichier objet et les dépendances sont les fichiers sources. La cible d'une règle peut être la dépendance d'une autre, ce qui permet l'enchaînement de plusieurs règles de façon à fabriquer une cible finale.
C'est un outil général, de bas niveau, ce qui rend difficile de trouver tous les fichiers sources et toutes les cibles d'un projet. Aussi
Si le moteur de gestion de projet n'est pas capable de trouver les fichiers sources, vous pouvez utiliser le moteur de gestion de répertoire à la place. Il ne reconnaît aucune cible mais devrait récupérer tous les fichiers sources.
La modification des propriétés, l'ajout ou le retrait de cibles et de fichiers sources sont désactivés avec ce moteur de gestion, étant donné que la modification automatique du makefile n'est pas implémentée. Il doit être modifié manuellement en utilisant l'éditeur de texte. Quand le makefile est enregistré, il est néanmoins automatiquement rechargé.
Importer un projet existant.
Importation d'un projet

Dans le
Sélectionnez
Vous pouvez aussi sélectionner
Après avoir sélectionné un projet existant, la boîte de texte

Ajouter un dossier à un projet.
Ajout d'un dossier
Un dossier vous permet de regrouper plusieurs cibles et de leur attribuer les mêmes propriétés. Il correspond le plus souvent à un répertoire.
Sélectionnez le groupe ou le projet auquel vous voulez ajouter le nouveau groupe dans la
D'une autre façon, dans le
Saisissez un nouveau nom de groupe.
Les noms de groupes sont habituellement restreints aux lettres, chiffres et le caractère de soulignement. Aussi vaut-il mieux éviter d'utiliser d'autres caractères.
Vous pouvez sélectionner un autre groupe dans la partie inférieure de la
Quand vous avez choisi le parent et saisi le nom, cliquez sur le bouton
Ajouter, modifier ou retirer des dossiers d'un projet.
Gestion des dossiers
Retirer des dossiers d'un projet.
Suppression de dossier
Sélectionnez le dossier que vous voulez retirer dans la
Confirmez la suppression. Le dossier est retiré du projet sans supprimer les fichiers ou les dossiers de votre disque.
Ajouter une bibliothèque personnalisée à une cible.
Ajout d'une bibliothèque personnalisée
Comme il est d'usage sous Linux, il est plus aisé d'utiliser un paquet de bibliothèque, donc vérifiez si cela est possible
Pour utiliser une bibliothèque en C, vous devez indiquer au compilateur où se trouvent les fichiers d'en-tête (header) et à l'éditeur de lien (linker) où se trouvent les bibliothèques nécessaires. Le problème est que votre programme ne pourra pas être compilé sur un autre ordinateur si les fichiers d'en-tête et les bibliothèques sont situés ailleurs.
Sélectionnez le répertoire contenant le programme dans lequel vous voulez ajouter la bibliothèque dans la
D'une autre façon, dans le
Si les fichiers d'en-tête (header) sont installés dans un emplacement standard (
Il se peut que vous deviez cliquer sur le bouton
Ensuite, vous devez ajouter la bibliothèque à la cible. Sélectionnez le programme dans lequel vous voulez ajouter la bibliothèque dans la
Vous devez paramétrer la propriété
Si la bibliothèque n'est pas dans un répertoire standard,
Ajouter ou retirer des bibliothèques des cibles d'un projet.
Gestion des bibliothèques
Supprimer une bibliothèque personnalisée d'une cible.
Suppression d'une bibliothèque personnalisée
Sélectionnez la bibliothèque que vous voulez retirer dans la
Supprimez la bibliothèque des propriétés
Ajouter un ensemble de bibliothèques à une cible.
Ajout d'un module
Les paquets ne peuvent pas être ajoutés directement à une cible. Il faut d'abord les placer dans un module, puis ajouter ce module à la cible. Consultez
Sélectionnez le programme dans lequel vous voulez ajouter la nouvelle bibliothèque dans la
D'une autre façon dans le
Vous devez choisir la cible où vous voulez ajouter le module, dans le
Quand vous êtes prêt, cliquez sur le bouton
Créer un ensemble de bibliothèques.
Création d'un module
Sous Linux, la plupart des bibliothèques sont distribuées avec des données additionnelles stockées dans un fichier

Une bibliothèque ne peut pas être ajoutée directement à votre programme, pour cela, vous devez d'abord créer un module qui est juste un regroupement de bibliothèques.
Sélectionnez le programme où vous voulez ajouter la nouvelle bibliothèque dans la
D'une autre façon, dans le
Vous obtenez une liste des paquets de bibliothèques installés sur votre système. Vous pouvez cocher une ou plusieurs bibliothèques.
Si la bibliothèque dont vous avez besoin n'est pas là, c'est probablement qu'elle n'est pas installée sur votre système. Lancez l'application que vous utilisez pour installer des nouveaux programmes et recherchez la bibliothèque. Le paquet voulu a souvent une extension « .dev » ou « .devel » et devrait inclure les fichiers d'en-tête (header) et un fichier
Une fois la bibliothèque sélectionnée, un nom de module est automatiquement généré, mais vous pouvez le modifier. Cela fait, cliquez sur le bouton
Lisez la
Supprimer un ensemble de bibliothèques d'une cible.
Suppression d'un module
Sélectionnez la bibliothèque que vous voulez retirer dans la
Confirmez la suppression. La bibliothèque est retirée de la cible.
Ajouter une bibliothèques dans un module.
Ajout d'un paquet
Sélectionnez le module dans lequel vous voulez ajouter la nouvelle bibliothèque dans la
Dans la liste de tous les paquets de bibliothèques, cochez les bibliothèques additionnelles désirées. Assurez-vous que le nom de module est sélectionné dans la boîte de texte inférieure puis, cliquez sur le bouton
Lisez la
Supprimer une bibliothèques d'un module.
Suppression d'un paquet
Sélectionnez le paquet que vous voulez supprimer dans la
Confirmez la suppression. Ce paquet est retiré du fichier projet.
Gestionnaire de projet.
Greffon gestionnaire de projet

Quelle que soit le moteur de gestion sous-jacent, l'interface graphique est la même, mais certaines fonctions peuvent être désactivées.
Greffon moteur de gestion de projet
Modifier les propriétés du projet.
Modification d'un projet
Ajouter des fichiers existants à un projet.
Ajout de fichiers
Sélectionnez la cible dans laquelle vous voulez ajouter le nouveau fichier source dans la
D'une autre façon, dans le
Vous pouvez sélectionner une autre cible en agissant sur le
Dans le sélecteurs de fichiers ci-dessous, sélectionnez les fichiers que vous souhaitez ajouter. Puis cliquez sur le bouton
Vous pouvez ajouter des fichiers dans les sous-répertoires du projet. La plupart des formats de projets imposent la présence des fichiers dans le dossier du projet. Les fichiers source ajoutés à l'extérieur du dossier du projet sont automatiquement copiés à l'intérieur pour satisfaire ce critère.
Ajouter ou retirer des fichiers d'un projet.
Gestion des fichiers
Retirer des fichiers d'un projet.
Suppression de fichiers
Sélectionnez le fichier que vous voulez retirer dans la
Confirmez la suppression. Le fichier est retiré du projet mais n'est pas supprimé de votre disque.
Vous pouvez sélectionner plusieurs fichiers en même temps en maintenant la touche
Ajouter une cible à un projet.
Ajout d'une cible
Une cible regroupe des fichiers et définit leur utilisation. Elle sert à représenter un programme avec tous ses fichiers sources comme enfants, ou regroupe seulement les fichiers de données qui doivent être installés au même endroit.
Sélectionnez le répertoire dans lequel vous voulez ajouter la nouvelle cible dans la
D'une autre façon dans le
Vous pouvez sélectionner un autre répertoire dans la partie inférieure de la
Saisissez un nom de cible et sélectionnez le type de cible dans la liste déroulante en-dessous. Selon votre moteur de gestion de projet, différents types de cible sont possibles, comme ci-dessous.
Les noms de cibles sont habituellement restreints aux lettres, chiffres et le caractère de soulignement. Aussi vaut-il mieux éviter d'utiliser d'autres caractères.
Quand vous avez choisi le nom, le type et le parent de la cible, cliquez sur le bouton
Ajouter, modifier ou retirer des cibles d'un projet.
Gestion des cibles
Retirer une cible d'un projet.
Suppression d'une cible
Sélectionnez la cible que vous voulez supprimer dans la
Confirmez la suppression. La cible et toutes ses propriétés sont alors supprimées du fichier projet. Tous ses fichiers restent intacts sur votre disque dur.
Afficher le contenu du projet.
Affichage d'un projet
Un projet est représenté sous forme d'arborescence, l'élément racine correspond au projet alors que les enfants représentent les programmes, les bibliothèques, les dossiers et les fichiers source. Chaque élément peut posséder des propriétés permettant de définir plus de détails comme la version du projet, les drapeaux de compilation ou les dossiers d'installation. Ces éléments sont divisés en plusieurs catégories, mais suivant le moteur, toutes ne sont pas disponibles :
Racine
Il n'y a qu'un seul nœud de ce type. Il représente le projet lui-même. Il est l'endroit où vous pouvez définir les propriétés générales du projet comme son nom ou sa version.
Module
Ceci est un ensemble de paquets utilisés dans le projet autotools. Ils apparaissent comme les enfants du nœud racine pour représenter tous les modules définis et comme enfants de chaque cible les utilisant. Pour de plus amples détails, consultez
Paquet
Ceci sont les paquets d'une bibliothèque utilisés dans le projet autotools. Ils apparaissent comme les enfants de chaque module. Pour plus de détails, consultez
Dossier
Ceci est utilisé pour regrouper des cibles permettant de définir des propriétés communes. Elles sont souvent implémentées comme des sous-dossiers. Pour plus de détails, consultez
Cible
Elle regroupe des fichiers et définit la manière dont ils sont utilisés. Il existe plusieurs sortes de cibles, comme par exemple des cibles programme, bibliothèque ou de données et elles correspondent à des utilisations différentes des fichiers enfants. Elles représentent souvent des fichiers de projets générés comme des programmes compilés ou des bibliothèques. Pour plus de détails, consultez
Vous pouvez faire glisser et déposer les cibles en haut de la vue arborescente du projet pour créer un raccourci permettant un accès plus aisé. Par défaut, toutes les cibles programmes sont placées ici.
Source
Chaque fichier source est représenté par un élément dans la vue du projet. L'utilisation de chaque fichier dépend de sa cible parente. Tous les enfants d'une cible programme sont compilés pour le générer. À l'opposé, les enfants d'une cible de données ne sont copiés dans un dossier qu'à l'installation du projet. Pour plus de détails, consultez
Créer un projet à partir de rien.
Création d'un projet
Les nouveaux projets sont créés à partir de modèles.
Dans le
D'une autre façon, dans la liste déroulante du bouton
Sélectionnez l'icône représentant le type de projet que vous voulez créer et cliquez sur
En laissant le pointeur de souris sur une icône de projet pendant quelques instants, un message d'aide apparaît donnant des informations sur le type de projet.
Selon le type de projet sélectionné, vous devez saisir des informations différentes. Une fois réalisé, cliquez sur
Toutes les informations sont regroupées par pages et il vous faut souvent renseigner deux ou trois pages. Vous pouvez toujours revenir en arrière en utilisant le bouton
Laissez le pointeur de souris sur un bouton ou une zone de saisie pendant quelques instants pour obtenir un petit message d'aide donnant plus de détails sur les paramètres correspondants.
Après avoir renseigné toutes les pages, vous obtenez une page de résumé affichant les principales informations sur ce projet. Rien n'a encore été écrit sur votre disque jusque-là. Cliquez sur
Chaque type de projet correspond à un modèle.
Assistant de modèle de projet.
Assistant de modèle de projet
Un modèle de projet se compose d'un ensemble de fichiers qui peuvent être traités par un puissant moteur de gestion de modèle appelé
Ce fichier
Boîte de dialogue des paramètres du programme
Boîte de dialogue « Paramètres du programme »
La boîte de dialogue

C'est le programme qui est exécuté quand vous le lancez avec ou sans le débogueur. La liste déroulante vous permet de sélectionner les programmes créés par le projet actuel, mais vous pouvez cliquer sur le bouton

Ce sont les paramètres de la ligne de commande utilisés par votre programme. La liste déroulante conserve un historique des derniers paramètres utilisés.

Le répertoire de travail est le répertoire actuel où votre programme est exécuté.

Cliquez sur la section déroulante pour afficher toutes les variables d'environnement accessibles à votre programme. Par défaut, elle inclut toutes les variables d'environnement actuelles, celles-ci sont affichées en gris clair.
Cliquez sur le bouton
Cliquez sur
Cliquez sur
Quand une variable n'a pas la même valeur que dans l'environnement actuel, elle s'affiche en noir.

Cochez cette case pour exécuter le programme dans un terminal permettant de saisir des données et de les visualiser avec les flux Unix standards. Ce n'est pas nécessaire pour les programmes possédant une interface graphique.
Démarrer un programme sans le débogueur.
Exécution d'un programme
Si
Dans le
Le programme actuel et plusieurs paramètres peuvent être définis dans la boîte de dialogue
Dans le
Si le programme a besoin de fichiers de données, il vous faut probablement les installer avant de l'exécuter. Consultez
Toutes les fenêtres et toutes les boîtes de dialogue.
Fenêtres et boîtes de dialogue