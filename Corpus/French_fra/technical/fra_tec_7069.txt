# language_name_wals:	French
# language_name_glotto:	French
# iso639_3:	fra
# year_composed:	NA
# year_published:	2007
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	Ubuntu
# source:	https://object.pouta.csc.fi/OPUS-Ubuntu/v14.10/raw/fr.zip
# copyright_short:	http://opus.nlpl.eu/Ubuntu.php
# copyright_long:	http://opus.nlpl.eu/Ubuntu.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

le C89 ISO interdit les mots composés
;; Statistiques du combinateur : %d tentatives, %d substitutions (%d requérant un nouvel espace),
;; %d succès.
L'opérande gauche de « %s » change de signe lors de sa promotion
De multiples balises pour les inclusions peuvent être utiles pour:
élimination de la macro existente « %s »
%s
conversion de %s vers %s n'est pas supporté par iconv
iconv_open
pas d'implantation iconv, ne peut convertir de %s vers %s
caractère 0x%lx n'est pas dans le jeu de caractères de base
conversion vers un jeu d'exécution de caractères
caractère 0x%lx n'est pas unibyte dans le jeu de caractères d'exécution
noms de caractère universel sont seulement valides en C++ et C89
la signification de « \\%c » est différente en C traditionel
nom de caractère universel incomplet %.*s
%.*s n'est pas un caractère universel valide
« $ » dans un identificateur ou un nombre
caractère universel %.*s n'est pas valide dans un identificcateur
caractère universel %.*s n'est pas valide au début d'un identificcateur
conversion UCN vers le jeu source de caractères
conversion UCN vers le jeu d'exécution de caractères
la signification de « \\x » est différente en C traditionel
\\x utilisé sans être suivi de chiffres en hexdécimal
séquence d'échappement hexadécimale hors limite
séquence d'échappement octale hors limite
la signification de « \\a » est différente en C traditionel
séquence d'échappement « \\%c » non conforme au standard ISO
séquence d'échappement « \\%c » inconnue
séquence d'échappement « \\%s » inconnue
conversion d'une séquence d'échappement vers un jeu d'exécution de caractères
constante caractère trop longue pour son type
constante caractère multi-caractères
constante caractère vide
échec de conversion de %s vers %s
éléments lexicaux superflus à la fin de la directive #%s
#%s est une extension GCC
il est suggéré de ne pas utiliser #elif en C traditionnel
le C traditionel ignore la directive #%s si le caractère # est indenté
il est suggéré de cacher #%s au C traditionel en indentant le « # »
placer une directive dans les arguments d'une macro n'est pas portable
la directive de style de ligne est extension GCC
directive de pré-traitement #%s invalide
« defined » ne peut être utilisé comme nom de macro
« %s » ne peut être utilisé comme nom de macro car c'est un opérateur en C++
aucun nom de macro donné dans la directive #%s
les noms de macro doivent être des identificateurs
indéfinition de « %s »
caractère > de terminaison manquant
#%s attend "NOM_DE_FICHIER" ou <NOM_DE_FICHIER>
nom de fichier vide dans #%s
#include imbriqué trop profondément
#include_next dans un fichier source primaire
fanion « %s » invalide dans la ligne de directive
« %s » après #line n'est pas un nombre entier positif
numéro de ligne hors limite
« %s » n'est pas un nom de fichier valide
« %s » après # n'est pas un nombre entier positif
directive #%s invalide
enregistrement de "%s" à la fois comme une pragma et un espace de nom de pragma
la #pragma %s %s est déjà enregistrée
la #pragma %s est déjà enregistrée
#pragma once utilisée une seule fois dans le fichier principal
la directive GCC #pragma poison est invalide
#pragma system_header ignorée en dehors du fichier d'inclusion
impossible de trouver le fichier source %s
le fichier courant est plus vieux que %s
_Pragma prend une chaîne entourée de parenthèrese
#else sans #if
#else après #else
la condition débute ici
#elif sans #if
#elif après #else
#endif sans #if
« ( » manquante après le prédicat
« ) » manquante pour completer la réponse
la réponse du prédicat est vide
assertion sans prédicat
le prédicat doit être un identificateur
« %s » re-asserti
#%s non terminé
attention :
erreur interne :
erreur:
stdout
%s : %s
trop de points décimaux dans le nombre
chiffre « %c » invalide dans la constante en base 8
usage d'une constante hexadécimale constante à la C99
l'exposant n'a pas de chiffre
la contante hexadécimale flottante requière un exposant
suffixe « %.*s » invalide pour une constante flottante
le C traditionnel interdit le suffixe « %.*s »
suffixe « %.*s » invalide pour une constante entière
usage d'une constante entière « long long » à la C99
les constantes imaginaires sont une extension GCC
constante entière trop grande pour tenir dans son type
cette constante entière est si grande qu'elle ne peut être signée
« ) » manquant après « defined »
l'opérateur « defined » requiert un identificateur
(« %s » est un élément lexical alternatif pour « %s » en C++)
cette utilisation de « defined » peut ne pas être portable
constante flottante dans une expresion pour le préprocesseur
constante complexe dans une expresion pour le préprocesseur
« %s » n'est pas défini
opérateur binaire manquant avant l'élément lexical « %s »
l'élément lexical « %s » n'est pas valide dans les expressions pour le préprocesseur
expression manquante entre '(' et ')'
#if sans expression
l'opérateur « %s » n'a pas d'opérande droite
opérateur « %s » n'a pas d'opérande gauche
« : » n'est pas précédé de « ? »
pile non balancée dans #if
opérateur impossible « %u »
« ) » manquante dans l'expresion
« ? » n'est pas suivi de « : »
débordement d'entier dans l'expresion pour le préprocesseur
« ( » manquante dans l'expresion
L'opérande droite de « %s » change de signe lors de sa promotion
le C traditionnel rejette le plus unaire
opérateur virgule dans l'opérande de #if
division par zéro dans #if
répertoire NUL dans find_file
un ou plusieurs fichiers PCH ont été repérés, mais ils étaient invalides
utiliser -Winvalid-pch pour plus d'informations
%s est un périphérique de blocs
%s est trop grand
%s est plus petit que prévu
aucun chemin d'inclusion dans lequel on pourrait repérer %s
cppchar_t doit être d'un type non signé
l'arithmétique du préprocesseur a une précision maximale de %lu bits ; la cible requière %lu bits
l'arithmétique de CPP doit être au moins aussi précise que le type int de la cible
sur la cible, « char » fait moins de 8 bits
sur la cible, « wchar_t » est plus petit que « char »
sur la cible, « int » est plus petit que « char »
les demi-entiers de CPP sont plus petit que les caractères de CPP
CPP sur cette machine ne peut gérer les constantes larges de caractères de plus de %lu bits, mais la cible requière %lu bits
« \\ » et retour de chariot séparés par un blanc
« \\ » en fin de ligne à la fin du fichier
trigraphe ??%c converti en %c
trigraphe ??%c ignoré, utilisez -trigraphs pour le permettre
« /* » à l'intérieur d'un commentaire
%s dans la directive du préprocesseur
caractère(s) nul(s) ignoré(s)
tentative d'utilisation d'un « %s » corrompu
« __VA_ARGS__ » peut seulement appraître dans l'expansion des macros C99 à nombre variable d'arguments
caractère(s) nul préservé(s) dans la chaîne
caractère %c de terminaison manquant
pas de retour chariot à la fin du fichier
commentaire non terminé
Les commentaires à la C++ ne sont pas permis en C89 ISO
(ceci sera rapporté une seule fois seulement par fichier d'entrée)
commentaire multi-lignes
l'élément lexical %s ne peut être épelé
Dans le fichier inclus à partir de %s:%u
,
 à partir de %s:%u
la macro « %s » n'est pas utilisée
macro interne invalide « %s »
ne peut déterminer la date et l'heure
chaîne invalide, « \\ » final ignoré
le collage de « %s » et de « %s » ne donne pas d'élément lexical de pré-traitement valide
ISO C99 requiert que tous les arguments soient utilisés
macro « %s » requiert %u arguments, mais seulement %u ont été passés
la macro « %s » a reçu %u arguments, mais elle n'en prend que %u
liste d'arguments non terminée invoquant la macro « %s »
la macro « %s » ressemblant à une fonction doit utilisée avec des arguments en C traditionnel
paramètre de macro « %s » en double
« %s » peut ne pas apparaître parmi les paramètres de macros
les paramètres de macro doivent être séparés par des virgules
nom de paramètre manquant
les macros anonymes à nombre variable d'arguments ont été introduites avec le C99
ISO C ne permet pas les macros nommées à nombre variable d'arguments
« ) » manquante dans la liste des paramètres de macros
ISO C99 requiert un blanc après le nom de la macro
blanc d'espacement manquant après le nom de la macro
« # » n'est pas suivi d'un paramètre de macro
« ## » ne peut apparaître à chacune des fins de l'expansion de macros
« %s » redéfini
ceci est la localisation d'une précédente définition
l'argument macro « %s » serait changé en chaine en C traditionnel
type de hachage %d invalide dans cpp_macro_definition
lors de l'écriture de l'en-tête pré-compilée
%s: n'est pas utilisé parce que « %.*s » n'est pas définie
%s: n'est pas utilisé parce que « %.*s » est défini en tant « %s » et non pas « %.*s »
%s: non utilisé parce que « %s » est défini
lors de la lecture de l'en-tête pré-compilée
récursion détectée lors de l'expansion de la macro « %s »
erreur de syntaxe dans la liste de paramètres macro