# language_name_wals:	French
# language_name_glotto:	French
# iso639_3:	fra
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	KDEdoc
# source:	https://object.pouta.csc.fi/OPUS-KDEdoc/v1/raw/fr.zip
# copyright_short:	http://opus.nlpl.eu/KDEdoc.php
# copyright_long:	http://opus.nlpl.eu/KDEdoc.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Portage d'applications vers aRts
Utilisation de artsdsp
L'utilitaire artsdsp décrit précédemment permet à la plupart des applications sonores héritées qui communiquent directement aux périphériques audio de travailler proprement avec aRts.
Les applications écrites pour utiliser l'Enlightenment Sound Daemon (esd) fonctionneront aussi dans la plupart des cas en exécutant esd avec artsdsp.
Ceci constitue une bonne solution à court terme pour porter les applications KDE existantes.
Cependant, elle ne permet pas à l'application de tirer avantage directement de toute la puissance de aRts, comme utiliser des modules et des flux multimédia autre que des données audio numériques.
Si l'application va au-delà d'une simple lecture d'un fichier son, il est plus logique d'ajouter le support natif de aRts à cette application.
Utiliser aRts signifie aussi que l'application n'a pas tant de travail à faire -- elle peut tirer parti des fonctions de aRts pour par exemple gérer le codecs pour des formats multimédia différents et le contrôle des périphériques sonores.
Ajout du support natif de aRts
Lorsque vous utilisez aRts, vous pouvez choisir parmi un grand nombre d'API Laquelle utiliser dépend de plusieurs facteurs ,incluant le type de flux audio utilisé (son, MIDI, CD audio, etc.., les caractéristiques de l'API requises, et si c'est écrit en C++.
La plupart des cas, le choix est évidemment basé sur les caractéristiques requises.
Pour la portabilité entre plate-formes, les applications qui doivent être exécutées dans d'autres environnements que KDE ne peuvent pas reposer sur la présence de aRts.
L'utilisation de modules externes (plug-ins) est un bon moyen de gérer différents environnements multimédia.
L'ouverture et la documentation des API des modules externes a l'avantage de permettre à des personnes autres que le développeur de l'application d'implanter un module externe de aRts.