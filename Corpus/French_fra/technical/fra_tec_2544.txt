# language_name_wals:	French
# language_name_glotto:	French
# ISO_6393:	fra
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	KDEdoc
# source:	https://object.pouta.csc.fi/OPUS-KDEdoc/v1/raw/fr.zip
# copyright_short:	http://opus.nlpl.eu/KDEdoc.php
# copyright_long:	http://opus.nlpl.eu/KDEdoc.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Modules de aRts
Introduction
Ce chapitre décrit tous les modules standards de aRts.
Une des caractéristiques qui font la puissance de aRts est le fait que les modules peuvent être connectés ensembles dans des structures pour implanter de nouvelles fonctions comme des effets et des instruments.
Les modules sont répartis en deux catégories.
Les modules de synthèse sont utilisés pour implanter l'ossature qui manipule les flux de données multimédia pour créer de nouveaux effets, instruments, mélangeurs et applications.
Les modules visuels vous permettent de fournir une interface utilisateur graphique afin de contrôler les structures sonores construites à partir des modules de synthèse.
Manuel de référence des modules de synthèse
Arithmétique + Mixage
Synth_ADD
Ajoute deux signaux.
Synth_MUL
Multiplie un signal par un facteur.
Vous pouvez l'utiliser pour atténuer des signaux (0 < facteur < 1), pour les amplifier (facteur > 1) ou pour les inverser (facteur < 0).
Notez que le facteur peut être un signal et peut ne pas être constant (comme une enveloppe ou un signal réel).
Synth_MULTI_ADD
Ajoute un nombre arbitraire de signaux.
Si vous devez effectuer la somme des formes d'ondes produites par quatre oscillateurs différents, vous pouvez par exemple connecter toutes leurs sorties à un module Synth_MULTI_ADD.
C'est plus efficace que d'utiliser trois modules Synth_ADD.
Synth_XFADE
Mélange deux signaux.
Si le taux entré est -1, seul le canal de gauche sera entendu, et si c'est 1, seul le canal de droite sera entendu.
Lorsqu'il vaut zéro, les deux signaux ont le même volume.
Ceci permet de vous assurer que le signal restera dans une certaine plage bien définie.
Si vous aviez deux signaux qui étaient entre -1 et 1 avant le mélange, ils seront dans la même plage après.
Synth_AUTOPANNER
Bus
Synth_BUS_UPLINK
Lien vers un bus.
Envoyez les signaux sur les ports gauche et droit, et le nom d'un bus où les données doivent aller sur le port bus.
Le signal constitué de tous les uplink avec ce nom apparaîtra sur chaque downlink sur ce bus.
Synth_BUS_DOWNLINK
Collecte (la somme de) toutes les données qui sont placées sur un certain bus (avec le nom que vous spécifiez sur le port bus).
Délais
Synth_DELAY
Retarde le signal d'entrée d'une certaine durée.
La durée spécifiée doit être entre 0 et maxdelay pour un retard entre 0 et maxdelay secondes.
Ce genre de retard ne devrait pas être utilisé dans les structures avec des boucles de contre-réaction.
Ceci est dû au fait que c'est un retard variable.
Vous pouvez modifier sa longueur alors qu'il est en fonctionnement, et même mis à zéro.
Mais comme dans une structure en boucle, la sortie est nécessaire pour calculer l'échantillon suivant, un délai avec une valeur qui tombe à zéro lors de la synthèse peut aboutir à une situation où plus rien ne se passe.
Utilisez alors plutôt CDELAY dans ce cas, combinez peut-être une valeur constante petite (de l'ordre de 0.001 seconde) avec une valeur variable.
Vous pouvez aussi combiner un CDELAY et un DELAY pour obtenir un retard de durée variable avec une valeur minimale dans une boucle à contre-réaction.
Assurez vous que vous avez un CDELAY.
Synth_CDELAY
Il permet de gagner en temps de calcul puisqu'aucune interpolation n'est effectuée, et il est utile dans les structures récursives.
Voir la description précédente (Synth_DELAY).
Enveloppes
Synth_ENVELOPE_ADSR
active
si la note est pressée par l' utilisateur
invalue
signal d' entrée
attack
durée entre le moment où l'utilisateur presse une note et celui où le signal atteint son amplitude maximale (en secondes)
decay
durée entre le moment où le signal atteint son amplitude maximale et où le signal revient à un niveau constant (en secondes)
sustain
niveau constant auquel le signal est maintenu après, jusqu'à ce que l'utilisateur relâche la touche
release
durée entre le moment où l'utilisateur relâche la note et celui où le signal atteint une valeur nulle (en secondes)
Synth_PSCALE
Le module Synth_PSCALE va échelonner le signal audio qui lui est envoyé d'une valeur 0 (silence) jusqu'à 1 (volume original) puis 0 (silence), en tenant compte de la position (récupérée à partir d'un module Synth_SEQUENCE).
La position où le pic survient est donnée par le paramètre pos.
Effets
Synth_FREEVERB
C'est un effet de réverbération.
Dans l'implantation actuelle, il est conçu pour passer un signal stéréo dans la réverbération, et il ajoute le signal réverbéré au signal initial.
ceci signifie qu'il peut aussi être utilisé dans un StereoEffectStack
Le signal d'entrée doit être connecté à (inleft ,inright), le signal de sortie se trouve sur (outleft, outright).
roomsize
damp
wet
quantité de signal réverbéré (c'est-à-dire la quantité de signal qui devrait être modifié par les filtres, résultant en un son réverbéré
dry
width
mode
[TODO:
I think if mode is 1, the reverb holds the current image of thesound, whereas 0 is normal operation]
Synth_TREMOLO
[TODO: currently this is implemented as invalue + abs( inlfo) - maybe it would make more sense to implement it as invalue * (1+inlfo*depth), where depth would be a parameter between 0 ..1 - decide this after KDE 2.1; if you have a comment, send a mail to the aRts list;).]
Synth_FX_CFLANGER
Un flanger est un effet de retard variable dans le temps.
Pour simplifier, ce module est fourni et contient le code d'un flanger sur un seul canal.
invalue
Le signal que vous souhaitez traiter
lfo
mintime
maxtime
outvalue
Signal de sortie.
Il est important que vous le mélangiez avec le signal d'origine (non flangé) pour obtenir l'effet désiré.
Vous pouvez l'utiliser comme base pour un effet de chorus.
Filtres
Synth_PITCH_SHIFT
L'effet de pitch modifie la fréquence du signal d'entrée sans en modifier la vitesse.
Par exemple, vous pouvez changer la hauteur de votre voix lors de l'enregistrement (et lors de la lecture) en temps réel.
Le paramètre vitesse est la vitesse relative avec laquelle le signal sera rejoué.
Une vitesse de deux rend le son deux fois plus haut (&cad ;une fréquence d'entrée de 440 Hz résultera en une sortie à 880 Hz).
Le paramètre fréquence est utilisé de manière interne pour changer le grain du signal.
Il est accordable, et selon votre choix, le changement de hauteur semblera plus ou moins réaliste.
Une bonne valeur de départ est quelque chose comme 5 ou 10.
Synth_SHELVE_CUTOFF
Filtre toutes les fréquences supérieures à la fréquence de coupure.
Synth_BRICKWALL_LIMITER
Ce module écrête un signal pour le faire entrer dans la plage [-1 ;1].
Il ne fait rien pour éviter les distorsions dues à l'écrêtage de signaux trop forts.
Vous pouvez l'utiliser comme effet (par exemple pour créer une onde sinusoïdale un peu écrêtée).
Cependant, il est préférable d'envoyer ensuite le signal dans un filtre passe-bas pour rendre le son moins agressif.
Synth_STD_EQUALIZER
invalue, outvalue
Signal filtré par l'égaliseur.
low
Comment sont modifiées les basses fréquences.
La valeur est en dB, et 0 signifie pas de changement sur les basses fréquences, -6 les atténue de 6 dB et +6 les amplifie de 6 dB.
mid
Comment sont modifiées les fréquences médium par l'égaliseur en dB (voir plus haut).
high
Comment sont modifiées les fréquences aiguës par l'égaliseur en dB (voir plus haut).
frequency
Fréquence centrale de l'égaliseur en Hz, les fréquences médium se situent autour de cette valeur, les graves et les aiguës sont respectivement avant et après cette fréquence.
Notez que cette fréquence ne doit pas être supérieure à la moitié de la fréquence d'échantillonnage, habituellement 22050 Hz, et ne doit pas être inférieure à 1 Hz.
q
Influence la largeur du spectre des médiums.
Ce doit être une valeur strictement positive.
1 est une valeur raisonnable, des valeurs supérieures signifient un spectre de fréquences médium plus fin.
Des valeurs inférieures à 1 signifient un spectre plus large.
Synth_RC
Essayez quelque chose comme b=5, f=5 ou b=10, f=10 ou b=15, f=15.
Synth_MOOG_VCF
Filtre toutes les fréquences supérieures à la fréquence de coupure (c'est un filtre 24 dB, 4 pôles, qui filtre avec une pente de -24 dB par octave au dessus de la fréquence de coupure), mais offre un paramètre supplémentaire pour régler la résonance du filtre, 0 signifie pas de résonance, et 4 correspond à des oscillations auto-entretenues (self oscillation).
Midi + Séquenceur
Synth_MIDI_TEST
Vous pouvez faire la même chose mais de manière beaucoup plus facilement dans artscontrol que manuellement dans aRts-builder.
Synth_SEQUENCE
Le module Synth_SEQUENCE donne des informations supplémentaires sur la position de la note qu'il joue, 0 signifie juste démarrée, et 1 signifie terminée.
Vous pouvez utiliser cette information avec Synth_PSCALE (voir plus bas).
Échantillons
Synth_PLAY_WAV
Interprète un fichier wav.
Il ne sera présent que si vous avez installé libaudiofile.
La lecture de l'échantillon débutera dès la création de la structure
Elle s'arrêtera à la fin de l'échantillon, et le paramètre finished passera alors à 1.
Le paramètre speed est utilisé pour jouer le fichier plus ou moins vite, où 1.0 est la vitesse normale (vitesse d'enregistrement).
Entrées/sorties son
Synth_PLAY
Vous n'aurez normalement pas besoin de ce module, tant que vous écrivez des applications autonomes.
Dans artsd, il y a normalement déjà un module Synth_PLAY, et en créer un nouveau ne fonctionnera pas.
Le module Synth_PLAY dirige vos données audio vers la carte son.
Les canaux droit et gauche devraient contenir les entrées normalisées.
Si votre entrée n'est pas entre -1 et 1, le signal sera écrêté.
Synth_RECORD
Vous n'aurez normalement pas besoin de ce module, tant que vous écrivez des applications autonomes.
Dans artsd, il y a normalement déjà un module Synth_RECORD, et en créer un nouveau ne fonctionnera pas.
Le module Synth_RECORD enregistre un signal depuis la carte son.
Les canaux droit et gauche devraient contenir l'entrée pour les canaux (entre -1 et 1).
Comme mentionné précédemment, on ne peut utiliser qu'un module Synth_RECORD, puisqu'il accède directement à la carte son.
Utilisez des bus si vous voulez enregistrer plusieurs sources audio.
Utilisez un module Synth_AMAN_RECORD pour obtenir une entrée dans artsd.
Pour que ça fonctionne, artsd doit fonctionner en mode full duplex
Synth_AMAN_PLAY
Ce module utilise le gestionnaire audio pour déterminer où le signal sera joué.
Le gestionnaire audio peut être contrôlé depuis artscontrol.
Pour le rendre encore plus intuitif à utiliser, il est préférable de donner un nom au signal.
Vous pouvez le faire avec title.
Une autre caractéristique du gestionnaire audio est qu'il se souvient où a été joué un signal pour la dernière fois.
Pour cela, il doit pouvoir distinguer les signaux.
C'est pourquoi vous devez aussi assigner quelque chose d'unique à autoRestoreID.
Synth_AMAN_RECORD
Le module Synth_AMAN_RECORD enregistre le signal audio depuis une source extérieure (ligne/microphone) à travers artsd.
La sortie est normalisée (entre -1 et 1).
Ce module utilise le gestionnaire audio pour déterminer où le signal sera joué.
Le gestionnaire audio peut être contrôlé depuis artscontrol.
Pour le rendre encore plus intuitif à utiliser, il est préférable de donner un nom au signal enregistré.
Vous pouvez le faire avec title.
Une autre caractéristique du gestionnaire audio est qu'il se souvient où a été enregistré un signal pour la dernière fois.
Pour cela, il doit pouvoir distinguer les signaux.
C'est pourquoi vous devez aussi assigner quelque chose d'unique à autoRestoreID.
Synth_CAPTURE
Tests
Synth_NIL
Ne fait rien.
Il est juste utile à des fins de test.
Synth_DEBUG
Vous pouvez l'utiliser pour déboguer.
Il affiche les valeurs en entier à intervalles réguliers (par exemples une seconde), combiné avec un commentaire que vous avez spécifié.
Vous pouvez ainsi vérifier que votre signal reste confiné dans une certaine plage, ou tout simplement s'il est présent.
Synth_MIDI_DEBUG
Vous pouvez l'utiliser pour déboguer l'arrivée des événements MIDI dans aRts.
La première ligne vous dirait que 100753 ms (c'est-à-dire 100 secondes) après le démarrage de MIDI_DEBUG, un événement MIDI on est arrivé sur le canal 0.
Ce message midi on avait une vélocité (volume) de 127, le plus fort possible.La ligne suivante montre l'événement de fin de note.[ TODO: this does not work currently, make it work, and do it via midi manager]
Synth_DATA
Crée un signal avec une valeur constante.
Oscillateurs et Modulation
Synth_FREQUENCY
Dans aRts, les oscillateurs ne nécessitent pas une fréquence en entrée, mais une position dans l'échantillon.
Cette position doit être comprise entre 0 et 1, ce qui correspond pour un objet Synth_WAVE_SIN standard à la plage 0 ..2*pi.
Pour générer des valeurs d'oscillation à partir d'une fréquence, un module Synth_FREQUENCY est utilisé.
Synth_FM_SOURCE
Utilisé pour la modulation de fréquence.
Mettez votre fréquence à l'entrée qui lui est dédiée, et envoyez un autre signal dans l'entrée du modulateur.
Réglez alors le niveau de modulation, par exemple 0,3.
La fréquence sera alors modulée par le modulateur.
Essayez simplement.
Ça sonne bien si vous y mettez une contre-réaction, ce qui signifie que vous prenez une combinaison du signal de sortie retardé d'un module Synth_FM_SOURCE (vous devez le relier à un oscillateur puisqu'il ne joue que le rôle d'un module Synth_FREQUENCY) et d'un autre signal pour obtenir de bons résultats.
Ça fonctionne bien en combinaison avec des oscillateurs Synth_WAVE_SIN.
Formes d' ondes
Synth_WAVE_SIN
Synth_WAVE_TRI
Oscillateur triangulaire.
Envoyez un signal pos d'un module Synth_FREQUENCY ou Synth_FM_SOURCE en entrée.
Vous obtiendrez une onde triangulaire.
Le signal pos spécifie une position dans l'onde, la plage 0 ..1 est modifiée en 0 ..2*pi de manière interne.
Soyez prudent.Le signal d'entrée doit se situer dans la plage 0 ..1 pour que le signal de sortie donne de bons résultats.
Synth_NOISE
Synth_WAVE_SQUARE
Oscillateur générant un signal carré.
Envoyez un signal pos d'un module Synth_FREQUENCY ou Synth_FM_SOURCE en entrée.
Vous obtiendrez une onde carrée.
Le signal pos spécifie une position dans l'onde, la plage 0 ..1 est modifiée en 0 ..2*pi de manière interne.
Soyez prudent.
Le signal d'entrée doit se situer dans la plage 0 ..1 pour que le signal de sortie donne de bons résultats.
Synth_WAVE_SOFTSAW
Synth_WAVE_PULSE
Oscillateur générant un signal de type impulsion - ce module est semblable dans l'esprit à l'oscillateur rectangulaire (Synth_WAVE_RECT), mais il permet de configurer le rapport haut/bas, grâce au paramètre dutycycle (rapport cyclique).
Envoyez un signal pos d'un module Synth_FREQUENCY ou Synth_FM_SOURCE en entrée.
Vous obtiendrez une onde en forme d'impulsions carrées.
Le signal pos spécifie une position dans l'onde, la plage 0 ..1 est modifiée en 0 ..2*pi de manière interne.
Soyez prudent.
Le signal d'entrée doit se situer dans la plage 0 ..1 pour que le signal de sortie donne de bons résultats.
Divers
Synth_COMPRESSOR
Ce module réduit les variations dynamiques du signal.
Par exemple des compresseurs sont utiles pour compenser les grandes variations de volume de quelqu'un parlant dans un microphone.
À peine le signal d'entrée excède un certain niveau (le seuil), le signal est comprimé.
Tout ce qui dépasse le seuil est simplement multiplié par un facteur qui est en prinicpe un nombre entre 0 et 1.
Finalement l'ensemble du signal est multiplié par le facteur de sortie.
Les arguments d'attaque et de relâchement retardent le début et la fin de la compression.
Utilisez -les si par exemple vous désirez quand même entendre le début bruyant du son d'une grosse caisse.
L'argument est en millisecondes, et une attaque ou un relâchement de zéro milliseconde est possible, mais peut provoquer un léger bruit.
Manuel de référence des modules d' interface
TODO when visual modules are more "finished".