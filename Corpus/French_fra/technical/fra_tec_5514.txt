# language_name_wals:	French
# language_name_glotto:	French
# ISO_6393:	fra
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	KDE4
# source:	https://object.pouta.csc.fi/OPUS-KDE4/v2/raw/fr.zip
# copyright_short:	http://opus.nlpl.eu/KDE4.php
# copyright_long:	http://opus.nlpl.eu/KDE4.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Les bases de UML
A propos de UML
Ce chapitre aborde un rapide aperçu des bases de UML. Veuillez noter que ceci n'est pas un tutoriel exhaustif. Si vous souhaitez apprendre plus à propos du langage de modélisation unifié (Unified Modelling Language), ou plus généralement sur les logiciels d'analyse et de conception, veuillez vous référez à l'un des nombreux livre à ce sujet. Il y a également de nombreux tutoriels sur Internet, qui vous donnera une bonne base de départ.
Le langage de modélisation unifié (UML) est un langage de diagrammes et de notations pour spécifier, visualiser et documenter des modèles de logiciels orientés objets. UML n'est pas une méthode de développement, ce qui veux dire que cela ne vous dis pas quoi faire en premier ni quoi faire ensuite ni encore comment structurer votre système, mais cela vous aide à visualiser votre conception et communiquer mieux avec les autres. UML est contrôlé par le 'Object Management Group '(OMG) et est le standard de l'industrie pour la description des modèles logiciels. re
UML est conçu pour les logiciels orientés objets et n'a que peu d'utilité pour d'autres méthodes de programmation.
UML est composé de nombreux éléments modèle qui représentent les différentes parties d'un système logiciel. Les éléments UML sont utilisés pour créer des diagrammes, qui représentent une partie, ou un point de vue du système. Les types de diagrammes suivant sont supportés par Umbrello:
Les diagrammes de cas d'utilisation montrent les acteurs (personnes ou autres usagers du système), les cas d'utilisation (les scenarii lorsqu'ils utilisent le système), ainsi que leur relations.
Les diagrammes de classes montrent les classes et leur relations.
Les diagrammes de séquences montrent les objets et leurs interactions, mettant en relief l'échange chronologique de message entre les objets.
Les diagrammes collaboratifs montrent les objets et leur interactions, mettant en relief les objets qui participent dans l'échange de message.
Les diagrammes d'états montrent les états, les changements d'états et les évènements d'un objet ou d'une partie du système.
Les diagrammes d'activités montrent les activités, les états et les changements d'états des objets et les évènements survenants dans certaines parties du système.
Les diagrammes d'états montrent les états, les changements d'états et les évènements d'un objet ou d'une partie du système.
Les diagrammes de classes montrent les classes et leur relations.
Les diagrammes de classes montrent les classes et leur relations.
Les éléments UML
Diagrammes de cas d' utilisation
Les diagrammes de cas d'utilisation décrivent les relations et dépendances entre un group de Cas d'utilisation et l'Acteur participant au process.
Il est important de noter, que les diagrammes de cas d'utilisation ne sont pas destinés pour représenter la conception, et ne peuvent donc décrire les entrailles du système. Les diagrammes de cas d'utilisation sont destinés à faciliter la communication avec les futurs utilisateurs du système, ainsi que le client, et sont particulièrement utiles pour déterminer les fonctionnalités requises pour le système. En quelque mots, les diagrammes de cas d'utilisation disent, ce Quoi le système doit faire, mais ne --ni ne peut-- spécifier Comment c'est réalisé.
Un example de diagramme de cas d' utilisation
Umbrello montrant un diagramme de cas d' utilisation
Umbrello montrant un diagramme de cas d' utilisation
Cas d' utilisation
Un Cas d'utilisation décrit --du point de vue des acteurs-- un group d'activités d'un système qui produisent un résultat concret et tangible.
Les cas d'utilisation sont des descriptions des interactions typique entre les utilisateurs d'un système et le système lui-même. Ils représentent l'interface externe d'un système et spécifient une forme de cahier des charges que le système doit réaliser ('quoi ', mais pas 'comment'!)
Lorsque vous travaillez avec les Cas d'utilisationss, il est important de se souvenir de quelques règles simples:
Chaque Cas d'utilisation est relié à un acteur au minimum
Chaque Cas d'utilisation a un initiateur (c. à d. un acteur)
Chaque Cas d'utilisation génère un résultat tangible (au sens business)
Les Cas d'utilisations peuvent également avoir des relations avec d'autres Cas d'utilisations. Les trois types de relation les plus courantes entre les Cas d'utilisationss sont:
lt; lt; inclusiongt; gt; qui signifie qu'un Cas d'utilisation prend place à l'intérieur d'un autre Cas d' utilisation
lt; lt; extensiongt; gt; qui signifie que dans certains cas, ou à certains points (appelés point d'extension) un Cas d'utilisation sera étendue par un autre.
Généralisation signifie qu'un Cas d'utilisation hérite des caractéristiques d'un Super -Cas d'utilisation, qui peut écraser ou ajouter ses caractéristiques à la manière de l'héritage de classes.
Acteur
Un acteur est une entité externe (en dehors du système) qui intéragit avec le système en participant (et souvent en initiant) un Cas d'utilisation. Les acteurs peuvent être des personnes physiques (par exemple les utilisateurs du système), d'autres systèmes informatisés ou des évènements extérieurs.
En fait, les acteurs ne représentent pas la personne ou le système physiquement, mais leur rôle. Ceci signifie que lorsque qu'une personne interagit avec le système de différentes manières (et ainsi assume différents rôles), elle se verra représentée par autant d'acteurs. Par exemple, une personne qui tient le support téléphonique et qui saisie les commandes d'un client dans le système sera représenté par un acteur Equipe de support et par un autre acteur Opérateur de saisie des commandes
Description de Cas d' utilisation
Les descriptions de Cas d'utilisation sont la partie narrative de ces derniers. Elles prennent généralement forme d'une note ou d'un document qui sont parfois liés au Cas d'utilisation, et qui explicitent les processus ou les activités du Cas d'utilisation.
Les diagrammes de classes
Les diagrammes de classes montrent les différentes classes qui font un système ainsi que les relations entre elles. Les diagrammes de classes sont dits diagrammes statiques car ils montrent les classes, accompagnées de leurs méthodes, attributs et relations statiques entre elles: telles classes connaissent telles classes ou telles classes font partie de telles autres, mais ne montrent pas les échanges de messages entre elles (appel de méthodes).
Un exemple de diagramme de classes
Umbrello montrant un diagramme de classes
Umbrello montrant un diagramme de classes
Classe
Une classe définit les attributs et les méthodes d'un ensemble d'objets. Tous les objets de cette classe (instances de la classe) partagent le même comportement, et ont le même ensemble d'attributs (chaque objet possède son propre ensemble). Le terme Type est parfois utilisé à la place de Classe, mais il est important de mentionner que ces deux choses sont différentes, et Type est un terme plus général.
En UML, les classes sont représentées par des rectangles, avec le nom de la classe, et peuvent parfois aussi montrer les attributs et les opérations de la classe dans deux autres compartiments à l'intérieur du rectangle.
Une classe en UML
Représentation graphique d'une classe en UML
Représentation graphique d'une classe en UML
Attributs
En UML, les attributs sont montrés avec au moins leur nom, et parfois leur type, leur valeur initiale et quelques autres propriétés. Les attributs peuvent aussi être affichés avec leur portée:
+ Pour les attributs publiques
# Pour les attributs protégés
- Pour les attributs privés
Les opérations
Les opérations (méthodes) sont aussi affichés avec au minimum leur nom, et peuvent aussi montrer leurs paramètres et les types retournés. Les opérations peuvent, à l'instar des attributs, afficher leur portée:
+ Pour les opérations publiques
# Pour les opérations protégées
- Pour les opérations privées
Association de classes
Les classes peuvent s'associer entre elles de différentes manières:
Généralisation
L'héritage est un des concepts fondamentaux de la programmation orientée object, par lequel une classe reçoit tous les attributs et les opérations de la classe dont elle hérite, et peut surcharger/ modifier certains d'entre eux, et également ajouter plus d'attributs et opérations pour elle même.
En UML, une association de type Généralisation entre deux classes les positionnent hiérarchiquement en représentant le concept d'héritage d'une classe par rapport à une classe de base. En UML, les généralisations sont représentés par une ligne connectant les deux classes, avec une flêche du côté de la classe de base.
Réprésentation graphique de la généralisation en UML
Réprésentation graphique de la généralisation en UML
Associations
Une association représente une relation entre les classes, et donne la sémantique commune ainsi que la structure de nombreux types de connexions entre objets.
Les associations sont les mécanismes qui permettent aux objets de communiquer entre eux. Elles décrivent les connexions entre différentes classes (les connexions entre les objets courant sont nommés connexion objet, ou lien.
Les associations peuvent avoir un rôle de spécification de l'utilité de l'association et peuvent être uni- or bidirectionnels (indique si les deux objets participant à la relation peuvent envoyer des messages aux autres, ou si seulement une d'elle connaît les autres). Chaque extrémité de l'association a de multiple valeur, qui dicte combien d'objets du côté de l'association peuvent se relier à l'objet de l'autre extrémité.
En UML, les associations sont représentés par des lignes connectant les classes participant à la relation, et peuvent aussi montrer le rôle et la multiplicité de chaque participants. La multiplicité est affiché au moyen d'une plage de valeurs non-négatives [min.. max], où l'étoile (*) pour le maximum représente l'infini.
Association UML
Représentation graphique d'une association UML
Représentation graphique d'une association UML
Les aggrégations sont un type spécial d'associations dont les deux classes participantes n'ont pas le même statut, mais représentent une relation globalisante. Une aggrégation décrit comment la classe qui prend le rôle du tout, est composé (possède) d'autres classes, qui prennent le rôle des parties de la globalité de l'aggrégation. Pour les aggrégrations, la classe qui passe pour le tout est toujours composé de plusieurs classes.
En UML, les aggrégations sont représentées par une association qui ont un rhomboèdre de chaque côté.
Représentation visuelle d'une relation d'aggrégation en UML
Représentation visuelle d'une relation d'aggrégation en UML
Les compositions sont des associations qui représentent de très fortes aggrégations. Ce qui signifie que les compositions forment aussi des relations globalisantes, mais ces dernières sont si fortes que les parties ne peuvent exister seules. Elles existent seulement à l'intérieur du tout, et la destruction de ce tout supprime les parties également.
En UML, les compositions sont représentés par un rhomboèdre solide de chaque côté.
Représentation visuelle d'une composition en UML
Les diagrammes de classes
Diagrammes de séquences
Les diagrammes de séquences montrent l'échange de messages (c. à d. les appels de méthode) entre les différents Objets, pour une situation spécifique et limitée dans le temps. Les diagrammes de séquences mettent particulièrement en relief l'ordre et l'aspect chronologique des messages qui sont envoyés aux objets.
Dans les diagrammes de séquences les objets sont représentés au moyen de lignes verticales pointillées, avec le nom des objets au-dessus. L'axe du temps est également vertical, et croît vers le bas, aussi les messages sont envoyés d'objet à objet par le biais de flèches portant le nom de l'opération et ses paramètres.
Diagramme de séquences
Umbrello affichant un diagramme de séquences
Umbrello affichant un diagramme de séquences
Diagrammes de collaborations
Les diagrammes de collaborations montrent les interactions entre les objets parties prenants d'une situation. Il s'agit plus ou moins de la même information montré par les diagrammes de séquences, mais ici l'intérêt est donné sur la manière dont les interactions se passent dans le temps, alors que les diagrammes de collaborations donnent les relations entre les objets et leur topologie en arrière plan.
Dans les diagrammes de collaborations, les messages envoyés d'un objet à un autre sont représentés par des flèches, montrant le nom du message, les paramètres, et la séquence du message. Les diagrammes de collaborations sont spécialement conçus pour montrer le flux ou la situation d'un programme spécifique et sont un des meilleurs types de diagrammes pour rapidement exposer ou expliquer un processus dans la logique du programme.
Collaboration
Umbrello montrant un diagramme de collaborations
Umbrello montrant un diagramme de collaborations
Diagramme d' états
Les diagrammes d'états montrent les différents états d'un objet au cours de sa vie, et les stimuli qui causent les changements d'état de l'objet.
Les diagrammes d'états voient les objets en tant que machines d'états or automates finis qui peuvent être en un état fini d'un ensemble d'états et qui peuvent changer d'état par un stimuli parmi un ensemble fini de stimuli. Par exemple un objet de type NetServer peut être en l'un des états suivants durant sa vie:
Prêt
Ecoutant
Travaillant
Arrêté
et les évènements qui peuvent provoquer les changements d'états de l'objet sont
L'objet est créé
L'objet reçoit un message Ecoute
Un client demande une connexion à travers le réseau
Un client termine sa requête
La requête est exécutée et terminée
L'objet reçoit un message Arrêt
etc
Umbrello montrant un diagramme d' états
Umbrello montrant un diagramme d' états
Etat
Les états sont les briques de construction des diagrammes d'états. Un état appartient à exactement une classe et représente un résumé des valeurs que les attributs d'une classe peuvent prendre. Un état UML décrit l'état interne d'un objet d'une classe particulière.
Notez que tous les changements d'un des attributs d'un objet ne doivent pas être représenté par un état mais seulement ceux qui peuvent affecter significativement le comportement de l'objet.
Il y a deux types spéciaux d'état: Début et Fin. Ils sont spéciaux dans le sens qu'il n'y a aucun évènement qui peut faire retourner un objet à son état Début, de même qu'il n'y a aucun évènement qui peut arracher un objet de son état Fin une fois qu'il a atteint cet état.
Diagramme d' activités
Les diagrammes d'activités décrivent la séquence des activités d'un système à l'aide des Activités. Les diagrammes d'activités sont une forme spéciale de diagrammes d'état, qui contiennent seulement (ou principalement) des Activités.
Exemple de diagramme d'activités.
Umbrello affichant un diagramme d' activités
Umbrello affichant un diagramme d' activités
Les diagrammes d'activités sont similaires aux diagrammes de flux procéduraux, à la différence près que toutes les Activités sont clairement attachés aux Objets.
Les diagrammes d'activités sont toujours associés à une Classe, une Operation ou un Cas d'utilisation.
Les diagrammes d'activités supportent les Activités séquentielles aussi bien que parallèles. Une exécution parrallèle est représentée par des icônes Fourche/ Attente, et pour les activités travaillant en parallèle, l'ordre dans lequel ils sont disposés n'est pas important (ils peuvent être exécutés en même temps ou l'un après l'autre)
Activité
Une Activité est une simple étape dans un processus. Une Activité est un état du système avec une activité interne et, au moins, une transition sortante. Les Activités peuvent aussi avoir plus d'une transition sortante si ces dernières ont des conditions différentes.
Les Activités peuvent former des hiérarchies, c'est à dire qu'une Activité peut être détaillée en plusieurs Activités, dans ce cas les transitions entrantes et sortantes doivent correspondre à celles du diagramme détaillé.
Eléments d' aide
il y a deux éléments en UMLqui n'ont pas de réel valeur sémantique pour le modèle, mais qui aide à clarifier des parties de diagramme. Ces éléments sont
Lignes de texte
Notes textuelles
Les lignes de texte sont utiles pour ajouter de courtes informations textuelles à un diagramme. Il s'agit d'un texte libre qui n'a aucune signification pour le modèle lui-même.
Les notes sont utiles pour ajouter plus d'informations détaillées à propos d'un objet ou d'une situation spécifique. Elles ont le grand avantage de pouvoir être ancré aux éléments UML afin de montrer que la note appartient à un objet spécifique ou à une situation
Diagrammes de collaborations
Diagrammes de séquences
Diagrammes de collaborations
Un example de diagramme de cas d' utilisation
Umbrello affichant un diagramme d' activités
Umbrello affichant un diagramme d' activités
En UML, les classes sont représentées par des rectangles, avec le nom de la classe, et peuvent parfois aussi montrer les attributs et les opérations de la classe dans deux autres compartiments à l'intérieur du rectangle.
Diagramme d' activités
Réprésentation graphique de la généralisation en UML
Réprésentation graphique de la généralisation en UML
Attributs
Réprésentation graphique de la généralisation en UML
Réprésentation graphique de la généralisation en UML
Réprésentation graphique de la généralisation en UML
Réprésentation graphique de la généralisation en UML
Réprésentation graphique de la généralisation en UML
Réprésentation graphique de la généralisation en UML