# language_name_wals:	French
# language_name_glotto:	French
# ISO_6393:	fra
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/fr.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Manuel PHP
Précédent
Chapitre 7.
Les types
Suivant
Un entier est un nombre de l 'ensemble des entiers naturels Z:
Z = {...., -2, -1, 0, 1, 2,...}.
Il est possible de spécifier les nombres entiers (integers) de toutes les manières suivantes: décimale (base 10), hexadécimale (base 16), octale (base 8) éventuellement précédé du signe moins (-).
Pour utiliser la notation octale, vous devez préfixer le nombre avec un zéro; pour utiliser la notation hexadécimale, vous devez préfixer le nombre avec 0x.
?php $a = 1234; # nombre entier en base 10 $a = -123; # nombre entier négatif $a = 0123; # nombre entier en base 8, octale (équivalent à 83 en base 10) $a = 0x12; # nombre entier en base 16, hexadécimale # (équivalent à 18 en base 10)?
Note:
En PHP, il n 'existe pas de type fraction.
1 / 2 se transforme en nombre à virgule flottante 0.5.
Si un nombre est hors de l 'intervalle de validité des entiers, il sera interprété comme un float.
?php $large_number = 2147483647; var_dump($large_number); / / affiche: int(2147483647) var_dump (0x80000000); / / affiche: float(2147483648) var_dump (25 / 7); / / affiche: float(3.5714285714286)?
?php $million = 1000000; $large_number = 50000 * $million; var_dump($large_number); / / affiche: float(50000000000)?
En PHP, il n 'y a pas de division entière.
1 / 2 sera un nombre 1agrave; virgule flottante (float) de valeur 0.5.
Avertissement
Malheureusement, il y a un bug dans le moteur (corrigé en 4.1.0), qui fait que PHP que fonctionne pas toujours bien lorsque des nombres négatifs sont utilisés.
Lorsque les deux opérandes sont positifs, il n 'y a pas de problèmes.
Par exemple: -50000 * $million, conduit à -429496728.
Pour explicitement convertir une valeur en integer, utilisez les opérateurs de transtypage (int) ou (integer).
Cependant, dans la plupart des situations, vous n 'en aurez pas besoin, car une valeur sera automatiquement convertie si un opérateur, un fonction ou tout autre élément du langage requiert un entier.
Reportez-vous à la section définition de type pour plus d 'informations sur les conversions.
FALSE devient 0 (zéro), et TRUE devient 1 (un).
Lors de conversion entre nombre à virgule flottante et un entier, le nombre sera arrondi à la valeur inférieure s'il est positif, et supérieure s'il est négatif (conversion dite 'vers zéro').
Si le nombre est hors de l'intervalle de validité des entiers, (généralement + / - 2.15e+9 = 2^31), le résultat est indéfinit, car les nombres à virgule flottante n 'ont pas assez de précision pour fournir une valeur exacte pour un entier.
Avertissement
Aucune alerte, même pas le plus petit message ne sera affiché dans ce cas.
Avertissement
Ne transformez jamais une fraction inconnue en entier, car cela peut conduire à des résultats irrationnels.
?php echo (int) ((0.1+0.7) * 10); / / affiche 7!?
Reportez-vous à la section des conversions de chaînes.
La conversion d 'autres types en entier est indéfinie.
Actuellement, PHP convertit d 'abord la valeur en booléen.
Attention
Mais, ne vous fiez pas à ce comportement, car il est susceptible de changer sans préavis!
Voir aussi:
Nombres de grande taille et Nombres à virgules flottantes.
Précédent
Sommaire
Suivant
Booléens
Niveau supérieur
Les nombres à virgule flottante