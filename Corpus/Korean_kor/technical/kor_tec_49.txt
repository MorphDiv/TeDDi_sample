# language_name_wals:	Korean
# language_name_glotto:	Korean
# iso639_3:	kor
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Kore
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/ko.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

영구적인 접속(Persistent connection)은 여러분의 스크립트가 종료되어도 SQL link를 닫지 않는 접속을 말한다. 영구적인 접속이 요청되면, PHP는 기존의 (이전에 열어 두었던) 동일한(identical) 영구적인 접속이 있는가를 검사한다. 만약 있다면 기존의 것을 사용하고, 없다면 새로운 link를 만든다. '동일한' 접속이란 같은 호스트에 같은 사용자명과 같은 암호를 사용한 접속을 말한다.
가끔 웹서버의 작동과 작업의 할당에 대해 잘 알고 있지 못한 사람들은 영구적인 접속이 사실은 별 것 아니라고 오해하기도 한다. 특히, 영구적인 접속이 동일한 SQL link에서 'user sessions'를 여는데 별 나을 것도 없다던가, transaction을 효율적으로 처리하는 것도 아니라다던가, 혹은 다른 어떤 특별한 것을 하는 것도 아니라고 한다. 사실, 이런 말들에 대해 명백히 말하자면, 영구적인 접속은 비영구적인 접속에 비해 어떠한 기능적인 향상도 주지 못한다.
왜?
이것은 웹서버의 동작 방식에 따라 다른 효과를 낸다. 여러분의 웹서버가 웹 페이지를 만들기위해 PHP를 이용하는데는 3가지 방법이 있다.
첫 번째 방법은 PHP를 CGI "wrapper"이 형태로 사용하는 것이다. 이 방법의 경우, 웹서버에 매 PHP 페이지가 요구될 때 마다, PHP 인터프리터의 실행이 만들어지고 종료된다. 따라서 매 요구가 종료될 때마다 인터프리터의 실행이 종료되므로, 실행 중 만들었던 (SQL link를 포함한) 모든 자원은 실행 종료와 더불어 해제된다. 이 경우 영구적입 접속을 사용하여 어떤 이득도 얻을 수 없다. 다르게 말하면 이 경우는 영구적인 접속을 해도 영구적이 아니다.
두 번째 방법은 가장 대중적인 방법인데, PHP를 다중프로세스(multiprocess) 웹서버의 모듈로 사용하는 것이다. (현재는 Apache가 유일하다.) 다중프로세스 서버는 보통 한 개의 부모(parent) 프로세스와, 이와 유기적으로 연결되어 웹 페이지를 실제로 만드는 작업을 하는 여러개의 자식(child) 프로세스들을 가지고 있다. 클라이언트로부터 들어오는 개별 요구는 다른 클라이언트의 요구를 처리하고 있지 않고 놀고있는 자식 프로세스로 넘겨진다. 이것은 동일한 클라이언트가 서버에 두 번째 요구를 보낼 때, 보통 처음과 다른 자식 프로세스에서 처리된다는 것을 의미한다. 이 경우 영구적인 접속을 사용하면 각각의 자식 프로세스들은 자신이 처음 요구받았을 때 SQL 서버에 접속하게 된다. 다른 페이지에서 SQL 서버에 접속 요구시는 이전에 만들어진 접속을 다시 사용하게 된다.
마지막 방법은 PHP를 멀티쓰레드(multithreaded) 웹서버의 플러그-인의 형태로 작동시키는 것이다. 현재 PHP4는 windows 환경에서 ISAPI 혹은 WSAPI, NSAPI의 방법을 방법을 사용하여 Netscape FastTrack, Microsoft's Internet Information Server (IIS), O'Reilly's WebSite Pro 등의 멀티쓰레드 웹서버에서 플러그-인으로 동작한다. 이 경우 기본 동작은 위에서 언급한 다중프로세스 모델과 동일하게 동작한다. 단, PHP3는 이와 같은 SAPI 형태를 지원하지 않는다.
영구적인 접속이 실제로 어떠한 기능적인 향상도 주지 못한다면, 이것을 사용해 어떤 이점이 있나요?
이것에 대한 간단한 답은 효율성이다. 영구적인 접속은 SQL 서버와의 link를 만드는 것에 따른 overhead가 클 경우에 유용하다. 이 overhead는 많은 요인에 따라 커지기도 하고 작아지기도 한다. 어떤 종류의 데이터베이스인가? 웹서버와 같은 컴퓨터에 데이터베이스 서버가 있는가? SQL 서버가 어떻게 사용되고 있는가? 등에 따라 크게 달라진다. 접속에 따른 overhead가 클 경우에 영구적인 접속은 여러분에게 적지 않은 도움을 줄 것이다. 이것은 자식 process에서 SQL 서버에 접속을 요청할 때 마다 접속을 만드는 대신, 이 프로세스가 종료될 때 까지 살아있는 한 개의 접속 만을 사용한다. 이것은 모든 영구적인 접속을 사용한 프로세스는, 그에 해당하는 한 대의 영구적인 접속을 가지고 있다는 것을 의미한다. 예를 들어 SQL 서버에 대하여 영구적인 접속을 사용하는 스크립트를 실행하였던 20개의 다른 자식 프로세스가 있다면, 아마도 각각의 자식 프로세스에대해 1개씩, 20개의 SQL 접속이 있을 것이다.
이 방법은 영구적 접속의 개수가 데이타베이스 서버가 허용하는 의 접속수를 초과해서 설정되어 있는 경우 문제가 될 수 있다. 만약 데이타베이스가 16개의 동시 접속을 허용하고, 이 서버 세션들이 모두 사용중이면, 17번째 thread는 연결을 시도하다가 실패할 것이다. 만약 여러분이 만든 스크립트에 이런 경우에 대비한 특별한 대책이 없이 재시도를 반복하다보면 가능한 모든 connection을 사용하여 복구할 수 없게 된다. 이런 abandoned 혹은 idle connection을 다루는 자세한 설명은 데이타베이스 문서를 참조하기 바란다.
중요한 언급 한가지! 영구적인 접속은 일반적인 접속에 일대일로 대응되도록 설계되었다. 이것은 스크립트의 다른 부분은 그대로 두고, 언제라도 비영구적인 연결을 영구적인 연결로 대치할 수 있다는 것을 의미한다. 이것으로 여러분은 아마도 스크립트의 효율을 향상시킬 수도 있을 것이다.