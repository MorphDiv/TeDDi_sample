# language_name_wals:	Turkish
# language_name_glotto:	Turkish
# iso639_3:	tur
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/tr.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Kullanım Kılavuzu
Önceki
Bölüm 6.

Sonraki
Integers


Arbitrary precision integers and Floating point numbers
Syntax


Örnek 6-1.

$a = 1234; # decimal number $a = -123; # a negative number $a = 0123; # octal number (equivalent to 83 decimal) $a = 0x1A; # hexadecimal number (equivalent to 26 decimal)
Integer overflow


$large_number = 2147483647; var_dump($large_number); / / output: int(2147483647) $large_number = 2147483648; var_dump($large_number); / / output: float(2147483648) / / this goes also for hexadecimal specified integers: var_dump (0x80000000); / / output: float(2147483648) $million = 1000000; $large_number = 50000 * $million; var_dump($large_number); / / output: float(50000000000)
Uyarý






var_dump( 25 / 7); / / output: float(3.5714285714286)
Converting to integer

However, in most cases you do not need to use the cast, since a value will be automatically converted if an operator, function or control structure requires a integer argument.

From booleans

From floating point numbers



Uyarý

echo (int) ((0.1+0.7) * 10); / / echoes 7!
From strings
See String conversion
From other types
Dikkat


However, do not relay on this behaviour, as it can change without notice.
Önceki
Baþlangýç
Sonraki

Yukarý
