# language_name_wals:	Spanish
# language_name_glotto:	Spanish
# ISO_6393:	spa
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/es.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Manual de PHP
Anterior
Siguiente
You can use the PDF functions in PHP to create PDF files if you have the PDF library by Thomas Merz (available at http: / /www.pdflib.com / pdflib / index.html; you will also need the JPEG library and the TIFF library to compile this.
These two libs also quite often make problems when configuring php.
Follow the messages of configure to fix possible problems.
If you use pdflib 2.01 check how the lib was installed.
There should be file or link libpdf.so.
Version 2.01 just creates a lib with the name libpdf2.01.so which cannot be found when linking the test programm in configure.
You will have to create a symbolic link from libpdf.so to libpdf2.01.so.).
Version 2.20 of pdflib has introduced more changes to its API and support for chinese and japanese fonts.
This unfortunately causes some changes of the pdf module of php4 (not php3).
If you use pdflib 2.20 handle the in memory generation of PDF documents with care.
Until pdflib 3.0 is released it might be unstable.
The encoding parameter of pdf_set_font() has changed to a string.
This means that instead of e.g.
4 you have to use 'winansi'.
If you use pdflib 2.30 the pdf_set_text_matrix() will have gone.
It is not supported any more.
In general it is a good advise to consult the release notes of the used version of pdflib for possible changes.
Since version 3.0 of pdflib you should configure pdflib with the option --enable-shared-pdflib.
Any version of PHP4 after March, 9th 2000 do not support versions of pdflib older than 3.0.
PHP3 on the other hand should not be used with version newer than 2.01.
Please consult the excellent documentation for pdflib shipped with the source distribution of pdflib.
It provides a very good overview of what pdflib capable of doing.
Most of the functions in pdflib and the PHP module have the same name.
The parameters are also identical.
You should also understand some of the concepts of PDF or Postscript to efficiently use this module.
All lengths and coordinates are measured in Postscript points.

There is another PHP module for pdf document creation based on FastIO 's.
ClibPDF.
It has a slightly different API.
Check the ClibPDF functions section for details.
Currently all versions of pdflib are supported.
It is recommended that you use the newest version since it has more features and fixes some problems which required a patch for the old version.
Unfortunately, the changes of the pdflib API in 2.x compared to 0.6 have been so severe that even some PHP functions had to be altered.
Here is a list of changes:
The Info structure does not exist anymore.
Therefore the function pdf_get_info() is obsolete and the functions pdf_set_info_creator(), pdf_set_info_title(), pdf_set_info_author(), pdf_set_info_subject() and pdf_set_info_keywords() do not take the info structure as the first parameter but the pdf document.
This also means that the pdf document must be opened before these functions can be called.
The above functions can and should also be replaced by pdf_set_info()
The way a new document is opened has changed.
The function pdf_open() takes only one parameter which is the file handle of a file opened with fopen().
There were some more changes with the release 2.01 of pdflib which should be covered by PHP.
Some functions are not required anymore (e.g. pdf_put_image()).
You will get a warning so don 't be shocked.
The pdf module introduces two new types of variables (if pdflib 2.x is used it is only one new type).
They are called pdfdoc and pdfinfo (pdfinfo is not existent if pdflib 2.x is used. pdfdoc is a pointer to a pdf document and almost all functions need it as its first parameter. pdfinfo contains meta data about the PDF document.
It has to be set before pdf_open() is called.
Nota:
The following is only TRUE for pdflib 0.6.
Read the pdflib manual for newer version
In order to output text into a PDF document you will need to provide the afm file for each font.
Afm files contain font metrics for a Postscript font.
By default these afm files are searched for in a directory named 'fonts' relative to the directory where the PHP script is located. (Again, this was TRUE for pdflib 0.6, newer versions do not not neccessarily need the afm files.)

The most difficult part is probably to create a very simple pdf document at all.
The following example should help to get started.
It uses the PHP functions for pdflib 0.6.
It creates the file test.pdf with one page.
The page contains the text "Times-Roman" in an outlined 30pt font.

Ejemplo 1.
Creating a PDF document with pdflib 0.6
?php $fp = fopen( "test.pdf", "w"); $info = PDF_get_info(); pdf_set_info_author($info, "Uwe Steinmann"); PDF_set_info_title($info, "Test for PHP wrapper of PDFlib 0.6"); PDF_set_info_author($info, "Name of Author"); pdf_set_info_creator($info, "See Author"); pdf_set_info_subject($info, "Testing"); $pdf = PDF_open($fp, $info); PDF_begin_page($pdf, 595, 842); PDF_add_outline($pdf, "Page 1"); pdf_set_font($pdf, "Times-Roman", 30, 4); pdf_set_text_rendering($pdf, 1); PDF_show_xy($pdf, "Times Roman outlined", 50, 750); pdf_moveto($pdf, 50, 740); pdf_lineto($pdf, 330, 740); pdf_stroke($pdf); PDF_end_page($pdf); PDF_close($pdf); fclose($fp); echo "A HREF=getpdf.php3 finished / A";?
The PHP script getpdf.php3 just outputs the pdf document.
?php $fp = fopen( "test.pdf", "r"); header("Content-type: application / pdf"); fpassthru($fp); fclose($fp);?
Ejemplo 2.
Creating a PDF document with pdflib 2.x
?php $fp = fopen( "test.pdf", "w"); $pdf = PDF_open($fp); pdf_set_info_author($pdf, "Uwe Steinmann"); PDF_set_info_title($pdf, "Test for PHP wrapper of PDFlib 2.0"); PDF_set_info_author($pdf, "Name of Author"); pdf_set_info_creator($pdf, "See Author"); pdf_set_info_subject($pdf, "Testing"); PDF_begin_page($pdf, 595, 842); PDF_add_outline($pdf, "Page 1"); pdf_set_font($pdf, "Times-Roman", 30, 4); pdf_set_text_rendering($pdf, 1); PDF_show_xy($pdf, "Times Roman outlined", 50, 750); pdf_moveto($pdf, 50, 740); pdf_lineto($pdf, 330, 740); pdf_stroke($pdf); PDF_end_page($pdf); PDF_close($pdf); fclose($fp); echo "A HREF=getpdf.php3 finished / A";?
The PHP script getpdf.php3 is the same as above.
Ejemplo 3. pdfclock example from pdflib 2.x distribution
?php $pdffilename = "clock.pdf"; $radius = 200; $margin = 20; $pagecount = 40; $fp = fopen($pdffilename, "w"); $pdf = pdf_open($fp); pdf_set_info_creator($pdf, "pdf_clock.php3"); pdf_set_info_author($pdf, "Uwe Steinmann"); pdf_set_info_title($pdf, "Analog Clock"); while($pagecount- - 0) {pdf_begin_page($pdf, 2 * ($radius + $margin), 2 * ($radius + $margin)); pdf_set_transition($pdf, 4); / * wipe * / pdf_set_duration($pdf, 0.5); pdf_translate($pdf, $radius + $margin, $radius + $margin); pdf_save($pdf); pdf_setrgbcolor($pdf, 0.0, 0.0, 1.0); / * minute strokes * / pdf_setlinewidth($pdf, 2.0); for ($alpha = 0; $alpha 360; $alpha += 6) {pdf_rotate($pdf, 6.0); pdf_moveto($pdf, $radius, 0.0); pdf_lineto($pdf, $radius-$margin / 3, 0.0); pdf_stroke($pdf);} pdf_restore($pdf); pdf_save($pdf); / * 5 minute strokes * / pdf_setlinewidth($pdf, 3.0); for ($alpha = 0; $alpha 360; $alpha += 30) {pdf_rotate($pdf, 30.0); pdf_moveto($pdf, $radius, 0.0); pdf_lineto($pdf, $radius-$margin, 0.0); pdf_stroke($pdf);} $ltime = getdate(); / * draw hour hand * / pdf_save($pdf); pdf_rotate($pdf, -(($ltime['minutes'] / 60.0)+$ltime['hours']-3.0)*30.0); pdf_moveto($pdf, -$radius / 10, -$radius / 20); pdf_lineto($pdf, $radius / 2, 0.0); pdf_lineto($pdf, -$radius / 10, $radius / 20); pdf_closepath($pdf); pdf_fill($pdf); pdf_restore($pdf); / * draw minute hand * / pdf_save($pdf); pdf_rotate($pdf, -(($ltime['seconds'] / 60.0)+$ltime['minutes']-15.0)*6.0); pdf_moveto($pdf, -$radius / 10, -$radius / 20); pdf_lineto($pdf, $radius * 0.8, 0.0); pdf_lineto($pdf, -$radius / 10, $radius / 20); pdf_closepath($pdf); pdf_fill($pdf); pdf_restore($pdf); / * draw second hand * / pdf_setrgbcolor($pdf, 1.0, 0.0, 0.0); pdf_setlinewidth($pdf, 2); pdf_save($pdf); pdf_rotate($pdf, -(($ltime['seconds'] - 15.0) * 6.0)); pdf_moveto($pdf, -$radius / 5, 0.0); pdf_lineto($pdf, $radius, 0.0); pdf_stroke($pdf); pdf_restore($pdf); / * draw little circle at center * / pdf_circle($pdf, 0, 0, $radius / 30); pdf_fill($pdf); pdf_restore($pdf); pdf_end_page($pdf);} $pdf = pdf_close($pdf); fclose($fp); echo" A HREF=getpdf.php3?filename=".$pdffilename. "finished / A";?
The PHP script getpdf.php3 just outputs the pdf document.
?php $fp = fopen( $filename, "r"); header("Content-type: application / pdf"); fpassthru($fp); fclose($fp);?
Anterior
Inicio
Siguiente

Subir
