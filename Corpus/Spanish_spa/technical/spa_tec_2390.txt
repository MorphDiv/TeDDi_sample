# language_name_wals:	Spanish
# language_name_glotto:	Spanish
# iso639_3:	spa
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	KDEdoc
# source:	https://object.pouta.csc.fi/OPUS-KDEdoc/v1/raw/es.zip
# copyright_short:	http://opus.nlpl.eu/KDEdoc.php
# copyright_long:	http://opus.nlpl.eu/KDEdoc.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Contribuciones a aRts
Cómo puede ayudar
El proyecto aRts admite la ayuda de muchos desarrolladores para hacer que las aplicaciones multimedia existentes los soporte, para escribir nuevas aplicaciones multimedia, y para mejorar el propio aRts.
Sin embargo, no es necesario ser programador para colaborar.
También se necesita ayuda de gente que haga pruebas de funcionamiento y envíe informes de fallos, traductores que adapten las aplicaciones y la documentación a otros idiomas, artistas que diseñen dibujos (especialmente para los módulos de artsbuilder), músicos que esriban módulos de ejemplo, y escritores que redacten la documentación.
Listas de correo
La mayoría de las discusiones sobre el desarrollo de aRts tienen lugar en dos listas de correo.
Es el lugar para tratar nuevas características e ideas de implementaciones o para pedir ayuda ante los problemas.
La lista de correo Multimedia de KDE trata temas generales del multimedia en KDE así como aplicaciones multimedia como Noatun y aKtion.
La lista también está archivada en http: / /lists.kde.org.
La lista de correo de aRts trata temas específicos de aRts, incluyendo el uso de aRts externo a KDE.
La lista está archivada en http: / /space.twc.de / ~stefan / arts-archive.
Estándares de programación
Para conseguir una lectura consistente de los códigos fuente, es importante mantener el mismo estilo de programación en todo el código de aRts.
Por favor, aunque escriba símplemente un módulo, trate de escribir y dar formato a su código fuente de acuerdo al estándar, así será más sencillo que otras personas mantegan esos archivos, y más fácil copiar porciones de un código a otro.
Nombres de las funciones miembro
Estilo Qt / Java.
Eso significa utilizar mayúsculas en los cambios de palabra, la primera letra en minúsculas y sin caracteres de subrayado.
Esto significa por ejemplo:
Miembros de clases
Los miembros de clases está en minúsculas, como menubar o button.
Cuando haya funciones de acceso, el estándar debe ser al estilo de &MCOP;, es decir, cuando haya un miembro largo foo, que no debe ser visible directamente, escriba funciones:
para leer y establecer el valor.
En ese caso, el valor real de foo debería quedar almacenado en _foo.
Nombres de clases
Todas las clases deben comenzar con cada palabra en mayúsculas, como en ModuleView, SynthModule.
Todas las clases que pertenezca a bibliotecas deben utilizar el espacio de nombres de aRts como Arts::Soundserver.
Las implementaciones de las clases &MCOP; deben ser llamadas Class_impl, como SoundServer_impl.
Parámetros
Los parámetros están siempre en minúsculas.
Variables locales
La variables locales están siempre en minúsculas, y pueden tener nombres como i, p, x, etc. donde sea apropiado.
Tabulación
Un tabulador tiene una longitud de 4 espacios.
Espacios en expresiones
Normalmente no es necesario utilizar espacios en expresiones.
Puede, de todas formas, usarlos entre el operados y sus operandos.
Sin embargo, si coloca un espacio antes de un operador (p.e. +), será necesario que coloque también uno después del mismo.
La única excepción se produce en las expresiones de tipo de lista (con,), donde sólo se debería poner un espacio depués de la ",", pero nunca antes.
Además, también es correcto omitir el espacio en este caso.
Los siguientes ejemplos muestran el uso correcto de los espacios:
Los siguientes ejemplos muestras como no se deben utilizar los espacios.
En las llamadas de función, después de if, while, for, swith y demás, no se debe escribir un espacio.
Nombres de los archivos fuente
Los archivos fuente no deben tener mayúsculas en el nombre.
Deben tener el nombre de la clase cuando implementen una sola.
Su extensión es .cc si se refieren a código independiente de Qt / GUI, y .cpp si se refieren a código dependiente de Qt GUI.
Los archivos &IDL; deben llamarse de una forma descriptiva de la colección de interfaces que contienen, también en minúsculas.
No es bueno, concretamente, llamar al un archivo &IDL; como la propia clase, puesto que el intercambiador de mcopclass y las entradas de información de tipo colisionarán.