# language_name_wals:	Spanish
# language_name_glotto:	Spanish
# iso639_3:	spa
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	KDEdoc
# source:	https://object.pouta.csc.fi/OPUS-KDEdoc/v1/raw/es.zip
# copyright_short:	http://opus.nlpl.eu/KDEdoc.php
# copyright_long:	http://opus.nlpl.eu/KDEdoc.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Portando aplicaciones a aRts
Utilizando artsdsp
La utilidad artsdsp, descrita con anterioridad, permite que la mayoría de aplicaciones antiguas que trabajan directamente sobre los dispositivos de audio, funcionen correctamente con aRts.
Las aplicaciones escritas para utilizar el Enlightenment Sound Daemon (esd) también funcionarán en la mayoría de casos ejecutando esd sobre artsdsp.
Esto ofrece una buena solución a corto plazo para portar aplicaciones existentes a KDE.
Sin embargo, no permite que la aplicación utilice todas las posibilidades de aRts, tales como el uso de módulos y flujos multimedia que no sean de audio digital.
Si la aplicación va más allá de ejecutar archivos de audio, es lógico añadir soporte nativo para aRts a la aplicación.
Es utilizar aRts también significa que la aplicación no tiene mucho trabajo que hacer, ya que puede utilizar las funciones de aRts para manejar codecs y diferentes tipos de medios, así como tener control sobre el hardware de sonido.
Añadiendo soporte nativo para aRts
La decisión sobre cual utilizar depende de una serie de factores, incluyendo el tipo de medio que se utilizará (sonido, MIDI, CD audio, etc.), las características requeridas a la API, y si se está programando en C++.
En la mayoría de los casos la elección debería ser relativamente obvia en base a las necesidades.
En los casos de portabilidad entre plataformas, las aplicaciones que deban poderse ejecutar en plataformas diferentes al KDE, no pueden depender de que aRts esté presente.
Un buen método para adaptarse a diferentes ambientes multimedia es el uso de conectores.
Si además la API de los conectores es abierta y está bien documentada permitiremos que otras personas diferentes al desarrollador de la aplicación puedan implementar un conecto para aRts.