# language_name_wals:	Spanish
# language_name_glotto:	Spanish
# ISO_6393:	spa
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	KDE4
# source:	https://object.pouta.csc.fi/OPUS-KDE4/v2/raw/es.zip
# copyright_short:	http://opus.nlpl.eu/KDE4.php
# copyright_long:	http://opus.nlpl.eu/KDE4.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Guía de referencia del programador de & kturtle; & logo;
Comentarios
Las líneas comentadas se resaltan en amarillo oscuro en el editor de código.
Comandos
Podemos ver una descripción detallada de todos los comandos que & kturtle; soporta aquí.
Números
Seguramente ya conocerás bastante acerca de los números. De hecho, la forma en la cual utilizaremos los números en & kturtle; no es muy diferente de como lo hacemos en el habla o las matemáticas.
Tenemos los llamados números naturales: 0, 1, 2, 3, 4, 5, etc. Los enteros negativos: -1, -2, -3, etc. Y los números con decimales 0.1, 3.14, 33.3333, -5.05, -1.0.
Los números pueden utilizarse en condicionales y cálculos matemáticos.. Y también pueden ponerse dentro de variables.
Cadenas
Comenzaremos con un ejemplo: escribir "Hola, soy una cadena." En nuestro ejemplo, escribir es un comando. Este comando toma como parámetro de entrada una cadena: "Hola, soy una cadena." (la forma de indicarle a & kturtle; que estamos trabajando con una cadena, es delimitar el texto en cuestión entre comillas dobles: "...").
& kturtle; soporta todas las operaciones matemáticas básicas: suma (+), resta (-), multiplicación (*), división (/) y los parentesis, (y).
Si queremos realizar un cálculo simple, bastará con algo como esto:
escribir 2004-12
Ahora veamos un ejemplo en el cual utilizamos los paréntesis escribir ((20 - 5) * 2 / 30) + 1 Así, las operaciones se agrupan entre paréntesis de modo que se van calculando en el orden establecido. En este ejemplo, primer se calculará 20 - 5, luego se multiplicará el resultado por dos y a eso se le dividirá por 30. Finalmente, al resultado obtenido anteriormente se le suma 1. El resultado final es 2.
Es un caso especial que solo funciona en condicionales. Lo que hace es cambiar 'verdadero 'por 'falso' y 'falso 'por 'verdadero'. Dicho de otro modo, niega la condición original.
Los comandos nos permiten pedirle a la tortuga de & kturtle;, que realice una acción determinada. De este modo, algunos comandos requieren tomar información (parámetros), mientras que otros devuelven información. A partir de aquí, y hasta el final de esta sección, explicaremos todos los comandos de & kturtle;, los cuales aparecerán resaltados en el editor de código en verde oscuro.
Moviendo la tortuga
Disponemos de varios comandos que nos permitirán desplazar a la tortuga a lo largo y ancho de la pantalla.
para
avanzar
avanzar hace que la tortuga se adelante X pixels. Cuando la pluma esté abajo, la tortuga dejará un trazo. avanzar puede abreviarse como avz
limpiar
retroceder X
retroceder hace retroceder la tortuga X pixels. Cuando la pluma esté abajo, la tortuga dejará un trazo. retroceder puede abreviarse como rtd.
restaurar
izquierda X
izquierda le pide a la tortuga que rote X grados hacia la izquierda. izquierda puede abreviarse como izq.
escribir
derecha X
derecha le pide a la tortuga que rote X grados hacia la derecha. derecha puede abreviarse como dch.
dirección (dir)
dirección (dir)
dirección X
dirección determina el ángulo de dirección de la tortuga medido en X grados, contando desde cero. Es decir, que no es relativo a la dirección anterior de la tortuga. dirección se puede abreviar como dir.
centro
centro
centro
centro desplaza la tortuga al centro del área de dibujo (lienzo).
ir
ir
ir X, Y
ir le indica a la tortuga que debe ir a al lugar (X, Y) del área de dibujo (lienzo). Esto significa, contando a partir del la esquina superior izquierda, X pixeles hacia la derecha e Y pixeles hacia abajo. Vale aclarar que al utilizar el comando ir, la tortuga no dibujará una línea en su trayectoría.
irx
irx
irx X
irx al utilizar este comando la tortuga se desplazará a X pixels contando desde la izquierda del área de dibujo, mientras que se mantendrá a la misma altura.
iry
iry
iry Y
irx al utilizar este comando la tortuga se desplazará a Y pixels contando desde la parte superior del área de dibujo, mientras que se mantendrá a la misma distancia de los bordes laterales.
Moviendo la tortuga
Disponemos de varios comandos que nos permitirán desplazar a la tortuga a lo largo y ancho de la pantalla.
irx
iry
La tortuga tiene una pluma
La tortuga tiene una pluma, y va dibujando una línea al desplazarse. Existen algunos comandos que controlan esta pluma. Aquí, explicaremos estos comandos.
levantarpluma
levantarpluma (lpl)
levantarpluma levanta la pluma del área de dibujo. Cuando la pluma está arriba la tortuga no trazará ninguna línea a su paso. El comando penup puede también abreviarse lpl.
bajarpluma
bajarpluma
bajarpluma (bpl)
bajarpluma presiona la pluma sobre el área de dibujo. Cuando la pluma está abajo la tortuga trazará una línea a su paso. El comando bajarpluma puede también abreviarse bpl.
bajarpluma
grosorpluma X
grosorpluma determina el grosor de la línea trazada por la tortuga en X pixeles. El comando grosorpluma puede abreviarse como apl.
levantarpluma
colorpluma R, V, A
colorpluma determina el color de la línea trazada por la tortuga. El comando colorpluma toma una combinación RGB (RVA) como parámetro de entrada. colorpluma puede abreviarse como cpl.
Comandos que controlan el área de dibujo
Tenemos varios comandos que podremos utilizar para controlar el área de dibujo.
tamañofuente
tamañolienzo (tad)
tamañolienzo X, Y
Con el comando tamañolienzo podemos redimensionar el área de dibujo. Toma dos parámetros de entrada, X e Y, los cuales representan respectivamente el ancho y el alto en pixeles. El comando tamañolienzo puede abreviarse como tad
colorlienzo (cad)
colorlienzo (cad)
colorlienzo R, V, A
colorlienzo define el color del área de dibujo. colorlienzo toma una combinación RGB como parámetro de entrada. canvascolor puede abreviarse como cad.
Comandos para la limpieza
Existen dos comandos que ordenarán un poco las cosas.
limpiar
limpiar (lmp)
Con limpiar dejaremos el área de dibujo totalmente en limpio. Sin embargo, todas las demás condiciones como ángulo de la tortuga, color del área de dibujo, etc. permanecerán intactas. Puede abreviarse el comando limpiar puede abreviarse como lmp
restaurar
restaurar
restaurar
restaurar limpia todo el entorno, a diferencia de limpiar que solo deja en limpio el área de dibujo. Luego de restaurar, todo vuelve al estado en el que & kturtle; estaba al iniciarse: la tortuga se posiciona en el medio del área de dibujo, el color de fondo es blanco, y el color de línea negro.
La tortuga es una imagen movil
Comenzaremos con una breve explicación sobre lo que significa una imágen móvil en este contexto: las imágenes móviles son pequeñas figuras que pueden moverse al rededor de la pantalla, como las que vemos en los juegos de computadora. Entonces, nuestra tortuga es una imagen móvil. Obtendremos más información en el glosario bajo imágenes móviles.
A continuación encontraremos una descripción detallada de todos los comandos que podemos utilizar para manejar las imágenes móviles.
[La versión actual de & kturtle; no soporta todavía el uso de otras imágenes móviles más allá de la tortuga. Pero esto puede cambiar en las próximas versiones.]
escribir
mostrartortuga hace la tortuga visible luego de haberla ocultado. Puede abreviarse al comando mostrartortuga como mt
ocultartortuga
ocultartortuga oculta la tortuga. Esto puede utilizarse si la tortuga no luciera bien dentro de nuestro dibujo. ocultartortuga puede abreviarse como ot
¿Esta tortuga sabe escribir escribir?
La respuesta es si, la tortuga puede escribir cualquier cosa que le pidamos.
escribir
escribir
escribir X
El comando escribir se utiliza para que la tortuga escriba algo sobre el área de dibujo. escribir acepta cadenas alfanuméricas como parámetro de entrada. Es posible concatenar los parámetros de escribir mediante el símbolo +. Veamos el siguiente ejemplo:
año = 2003 autor = "Cies" escribir autor + "comenzó a trabajar en el proyecto KTurtle en el año" + año + "y todavía disfruta haciéndolo"
tamañofuente
tamañofuente
tamañofuente X
tamañofuente determina el tamaño en pixels de la tipografía utilizada por escribir. tamañofuente toma una entrada numérica.
ir
ir
envolver
aleatorio X, Y
aleatorio es un comando que toma dos parámetro de entrada, X e Y, y devuelve un número. La X y la Y representa respectivamente el mínimo y el máximo que podrá tomar el valor de salida. Dicho valor de salida es un número dentro de ese intervalo cerrado. Veamos aquí un pequeño ejemplo: repetir 500 [x = aleatorio 1,20 avanzar x izquierda 10 - x] Utilizando el comando aleatorio podemos agregar un poco de incertidumbre a nuestro programa.
restaurar
para
escribir X
irx
si
si
restaurar
ir
Los números pueden utilizarse en condicionales y cálculos matemáticos.. Y también pueden ponerse dentro de variables.
Entrada y salida mediante diálogos
Un diálogo es una ventana emergente la cual puede proveer alguna información o pedir que se le pasen datos. & kturtle; se encarga de los diálogos mediante mensaje y pregunta
mensaje
mensaje
mensaje X
El comando mensaje toma una cadena alfanumérica como parámetro de entrada, generando un diálogo emergente que contiene la cadena dada.
mensaje « Cies comenzó a trabajar en el proyecto KTurtle en 2003 y todavía disfruta haciéndolo »
ir
ir
pregunta toma una cadena como parámetro de entrada y nos muestra un diálogo emergente con el texto dado, tal como lo hace mensaje. Sin embargo, también muestra una casilla que permitirá al usuario ingresar tanto números como cadenas alfanuméricas y pueden ser guardados en una variable. Por ejemplo, entrada = pregunta "Cual es tu edad?" salida = 2003 - in escribir "En 2003 tenías" + salida + "años." Cuando el usuario cancela el diálogo o no ingresa nada, la variable quedará vacía.
Asignaciones
Las variables no utilizadas, están vacías. Por ejemplo: escribir N No mostrará nada hasta que no declaremos a N. Si intentamos realizar operaciones matemáticas con variables no declaradas, obtendremos un error.
Ahora veamos un ejemplo algo más complejo: A = 2004 B = 25 C = A + B # el próximo comando muestra "2029" escribir C retroceder30 # el próximo comando muestra "2004 más 25" escribir A + "más" + B retroceder 30 #el próximo comando muestra "1979" escribir A - B En las primeras dos líneas, se declaran las variables A y B y se les asigna los valores 2004 y 25. En la tercer línea se le asigna la operación A + B (2029) a la variable C. El resto del código consiste en 3 escribir y dos retroceder 30
Estructuras de control
Las estructuras de control nos permiten & mdash; como su nombre sugiere & mdash; controlar bajo que condiciones se ejecutará cierta porción de nuestro código.
Los comandos correspondientes a las estructuras de control se resaltan en verde oscuro y negrita. Los corchetes se resaltan en verde claro.
Hagamos que la tortuga espere
Luego de haber programado durante algún tiempo en & kturtle;, nos daremos cuenta de que, a veces, la tortuga va demasiado rápido. Con el comando esperar, podemos hacer que la tortuga se detenga durante un lapso de tiempo determinado.
si
esperar X
esperar hace que la tortuga espere por X segundos. repetir 36 [avanzar 5 derecha 10 esperar 0.5] Esta porción de código, dibuja un circulo, pero la tortuga esperará medio segundo luego de cada paso. Esto da la impresión de la tortuga moviendose lentamente por la pantalla.
Ejecutar "si"
si
si
si condición [...]
El código entre corchetes solo se ejecutará si la condición es verdadera. Podemos leer más acerca de las condiciones en la sección condicionales de este manual. x = 6 si x & gt; 5 [escribir "x es mayor que cinco"] En la primer línea, x toma el valor 6. En la segunda, se plantea la condición x & gt; 5. Ya que esta condición se cumple, la estructura de control si permitirá que el código entre corchetes se ejecute.
En cualquier otro caso. El comando "sino"
restaurar
si condición [...]
A la estructura de control si se la ve con frecuencia acompañada de otra estructura de control llamada sino. El código que se encuentra entre corchetes luego de un sino solo se ejecutará si la condición planteada por el si no se cumple (es falsa). restaurar x = 4 si x & gt; 5 [escribir "x es mayor que cinco."] sino [escribir "x es menor que seis."] La condición pregunta si x es mayor que 5. Como x toma el valor 4 en la primera línea, la condición es false. Esto significa que el código entre corchetes luego del sino se ejecutará.
El bucle "mientras"
ocultartortuga
mientras condición [...]
La estructura de control mientras actúa en forma similar a si. La diferencia es que mientras generará un bucle que repetirá la ejecución de código siempre que question no sea falsa. x = 1 mientras x & lt; 5 [avanzar 10 wait 1 x = x + 1] En la primer línea, x toma el valor 1. En la segunda, se plantea la condición x & lt; 5. Ya que esta condición se cumple, la estructura de control mientras permitirá que el código entre corchetes se ejecute hasta que la condición se evalúe como falsa. En este ejemplo, el código entre corchetes se ejecutará cuatro veces, ya que el valor de x se incrementa en 1 en cada iteración.
El bucle "mientras"
restaurar
restaurar
si condición [...]
La estructura de control "para", un bucle que sabe contar
para
para
La estructura de control para es un bucle que sabe contar, & ie; para x = 1 a 10 [escribir x * 7 avanzar 15] Cada vez que el código entre corchetes se ejecuta, la variable numérica x se incrementa en 1 hasta que el valor de x llega a 10. El código entre corchetes muestra el valor de x multiplicado por 7. Una vez que el código termine de ejecutarse, veremos la tabla del 7 en el área de dibujo.
Los números pueden utilizarse en condicionales y cálculos matemáticos.. Y también pueden ponerse dentro de variables.
ir
ir
restaurar
irx
si
restaurar
Nuestras propias funciones con aprender
aprender se utiliza para crear funciones personalizadas. La nueva función puede tanto tomar parámetros de entrada como devolver valores de salida. Veamos entonces como podemos crear nuestras propias funciones. Crearemos la función circulo: aprender circulo x [repetir 36 [avanzar x izquierda 10]] Así, definimos el nombre de la función como circulo, y esperamos un parámetro de entrada numérico y ningún parámetro de salida. Ahora, podemos utilizar la función circulo en cualquier lugar de nuestro código. Veamos este ejemplo:
aprender circle X [repetir 36 [avanzar X izquierda 10]] ir 30,30 circulo 20 ir 40,40 circulo 50
En el próximo ejemplo veremos como crear una función que retorne un valor. restaurar aprender multiplicarPorSiMismo n [r = n * 1 r = n * n devolver r] i = pregunta "Ingresar un número:" escribir i + "multiplicado por si mismo es:" +multiplicarPorSiMismo i En este ejemplo, creamos una función llamada multiplicarPorSiMismo. Esta función pide que se le ingrese un número. Luego, lo multiplica por si mismo y devuelve el resultado con el comando devolver. El comando devolver es la forma que tenemos de decirle a una función que queremos que devuelva un valor determinado.
Esta es la guía de referencia para el programador de & kturtle; & logo;. Comenzaremos, en este capítulo, introduciendo brevemente los diferentes tipos de instrucciones. Luego, seguiremos uno a uno con la explicación de los comandos. Más adelante, nos referiremos a las variables, los operadores matemáticos, los condicionales y los estructuras de control. Finalmente, aprenderemos a crear nuestras propias funciones, mediante el comando aprender.
Los diferentes tipos de instrucciones
Como cualquier otro lenguaje, LOGO tiene diferentes tipos de palabras y símbolos. Aquí se explican brevemente las características de los distintos grupos y las diferencias existentes entre ellos.
Los comandos nos permiten pedirle a la tortuga (o & kturtle;) que realice una acción determinada. Algunos comandos requieren información (parámetros), mientras que otros devuelven información.
# avanzar solicita un número como parámetro (en este caso, pasaremos el 100): avanzar 100
Las cadenas se resaltan con rojo oscuro en el editor de código.
Las cadenas pueden utilizarse dentro de variables. Pero no es posible utilizarlas en condicionales y cálculos matemáticos..
Las cadenas se resaltan con rojo oscuro en el editor de código.
Nombres
A medida que utilicemos el lenguaje de programación & logo;, iremos generando nuestras propias estructuras. Con frecuencia, haremos uso de las variables, y en muchos casos invocaremos al comando aprender para crear nuestras nuevas funciones. Al crear un variable o una nueva función con aprender, tendremos que darle un nombre a nuestra nueva estructura.
Así, podremos utilizar cualquier nombre, siempre y cuando no este siendo ya utilizado por algún comando (es decir, un nombre no puede ser una palabra reservada para un comando de KTurtle). Por ejemplo, no es posible utilizar el nombre avanzar por ser este el nombre de un comando KTurtle. #Lo siguiente, nos daría un mensaje de error: avanzar = 20 #Como avanzar es un comando, lo que corresponde es: avanzar 20 Todo nombre debe comenzar con una letra. A partir de allí, pueden contener tanto letras, como números o guiones bajos (_).
Los números se resaltan con azul en el editor de código.
Más adelante veremos a las variables y al comando aprender en más detalle.
Las asignaciones se realizan con el símbolo =. En los lenguajes de programación entendemos el símbolo =, diciendo que tal variable toma el valor de, y no diciendo que tal variable es igual a. Decir que una variable es igual a, es más apropiado para el símbolo == que no es una asignación sino un condicional.
Las asignaciones se utilizan por lo general por dos motivos: (1) para dar contenido a una variable, y (2) para modificar el contenido de una variable. Por ejemplo:
x = 10 # la variable x toma el valor del número 10 W = "Mi edad es:" # la variable W toma ahora el valor de la cadena "Mi edad es:" # Ahora, imprimimos el valor de ambas variables en el área de dibujo. escribir W + x
Para ver más ejemplos podemos consultar la sección variables.
Símbolos matemáticos
Para una explicación más completa, podemos consultar la sección matemática.
Condicionales
Podemos establecer condiciones simples en las cuales la respuesta será simplemente verdadero o falso.
El uso de los condicionales se explica detalladamente en la sección condicionales
Operadores lógicos
Mediante los operadores lógicos se pueden combinar condicionales. Los operadores lógicos están representados por y, or y no.
El uso de los operadores lógicos se explica detalladamente en la sección questions
Los comentarios son líneas que comienzan con #. Por ejemplo: #Esto es un comentario escribir "Esto no es un comentario" #Así, la línea anterior no era un comentario, pero la próxima lo será: #escribir "Esto no se mostrará porque es un comentario." La utilidad de los comentarios reside tanto en la posibilidad de dar una breve explicación acerca del código, como en la de apartar momentáneamente ciertas líneas de la ejecución, sin tener que borrarlas.
Un comando que tira los dados por nosotros
Existe un comando que tira los dados por nosotros: aleatorio.
Variables
Las variables son letras o cadenas de texto que pueden ser utilizadas por el programador para guardar información dentro de ellas. Las variables que contienen números son llamadas variables numéricas, las que contienen cadenas de texto se llaman variables alfanuméricas.
Variables numéricas
Para comenzar, veamos un ejemplo x = 3 escribir x En la primera línea declaramos a x como una variable numérica que contiene el valor 3. En la segunda línea, se muestra el valor de x en el área de dibujo.
Observemos que si hubiéramos querido imprimir la letra x, deberíamos haber escrito:
escribir "x"
Variables alfanuméricas
En general, en los lenguajes de programación, las cadenas de texto se encierran entre comillas. Así, en escribir "Hola programador" la cadena esta encerrada entre comillas.
Las cadenas de texto pueden almacenarse en variables alfanuméricas. Las variables numéricas y alfanuméricas difieren en el tipo de contenido que almacenan (números y cadenas respectivamente) y a partir de allí en el tipo de operaciones que podemos realizar con ellas. De este modo, no podremos realizar operaciones aritméticas ni condicionales con variables alfanuméricas. Veamos ahora un ejemplo del uso de las cadenas de texto: x = "Hola" nombre = pregunta "¿Cual es tu nombre?" escribir x + nombre + ", ¿Como estamos hoy?". En la primera línea asignamos la cadena Hola a la variable alfanumérica x. En la segunda, a la variable alfanumérica nombre se le asigna la salida del comando pregunta. En la tercer línea el programa escribe una composición de las tres variables en el área de dibujo.
Este programa nos pide que ingresemos un nombre. Entonces, por ejemplo, si ingresamos Fernanda, el programa nos responderá Hola Fernanda, ¿Como estamos hoy?. Observemos que en nuestro código utilizamos el operador aritmético correspondiente a la adición (+). Este es el único operador aritmético que podemos utilizar con cadenas de texto, y la función que cumple es la de concatenar dichas cadenas.
¿La tortuga sabe matemáticas?
Si, la tortuga de & kturtle; puede resolver operaciones matemáticas como sumar (+), restar (-), multiplicar (*) y dividir (/). He aquí un ejemplo en el cual utilizamos todas ellas: a = 20 - 5 b = 15 * 2 c = 30 / 30 d = 1 + 1 escribir "a:" +a+ ", b:" +b+ ", c:" +c+ ", d:" +d Así, asignamos valores númericos a las variables a, b, c, y d mediante el simbolo de asignción =.
& kturtle; soporta todas las operaciones matemáticas básicas: suma (+), resta (-), multiplicación (*), división (/) y los parentesis, (y).
Establecer condiciones, obtener respuestas...
si y mientras son estructuras de control las cuales discutiremos en la próxima sección. En esta sección utilizaremos al comando si para explicar los condicionales.
Un ejemplo simple del uso de condicionales x = 6 si x & gt; 5 [escribir "Hola"] En este ejemplo la condición es: x & gt; 5. Si la condición se cumple (es verdadera), se ejecuta la parte del código que está entre corchetes. Los condicionales son una parte importante en los lenguajes de programación y generalmente se les utiliza en combinación con las estructuras de control como si. Todos los números y las variables numéricas pueden formar parte de condicionales.
He aquí todas los condicionales
Tipos de condicionales
a == b
iguales
La respuesta es verdadera si a es igual a b
a! = b
distintos
La respuesta es verdadera si a no es igual a b
a & gt; b
a es mayor que b
La respuesta es verdadera si a es es mayor que b
a & lt; b
a es menor que b
La respuesta es verdadera si a es es menor que b
a & gt; = b
a es mayor o igual que b
La respuesta es verdadera si a es es mayor o igual que b
a & lt; = b
a es menor o igual que b
La respuesta es verdadera si a es es menor que b
Operadores lógicos
Los operadores lógicos nos permiten agrupar varias condiciones en un único condicional. a = 1 b = 5 si (a & lt; 5) y (b == 5) [escribir "Hola"] En este ejemplo, utilizamos al operador lógico y para agrupar dos condiciones (a & lt; 5, b == 5). Si alguna de las dos condiciones agrupadas por el operador lógico y fuera falsa, toda la sentencia resultaría falsa. Así, el operador lógico yy requiere que ambas condiciones (tanto a izquierda como a derecha) sean verdaderas para que el condicional resulte verdadero. Adicionalmente, recordemos que ambas condiciones deben estar encerradas entre paréntesis.
Aquí se nos presenta una visión esquemática. Abajo encontraremos una explicación más detallada.
Operadores lógicos
yy
Ambos lados deben ser verdaderos para que la condición sea verdadera
oo
Si al menos una de las condiciones es verdadera, la sentencia es verdadera
no
yy
Cuando dos condiciones están agrupadas por el operador lógico yy, la sentencia debe ser verdadera a ambos lados del yy para que se considere verdadera. Por ejemplo: a = 1 b = 5 si ((a & lt; 10) and (b == 5)) yy (a & lt; b) [escribir "Hola"] En este ejemplo se utilizan dos operadores lógicos. El primero, opera sobre las dos primeras condiciones que se encuentran entre paréntesis, y el segundo opera sobre la tercer condición y el resultado de las dos anteriores.
oo
Cuando dos condiciones están agrupadas por el operador lógico oo, la sentencia debe ser verdadera a alguno de los dos lados del oo para que se considere verdadera. Por ejemplo: a = 1 b = 5 si ((a & lt; 10) oo (b == 5)) or (a & lt; b) [escribir "Hola"] Al igual que el ejemplo anterior, aquí se utilizan dos operadores lógicos. El primero, opera sobre las dos primeras condiciones que se encuentran entre paréntesis, y el segundo opera sobre la tercer condición y el resultado de las dos anteriores.
no
ir
no es un caso especial de operador lógico, ya que opera solamente sobre una condición. El efecto que el operador lógico no tiene sobre la condición, es la de negarla. a = 1 b = 5 si no ((a & lt; 10) yy (b == 5)) [escribir "Hola"] sino [escribir "Chau; -)"] Observemos que la condición que se plantea es verdadera. Sin embargo, la presencia del operador de negación, hace que la sentencia resulte falsa por lo que nuestro programa imprimirá Chau.
Si argumento [...] sino [...]
para punto de inicio a punto de corte[...]
para punto de inicio a punto de corte[...]
Moviendo la tortuga
mostrartortuga (mt)
mientras
avanzar (avz)
avanzar
retroceder (rtd)
retroceder
izquierda (izq)
izquierda
derecha (dch)
derecha
dirección
centro
ir
irx
iry
levantarpluma
bajarpluma
grosorpluma (apl)
grosorpluma
colorpluma (cpl)
colorpluma
centro
limpiar
restaurar
mostrartortuga
mostrartortuga
ocultartortuga
ocultartortuga
escribir
tamañofuente
aleatorio
mensaje
yy
esperar
sino
tamañolienzo
colorlienzo
Los condicionales se resaltan en celeste en el editor de código.
Los operadores lógicos se resaltan en purpura en el editro de código.
envolver
envolver
El comando envolver nos permite activar la (envoltura) del área de dibujo. En el glosario encontraremos más información acerca del concepto de envoltura.
desenvolver
desenvolver
desenvolver
El comando desenvolver nos permite desactivar la (envoltura) del área de dibujo. De nuevo, en el glosario encontraremos más información acerca del concepto de envoltura.
pregunta
pregunta
pregunta X