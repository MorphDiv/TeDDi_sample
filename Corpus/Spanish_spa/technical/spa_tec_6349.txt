# language_name_wals:	Spanish
# language_name_glotto:	Spanish
# iso639_3:	spa
# year_composed:	NA
# year_published:	2014
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	GNOME
# source:	https://object.pouta.csc.fi/OPUS-GNOME/v1/raw/es.zip
# copyright_short:	http://opus.nlpl.eu/GNOME.php
# copyright_long:	http://opus.nlpl.eu/GNOME.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Daniel Mustieles <daniel\.mustieles\@gmail\.com>, 2011-2013
Francisco Javier F. Serrador <fserrador\@gmail\.com>, 2012
Jorge González <jorgegonz\@svn\.gnome\.org>, 2007-2011_
external ref='figures/anjuta_logo.png' md5='82636133d39ac4a688facd76954b8b29'
Ayuda de Anjuta DevStudio.link
Anjutatext
Anjuta DevStudio
Johannes Schmid

Gestión de proyectos
Programar y código de navegación
Construir el proyecto
Programa de depuración
Editor de interfaces de usuario
Referencias
Configurar y usar las características integradas del editor
Autocompletado y llamadas
Autocompletado
El autocompletado sugiere automáticamente funciones y otros símbolos del código antes de que empiece a escribir, intentando que coincidan con los primeros caracteres escritos. Esto mostrará un un menú desplegable emergente donde puede seleccionar una coincidencia usando la tecla
Anjuta soporta el autocompletado para código escrito en C/C++, Vala, Javascript y Python. Tenga en cuenta que el autocompletado sólo funciona si Anjuta conoce los símbolos usados. Si está usando bibliotecas de C/C++ que no están configuradas usando
De todos modos, alguna sintaxis puede ser muy compleja para el analizador integrado y es posible que no pueda detectar que completado se necesita.
Codificación efectiva usando sugerencias de llamadas («calltips»)
Como generalmente es difícil recordar la firma de cada método o función usada en un proyecto, el editor mostrará automáticamente una pequeña descripción cuando escriba «(» después del nombre de una función y le mostrará la firma.
Encontrar rápidamente la información que necesita en la documentación de la API
Uso de referencia de la API
Examinar la referencia de la API
Para un acceso rápido a la referencia de la API de las bibliotecas, Anjuta incluye un examinador de la API. Si no lo ha hecho todavía, puede activarlo en las preferencias(
La referencia de la API tiene dos ventanas, una para buscar un símbolo concreto y el examinador para ver los documentos de la ayuda.
Saltar a la referencia de la API usando atajos en el editor
Si no está seguro de cómo se usa una función específica en el código en el que está trabajando, sitúe el cursor sobre el nombre de la función y use
Configurar y usar el sangrado automático para un estilo de programación consistente
Sangría automática
Configurar y usar la sangría automática
Configuración manual
La sangría automática se configura en las preferencias (
La gran desventaja de configurar la sangría manualmente es que todos los programadores que trabajen en un proyecto deben usar la misma configuración, o el resultado serán varios estilos diferentes en los mismo archivos. Para una solución mejor, consulte la siguiente sección.
A menos que se cambie la configuración de la sangría de manera explícita en las preferencias del modo de un archivo, se puede usar en lugar de los ajustes configurados para mantener la consistencia.
Modos
Los modos se usan para ayudar a los editores a detectar automáticamente el modo de sangrado que se se debe usar para un archivo concreto. Son especialmente útiles si varios desarrolladores trabajan en el mismo proyecto y usan entornos diferentes.
Anjuta soporta líneas de modo en los dos formatos usados por
Sangrado de bloques de código
Normalmente, las líneas nuevas se sangran adecuadamente de manera automática, pero puede editar el sangrado de las líneas existentes o de todo el código seleccionado con el elemento de menú
Formas eficientes de navegar por el código fuente
Navegación de código usando el símbolo del navegador
Uso del examinador de símbolos
El seguidor de símbolos le permite obtener una visión general de los símbolos usados en el proyecto. Aquí los símbolos se refieren a variables, funciones/métodos y clases, y su definición exacta depende del lenguaje de programación usado.
El examinador de símbolos tiene tres pestañas:



Una pulsación doble le lleva directamente a la definición del símbolo en el editor.
Navegación en el editor
En el menú emergente


Si quiere volver a la posición en el editor en la que usó los elementos mostrados en el menú
Señales de autoconexión
Añadir señales al editor de señales
Crear la señal de manipulador
C
Python
Vala
Primeros pasos con el editor de interfaces del usuario
Iniciar el editor del interfaces de usuario
Crear un archivo de interfaz de usuario nuevo
Abrir un archivo existente de interfaz de usuario
Añadir widgets
Organizar widgets en contenedores
Widgets comunes y para qué se usan
Añadir propiedades del widget
Generar código para widgets
Introducción
En un programa de IGU, algunas veces, algunos widgets son sólo importantes para generar eventos (ej. botones estáticos), mientras que otros son necesarios para obtener o mostrar datos al usuario (ej. una entrada de texto). En este último caso se debe generar cierto código para poder acceder a esos widgets en tiempo de ejecución. Con el complemento de glade,
Generación automática
Para generar automáticamente código para un widget, se deben cumplir algunas condiciones: el complemento de glade debe estar en ejecución y el archivo fuente que contendrá el código debe estar abierto. Para asegurarse de que el complemento de glade está en ejecución, es suficiente con abrir el archivo
Una vez que el complemento de glade esté en ejecución y que el archivo que contendrá el código esté abierto, simplemente pulse dos veces en un widget en el inspector de glade. El archivo que se está viendo se escaneará buscando algunos marcadores de comentarios («/* ANJUTA: Widgets declaration for application.ui - DO NOT REMOVE */» y «/* ANJUTA: Widgets initialization for application.ui - DO NOT REMOVE */»). Si se encuentran, el código se añadirá después de estos comentarios. Por lo tanto, para que esta característica funcione correctamente, es importante no modificar estos marcadores de comentarios.
«Backend» del proyecto de autotools.
Sébastien Granjoux
Philip Chimento
Complemento para el «backend» del proyecto de autotools
Este es el formato de proyecto más común el Linux. Se ha diseñado para distribuir paquetes de código fuente en un amplio rango de sistemas Unix. Si alguna vez ha instalado un programa usando
Generalmente es más difícil de usar como programador. Sin embargo, es el «backend» predeterminado de
Los archivos de autotools dan más información que un makefile, pero el «backend» no soporta todos los trucos posibles. Si encuentra un proyecto que no puede leer correctamente, se agradecerá que envíe un
Editar las propiedades de una carpeta de autotools.
Editar una carpeta de autotools
Estas propiedades le permiten definir propiedades comunes para todos los objetivos que pertenezcan a esta carpeta.

Las opciones que pasar al compilador de C si no se define el valor de un objetivo.

Estas opciones se pasan a cada compilación que invoque al preprocesador de C. Este valor se ignora si estas opciones están definidas para la carpeta.

Las opciones que pasar al compilador de C++ si no se define el valor de un objetivo.

Las opciones que pasar al compilador de Fortran 9x si no se define el valor de un objetivo.

Esto define las carpetas de instalación. Es necesario si quiere instalar los archivos en carpetas personalizadas.

Las opciones que pasar al compilador de Java si no se define el valor de un objetivo.

Las opciones que pasar al analizador Lex o Flex si no se define el valor de un objetivo.

Las opciones que pasar al enlazador si no se define el valor de un objetivo.

Las opciones que pasar al compilador de Objetive C si no se define el valor de un objetivo.

Las opciones que pasar al compilador de Vala si no se define el valor de un objetivo.

Las opciones que pasar al compilador de Bison o Yacc si no se define el valor de un objetivo.
Editar las propiedades de un proyecto de autotools.
Editar las propiedades de un proyecto de autotools
Estas son las propiedades del elemento raíz.

Esto es el «backend» del proyecto: Autotools. Se puede seleccionar otro «backend» pulsando en este botón. Esto puede ser útil si el «backend» actual tiene problemas para analizar sus archivos de proyectos.

El nombre del proyecto. Puede contener espacios.

Esto es la versión del proyecto

Esto es un URL que permite enviar informes de error, por ejemplo, una dirección de correo-e o un enlace a un sistema de seguimiento de informes de error. Es opcional.

Esto es el nombre del paquete de la distribución, no debe contener espacios. Es opcional.

Esta es la página principal del proyecto. Es opcional
Además, el elemento raíz funciona como una carpeta y tiene todas sus propiedades. Consulte la
Editar las propiedades de un objetivo de autotools
Editar un objetivo de autotools
Esta es una lista de todas las propiedades de objetivos usadas en un proyecto de autotools. Algunas de ellas no están disponibles en todos los objetivos.

Si está marcada, este objetivo no se instalad y sólo se construye al ejecutar pruebas.
Las opciones que pasar al compilador de C al compilar los archivos de fuente objetivos. Este valor sobreescribe los que se puedan definir eventualmente en la carpeta padre.
Estas opciones se pasan a cada compilación que invoque al preprocesador de C. Este valor sobreescribe los que se puedan definir eventualmente en la carpeta padre.
Las opciones que pasar al compilador de C++ al compilar los archivos de fuente objetivos. Este valor sobreescribe los que se puedan definir eventualmente en la carpeta padre.

Si está marcada, este objetivo no se instala. Lo pueden usar algunas utilidades usadas para construir otro objetivo o programas usados sólo por desarrolladores.

Si está marcada, no se añade el prefijo a las páginas del manual ni al ejecutable. Este prefijo se usa para proporcionar una alternativa a las herramientas del sistema.
Las opciones que pasar al compilador de Fortran 9x al compilar los archivos de fuente objetivos. Este valor sobreescribe los que se puedan definir eventualmente en la carpeta padre.

Si está marcada. incluir el objetivo en un paquete de distribución.

Define dónde se instala el objetivo. No es directamente la carpeta donde se instalar los archivos; es el nombre de una carpeta estándar de variables (bindir, sbindir, libdir, libexecdir, datadir, pkgdatadir, pkglibexecdir, includedir, mandir, infodir, docdir) o una variable definida en las propiedades de la carpeta.
Las opciones que pasar al compilador de Java al compilar los archivos de fuente objetivos. Este valor sobreescribe los que se puedan definir eventualmente en la carpeta padre.

Si está marcada, mantener la jerarquía de la carpeta del proyecto al instalar los archivos.
Las opciones que pasar al analizador Lex o Flex al generar los objetivos. Este valor sobreescribe los que se puedan definir eventualmente en la carpeta padre.

Especifique bibliotecas adicionales usadas por el objetivo. Útil para añadir bibliotecas no empaquetadas. Consulte la página
Las opciones que pasar al enlazador al enlazar los objetivos. Este valor sobreescribe los que se puedan definir eventualmente en la carpeta padre.

Especifique la sección del manual donde añadir la página del manual. Los nombres de secciones válidos son dígitos de «0» a «9» y las letras «l» y «n».
Las opciones que pasar al compilador de Objetive C al compilar los archivos de fuente objetivos. Este valor sobreescribe los que se puedan definir eventualmente en la carpeta padre.
Las opciones que pasar al compilador de Vala al compilar los archivos de fuente objetivos. Este valor sobreescribe los que se puedan definir eventualmente en la carpeta padre.
Las opciones que pasar al compilador de Bison o Yacc al compilar los archivos de fuente objetivos. Este valor sobreescribe los que se puedan definir eventualmente en la carpeta padre.
Tipo de proyecto de autotools
Tipo de proyecto de autotools
Hay diferentes tipos de objetivos disponibles.
Biblioteca compartida (Libtool)
Representa una biblioteca compartida por varios programas, enlazada en tiempo de ejecución. Es el tipo mas habitual de bibliotecas en Linux. En Windows se llaman bibliotecas enlazadas dinámicamente.
Usa el paquete Libtool. Su nombre debe empezar por «lib» y tiene la extensión «.la».
Módulo (Libtool)
Representa una biblioteca, denominada frecuentemente «complemento», enlazada explícitamente en tiempo de ejecución por el propio programa. Sólo se usa para cargar el código correspondiente a las características usadas.
Usa el paquete Libtool. Su nombre no necesita el prefijo «lib», pero debe tener la extensión «.la».
Biblioteca estática (Libtool)
Representa una biblioteca enlazada con el programa en tiempo de compilación. Dentro del ejecutable sólo se mantienen la funciones usadas.
Usa el paquete Libtool. Su nombre debe empezar por «lib» y tiene la extensión «.a».
Programa
Representa un programa compilado, por ejemplo, desde archivos fuente de C. Todos los hijos representan los archivos fuente compilados para generar el programa.
Módulo de Python
Representa un programa escrito en Python.
Módulo Java
Representa un programa escrito en Java.
Módulo LISP
Representa un programa escrito en LISP.
Archivos de cabeceras
Este objetivo le permite agrupar cabeceras y definir dónde se tiene que instalar.
Documentación man
Agrupa las páginas del manual que necesita el proyecto.
Documentación info
Agrupa las páginas de información que necesita el proyecto.
Datos variados
Agrupa archivos de datos necesarios para el proyecto como imágenes, descripciones de la IU, archivos de configuración, etc.
Script
Representa los programas que son scripts. Estos scripts sólo se instalan en la carpeta especificada. Si los scripts se generan, se necesitan reglas adicionales.
Construir objetivos o proyecto.
Construir objetivos
Un objetivo es un archivo creado desde archivos de fuentes. Generalmente es un programa o una biblioteca, pero también puede ser documentación si se necesita algún procesado, por ejemplo.
El comando de construcción compila todas las fuentes necesarias y las enlaza con otros posibles archivos, como bibliotecas, para crear el objetivo. Si algún archivo de fuentes ya está compilado y no se ha modificado, para ahorrar tiempo, no se vuelve a compilar. Hay varias maneras de lanzar una construcción.
Desde el
Desde el
Desde el
Pulse con el botón derecho del ratón para mostrar el
Desde el
Pulse con el botón derecho del ratón para hacer que aparezca el
Quitar los archivos contruidos.
Limpiar objetivos
Puede ser útil eliminar todos los archivos creados durante el proceso de construcción. Por ejemplo, si todas las dependencias no se tienen en cuenta y un archivo modificado no dispara una recompilación, como debería, eliminar todos los archivos solucionaría el problema. Existen varias formas de hacerlo:
Desde el
Desde el
Pulse con el botón derecho del ratón para mostrar el
Pulse con el botón derecho del ratón para mostrar el
Compilar archivos.
Compilar archivos
La mayoría de los lenguajes de programación le permiten compilar un archivo de fuentes individual. Se lee el archivo, se comprueban los errores y se convierte a un archivo objeto intermedio. La mayoría de los errores suceden en este paso, de tal forma que es útil compilar un archivo después de modificarlo, para comprobar posibles errores. Existen varias formas de hacerlo.
Desde el
Desde el
Pulse con el botón derecho del ratón para mostrar el
Desde el
Pulse con el botón derecho del ratón para mostrar el
No necesita guardar su archivo antes de compilarlo,
Diálogo de configuración de «autotools»
Diálogo de configuración de «autotools»
El diálogo

Si está seleccionada, el proyecto se regenerará completamente; de otra forma sólo se ejecutará el paso de configuración.

Puede tener varias configuraciones, cada una con sus opciones y su carpeta de construcción; esta caja de texto le permite ponerles un nombre. Generalmente tendrá ya definida una configuración «predeterminada», una opción «de depuración» que hace que los programas sean más fáciles de depurar (manteniendo variables intermedias y ordenando el código) y una opción «optimizada» que genera programas más rápidos pero que aumenta el tiempo de construcción. Puede definir configuraciones personalizadas adicionales.

Seleccione aquí la carpeta de construcción, que puede ser la carpeta del proyecto o una subcarpeta. Esto es especialmente útil cuando se cambia entre distintas configuraciones, para evitar tener que reconstruir el proyecto entero.
Con «autotools» no puede tener una configuración usando una carpeta diferente, si ya tiene una configuración usando la carpeta del proyecto. Antes debe quitarla.
Algunos proyectos de «autotools» no se pueden construir fuera de la carpeta del proyecto. Aún podrá usar diferentes configuraciones pero todas deben usar la carpeta de proyecto y todo se debe recompilar en cada cambio de configuración.

Esta caja de texto lista todos los argumentos de la línea de comandos que usa el paso de configuración («configure»). Todos los argumentos se separan por eespacios y deben estar entrecomillados si contienen espacios. Cada configuración rellena esta caja de texto con valores predeterminados que puede modificar.
Cada proyecto de «autotools» soporta una lista común de argumentos, pero puede tener argumentos específicos. Puede obtener una lista de todos los argumentos aceptados ejecutando
Configurar un proyecto de autotools y gestionar configuraciones.
Configurar un proyecto
Antes de compilar y construir archivos, un proyecto de «autotools» se tiene que configurar. Este paso es necesario para configurar las opciones globales, para comprobar que todas las bibliotecas y programas están instalados en su sistema y para generar los scripts de construcción adecuados.
Configurar el proyecto
Desde el
Mantenga la configuración predeterminada, seleccione una configuración nueva o cree una nueva. Puede inspeccionar y modificar todas las opciones de configuración. Para obtener más información consulte la
Pulse en
La configuración puede fallar si alguna biblioteca o programa no está instalado o si no tiene la versión correcta. El mensaje de error le dirá qué es lo que falta.
Cambiar la configuración
Desde el
El proyecto se configurará automáticamente antes de construir ningún archivo, si aún no se ha configurado.
Quitar la configuración
Es como limpiar el proyecto pero quita aún más archivos. Debe reconfigurar su proyecto para construirlo más tarde.
Desde el
Crear un paquete de distribución.
Crear un paquete de distribución
La forma estándar de distribuir un proyecto de «autotools» es en un archivador tar comprimido que contenga todos los arhivos de fuentes. El usuario tendrá que descomprimirlo, después compilarlo e instalarlo en su sistema usando la secuencia de comandos
Desde el
Instalar objetivos o proyecto.
Instalar objetivos
A menos que su proyecto sea muy sencillo, necesita algunos archivos de datos como los archivos de descripción de la interfaz de usuario. Estos archivos se copian generalmente en carpetas estándar y se leen desde ahí. Esto significa que no puede ejecutar su programa desde la carpeta de construcción. Debe instalarlo para que todos estos archivos se copien en la ubicación final, por ejemplo, en una subcarpeta de
Existen distintas posibilidades para instalar objetivos o un proyecto.
Desde el
Desde el
Pulse con el botón derecho del ratón para mostrar el
Pulse con el botón derecho del ratón para mostrar el
Si instala un programa en una carpeta del sistema debe usar
Complemento de construcción de «autotools»
Este complemento está orientado a los proyectos para «autotools» pero como usan «make» es útil para otro tipo de proyectos que también usen «make».
Comando «make» usado
Esta es una lista de objetivos usados por el complemento. Están implementados en todos los proyectos de «autotools», pero necesita implementarlos si está usando un makefile personalizado.

Úselo para compilar un archivo de fuentes. El nombre de archivo del objeto se obtiene reemplazando la extensión del archivo fuente con la extensión correspondiente del objeto.

Úselo para construir todos los objetivos en una carpeta.

Úselo para instalar todos los objetivos en una carpeta.

Úselo para eliminar todos los archivos construídos en una carpeta.

Úselo para construir un paquete distribuído, solamente llamado en la carpeta del proyecto.
«make» viene con las reglas predeterminadas, permitiéndolo compilar y enlazar un programa en C sin necesitar un archivo «makefile». Puede compilar un programa en C desde un único archivo de fuentes, sin «makefile» ni proyecto.
Dialogo de preferencias de construcción de «autotools».
Dialogo de preferencias de construcción de «autotools»
El cuadro de diálogo le permite configurar las opciones globales para construir archivos.



De forma predeterminada,

De forma predeterminada los mensajes de error y avisos están traducidos. No obstante tiene dos inconvenientes. Para poder reconocer los errores y avisos, la traducción de

Se muestran y resaltan los errores y avisos de construcción en la ventana de mensajes. Activando esta opción, también se resaltan en el editor.

Instalar programas necesita copiar archivos en carpetas del sistema que a menudo no son escribibles por el usuario. Si esta casilla está marcada, puede elegir usar
Usado para crear o editar un punto de parada
Diálogo «Punto de parada»

Esta es la posición del punto de parada. No se puede cambiar en un punto de parada existente. Puede establecer un punto de parada en una línea determinada, o al principio de una función. Use uno de los siguientes formatos:




Es una expresión que debería evaluar un valor booleano
Si deja el campo en blanco, la condición se considera siempre cierta (

El depurador también puede omitir un punto de parada cierto número de veces antes de detenerlo. Si el conteo de pasadas no es cero, entonces el depurador tendrá que pasar por el punto de parada este número de veces antes de detener la ejecución.
El conteo de pasadas tiene una prioridad mayor que la condición. Sólo cuando el contador llega a cero, el depurador evaluará la condición, de estar presente, y detiene la ejecución del programa.
Gestionar los puntos de parada
Puntos de parada
Los puntos de parada se usan para detener la ejecución de un programa en determinados puntos, para que se pueda examinar el estado del programa en esas ubicaciones.
Listar puntos de parada
Desde el
Esta vista tiene las siguientes columnas:
Ubicación
Esta es la posición del punto de parada en el archivo fuente. Cuando el punto de parada está configurado por el depurador puede obtener información adicional, tal como la función que contiene el punto de parada.
Dirección
Este campo se rellena con la dirección del punto de parada cuando está establecido por el depurador.
Tipo
Esto siempre muestra
Condición
Esta es la condición del punto de parada. Está vacía si no se ha definido ninguna condición.
Conteo de pasadas
Cuando el depurador no se está ejecutando, esta columna muestra el conteo de pasadas del punto de parada, o cero si no está definido.
Cuando el depurador está en ejecución, si el conteo de pasadas es cero, esta columna muestra el número de veces que se ha disparado este punto de parada. Se muestran ambos números si el conteo de pasadas no es cero. El conteo de pasadas es el segundo número.
Estado
Este es el estado del punto de parada. Puede ser
Pendiente:
el punto de parada no está establecido en su programa.
Permanente
el punto de parada está establecido (su número de ID se muestra entre paréntesis).
Temporal:
el punto de parada está establecido pero se eliminará de llegarse a él.
Todos los puntos de parada se mantienen a lo largo de diferentes sesiones en Anjuta, incluso si corresponden con ubicaciones inexistentes tales como un archivo de fuentes de una biblioteca compartida que aún no está cargada. En este caso sus estados se marcan como pendientes.
Establecer de puntos de parada
Desde el
Rellene la
Otra solución es usar la función de conmutación de punto de parada. Si no existe un punto de parada en la línea actual, añadirá uno. En caso contrario lo quitará.
Desde el
Editar puntos de parada
No puede cambiar la ubicación de un punto de parada; en su lugar cree un punto de parada nuevo. No obstante, puede cambiar la condición de parada o el conteo de pasadas. Para editar un punto de parada:
Seleccione un punto de parada en la ventana de
Pulse con el botón derecho del ratón en la ventana de
Cambie la
Quitar puntos de parada
Puede quitar un punto de parada usando la función de conmutar punto de parada descrita anteriormente. No obstante, si quiere quitar más de un punto de parada, o si el punto de parada está en otro archivo diferente del que está editando, puede usar la ventana de punto de parada:
Pulse con el botón derecho del ratón en la ventana de
Para quitar todos los puntos de parada:
Desde el
Activar y desactivar puntos de parada
A veces puede querer desactivar un punto de parada temporalmente en lugar de eliminarlo. Para desactivar o reactivar un punto de parada:
Pulse en la columna
Puede desactivar los puntos de parada usando:
Desde el
Examinar la información de la CPU.
CPU
Ver los registros de la CPU
Desde el
Los registros cuyos valores han cambiado desde la última parada están en rojo. Es posible cambiar el valor de cualquier registro pulsando en la columna de valor e introduciendo un valor nuevo.
Ver la memoria
Desde el
La primera columna muestra direcciones de memoria en hexadecimal, la segunda muestra el contenido de la memoria en hexadecimal, y la última columna muestra en contenido de la memoria en ASCII.
El espacio de direccionamiento, incluso de un microprocesador de 32-bit, es muy grande (4 gigabytes), de tal forma que es muy difícil ir a una dirección en particular con la barra de desplazamiento. Pero puede pulsar en el botón derecho del ratón y seleccionar
Ver el desensamblado
Desde el
La primera columna muestra las direcciones en hexadecimal. En la segunda columna puede tener una etiqueta que comienza al principio de la línea y termina con dos puntos o con una instrucción en lenguaje de ensamblador, sangrada por 4 espacios.
La posición en la ventana de desensamblado cambiará al contador valor del programa cuando se detenga el programa.
Usar un comando de depuración personalizado.
Comando personalizado
Se puede enviar un comando personalizado al depurador usando:
Desde el
Escriba el comando.
La salida del comando se muestra en la ventana de mensajes usada por el depurador.
El comando se envía directamente al depurador sin realizar ninguna comprobación. Por ejemplo, si configura un punto de parada como este, no aparecerá en la ventana
Examinar los datos del programa.
Examinar datos
Controlar la ejecución del programa.
Controlar la ejecución
Evaluar expresiones y modificar variables.
Examinar expresiones
Inspeccionar una expresión y modificar una variable
Mientras esté depurando un programa, puede buscar el valor de una expresión o variable si el programa está parado. A veces, también es útil cambiar el valor de la variable.
Desde el
Si la expresión es un nombre de variable, puede cambiar su valor pulsando en la columna
Examinar información adicional del programa.
Información variada
El depurador le puede proporcionar información variada acerca del programa mientras este se está ejecutando.
Ver bibliotecas compartidas
Desde el
Esto abrirá una ventana que listará todas las bibliotecas compartidas que el programa ha cargado y sus ubicaciones en memoria. También muestra si cada tabla de símbolos de la biblioteca está cargada o no.
Ver señales
Desde el
Esto lista todas las señales disponibles con una pequeña descripción y tres columnas para especificar qué hacer al recibir una señal:
Detener
El depurador detiene el programa en ejecución cuando el programa recibe esta señal.
Imprimir
El depurador muestra la señal recibida.
Pasar
El depurador pasa la señal al programa.
El menú contextual que se muestra cuando pulsa con el botón derecho del ratón tiene todos sus elementos desactivados porque las funciones correspondientes no están aún implementadas.
Examinar variables locales.
Variables locales
Las variables locales del marco actual (la función actual en la uqe el control del programa está presente) se muestran en la ventana
Listar las variables locales
Desde el
Todas las variables locales se muestran en una vista de árbol con los hijos representando estructuras o miembros de vectores («arrays»).
Variable
El nombre de la variable.
Valor
El valor de la variable.
El tipo de la variable.
Cambiar el valor de una variable
En la ventana
Escriba el nuevo valor.
Diálogo «Acoplar al proceso»
Diálogo «Acoplar al proceso»
El diálogo

Si está marcada, oculta las rutas de los comandos en el proceso.

Si está marcada, oculta los argumentos de línea de comandos del proceso.

Si no está marcada, los procesos se muestran en una lista. Si está marcada, los procesos se muestran en árbol.
Iniciar un programa con el depurador.
Depurar un programa
Iniciar un programa en el depurador.
El programa actual se define en el diálogo
Desde el
Un programa puede ser más difícil de depurar si está muy optimizado o si falta información para su depuración. Si la información de optimización y depuración están activadas se define en el paso de configuración. Generalmente existe una configuración de depuración disponible que desactiva la optimización e incluye toda la información de depuración. Anjuta muestra un aviso si no se está usando esta configuración. Para obtener más información consulte la
Depurar una aplicación en ejecución
El depurador se puede usar en un programa que ya está en ejecución.
Desde el
Seleccione un proceso en el diálogo
Depurar una aplicación remota
El depurador se puede usar para depurar una aplicación que se esté ejecutando en otro equipo conectado mediante una conexión TCP o serie.
Desde el
Seleccione el tipo de conexión con la aplicación remota,
Para una conexión TCP, rellene los campos
Para una conexión serie, rellene la caja de texto de debajo con el nombre del dispositivo serie, por ejemplo
Pulse
Detener el depurador
Se puede parar el depurador y el programa en cualquier momento usando:
Desde el
Examinar la pila.
Pila
Listar los marcos de la pila
Un marco de la pila es un área de la pila asociado a cada llamada de función. Lista todas las funciones y sus argumentos en la secuencia en la que se llamaron. Cada marco de la pila se numera comenzando por 0 para la función actual. Sólo puede ver los marcos de la pila mientras el depurador se está ejecutando.
Un programa se puede componer de varios hilos. Todos estos hilos se ejecutan de forma independiente y cada uno tiene sus propios registros, su propia pila y sus propias variables locales, pero comparten las variables globales.
Desde el
Las pilas se muestran en una vista de árbol con sus hilos correspondientes como padres y mostrando la siguiente información:
Activo
Contiene una flecha amarilla para representar el marco activo de la pila. De forma predeterminada es el marco 0, la función actual. Todas las evaluaciones y variables locales son relativas al marco seleccionado. Puede cambiar el marco activo de la pila para examinar las variables locales en otras funciones.
Hilo
Esto es el número correspondiente a cada hilo.
Marco
Este es el número de marco, comenzando por 0, de la función actual. La primera función de su programa,
Archivo
El nombre del archivo que contiene la función correspondiente a este marco.
Línea
El número de línea de la función correspondiente a este marco.
Función
El nombre de la función correspondiente a este marco.
La dirección de la función correspondiente a este marco.
Argumentos
Los argumentos de la función.
Cambiar el marco actual de la pila o hilo
En la ventana
Pulse con el botón derecho del ratón y seleccione
Pulsar sobre el marco de una pila en el mismo hilo solo cambia el marco de la pila, permitiendo ver otras variables locales. Pero hacerlo en otro hilo cambiará tanto el marco de la pila como el hilo. Los valores de los registros serán diferentes y el depurador se reiniciará en el hilo seleccionado.
Ver la función actual
Pulse dos veces o pulse con el botón derecho en
Obtener un seguimiento de la pila
Pulse con el botón derecho en la ventana
Parar y continuar.
Parar y pasos
Al igual que una sesión de edición de vídeo, el programa se puede ejecutar a cámara lenta con la posibilidad de ir hacia adelante, pausarlo, detenerlo, etc. Esto es esencial para seguir el comportamiento del programa. Aunque no puede ir hacia atrás.
Avanzar
Desde el
El avance simple ejecuta solo una sentencia del programa (desde el lugar en el que se ha detenido) y devuelve el control. Si la sentencia ejecutada contiene una función, el depurador intenta avanzar dentro de las funciones (en la secuencia en la que se ejecutan). Una vez que la sentencia se ha ejecutado y se devuelve el control, puede estudiar el estado de su programa.
Si la
Avanzar sobre
Desde el
«Avanzar sobre» es similar a «avanzar» con la excepción de que no se detiene en ninguna función dentro de la declaración en ejecución.
Si la
Avanzar al final
Desde el
Avanzar al final ejecuta la función actual hasta que vuelve a la función que la llamó.
Ejecutar y continuar
Desde el
Este comando reinicia el programa y lo deja ejecutándose hasta que encuentra un punto de parada o el programa termina.
Ejecutar hasta
Desde el
Reinicia el programa y lo ejecuta hasta que se llega a la línea o la dirección (si la
Detener el programa
Desde el
Interrumpe el programa y devuelve el control al depurador, permitiendo realizar tareas de depuración como inspeccionar datos o añadir puntos de parada.
Trucos y consejos para el depurado.
Consejos para el depurado
Corregir errores críticos de Glib/GTK+
Algunas veces puede ser difícil seguir dónde suceden los errores críticos de GLib, ya que no detienen el programa. Puede configurar el programa para deternerse tan pronto como obtenga un error crítico de GLib, ajustando la variable de entorno
Abra la
Pulse el signo más junto a
Pulse
Rellene el
Pulse
Ejecute el programa con el depurador seleccionando
Use el programa hasta que suceda el error crítico.
Cuando el depurador detenga su programa, mire la
La función superior con el número 0 está en GLib, de tal forma que tiene que buscar hacia abajo en la pila. Generalmente el error viene de la primera función en su programa.
Monitorizar expresiones y variables.
Vigilar expresiones
Vigilancia de expresiones, o vigilancias para acortar, son expresiones que el depurador evalua e imprime su resultado cada vez que el programa se detiene; por ejemplo, después de cada
Lista de expresiones vigiladas
Desde el
Al igual que las variables locales, las expresiones vigiladas se muestran en un árbol con hijos usado para representar estructuras o elementos de un vector.
El nombre de la variable o de la expresión.
El valor de la variable o de la expresión.
El tipo de la variable o del resultado de la expresión.
Actualizar vigilancias
Las expresiones vigiladas se pueden actualizar automáticamente cuando el detiene el programa o a petición del usuario.
Para establecer una expresión para vigilar su actualización automática:
En la ventana
Para actualizar una expresión vigilada manualmente:
En la ventana
Para actualizar todas las expresiones a la vez manualmente:
En la ventana
Añadir una vigilancia a una expresión
Para añadir una expresión a la lista de vigilancias:
Desde el
Introduzca la expresión para vigilar. Marque
Una expresión se puede evaluar y añadirse como vigilancia así:
Desde el
Pulse el botón
Quitar una vigilancia
Puede quitar una expresión de la lista de vigilancias.
En la ventana
Se pueden quitar todas las vigilancias al mismo tiempo
En la ventana
Si una expresión vigilada se corresponde con una variable, entonces puede cambiar su valor.
En la ventana
Introducir un valor nuevo.
«Backend» de la carpeta del proyecto
Complemento de la carpeta de proyecto para el «backend»
Este es el «backend» de proyecto más simple. No hay ningún archivo de proyecto. Funciona como un visor de archivos, considerando todos los archivos cuya extensión coincida con las típicas de código fuente (por ejemplo
Este «backend» es una solución útil si su proyecto no tiene su «backend» correspindiente en
No es posible añadir o cambiar cualquier cosa en un proyecto usando este «backend». Pero si su crea un archivo de código fuente en la carpeta del proyecto, con la extendión adecuada, se añadirá automáticamente.
Todos los temas de la ayuda.
Índice_
external ref='figures/anjuta-in-action.png' md5='a31f1c85a4a14032fcd30ab6f6d6b3c0'
Introducción al Entorno integrado de desarrollo



Se espera que se divierta usando
La siguiente captura de pantalla ilustra algunas cosas que encontrará en

Ventana principal de
Características de líneas de modos de Emacs soportadas.
Líneas de modo Emacs
Esta línea de modo es un comentario en la primera línea del archivo, compuesta por una lista de nombres de variables seguida de
Una línea de modo de
/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*- */
Anjuta sólo soporta las siguientes variables.

Establecer a

Número de espacios correspondientes a un carácter de tabulación.

Número de espacios usados para sangrar código en C.
Características de líneas de modos de Vim soportadas.
Líneas de modo Vim
Esta línea de modo es un comentario en la primera línea del archivo que tiene que empezar por
Una línea de modo de
/* vim: set noet ts=4 sw=4: */


Usar espacios para sangrar.


Usar tabulador para sangrar.






«Backend» para proyecto Makefile
Complemento de proyecto Makefile para el «backend»
«makefile» es probablemente el método más común de construir software en todo tipo de plataformas. Un «makefile» contiene una lista de reglas describiendo qué comandos se deben ejecutar para poder generar un objetivo de una lista de dependencias. Al construir un programa, el objetivo es un archivo objeto y las dependencias son los archivos de fuentes. El objetivo de una regla puede ser una dependencia de otra, permitiendo encadenar varias reglas para poder crear un objetivo final.
Es una herramienta general de bajo nivel, haciendo que sea difícil encontrar todos los archivos de fuentes y objetivos de un proyecto. De tal forma que
Si el «backend» del proyecto no es capaz de encontrar todos los archivos de fuentes, puede intentar usar la carpeta del «backend» en su lugar. No reconoce ningún objetivo pero debería obtener todos los archivos de fuentes.
Cambiar las propiedades o añadir o quitar objetivos y archivos de fuentes está desactivado en este «backend», ya que la edición automática del «makefile» no está implementada. Se debe cambiar usando un editor de textos. No obstante al guardar el «makefile» se actualizará automáticamente.
Importar un proyecto existente.
Importar un proyecto

Desde el
Seleccione
O seleccione
Después de seleccionar un proyecto existente, se debe rellenar la caja de texto

Añadir una carpeta a un proyecto.
Añadir una carpeta
Una carpeta le permite agrupar varios objetivos, pudiendo establecer propiedades comunes a todos ellos. Generalmente se corresponde con una carpeta.
Seleccione el grupo o el programa donde quiere añadir el grupo nuevo en la
O desde el
Introducir un nombre de grupo nuevo.
Generalmente los nombres de los grupos están restringidos a letras, dígitos y el guión bajo, así que es mejor evitar otros caracteres.
Puede seleccionar otro grupo en la parte inferior de la
Cuando haya elegido el padre e introducido el nombre, pulse en el botón
Añadir o quitar carpetas de un proyecto.
Gestionar carpetas
Quitar carpetas de un proyecto.
Quitar una carpeta
Seleccione la carpeta que quiere quitar en la
Confirme que quiere quitarla. Esto sólo quitará la carpeta de los archivos del proyecto, no se eliminarán carpetas ni archivos del disco.
Añadir una biblioteca personalizada a un objetivo.
Añadir una biblioteca personalizada
Es más fácil usar una biblioteca empaquetada, lo que es muy habitual en Linux; compruebe si este es el caso
Para poder usar una biblioteca en C, debe indicar al compilador dónde se encontran los archivos de cabecera, y decirle al enlazador dónde están las bibliotecas necesarias. El problema es que su programa puede que no compile en otro equipo si las cabeceras y las bibliotecas están en otra ubicación.
Seleccione la carpeta que contiene el programa donde quiere añadir la biblioteca en la
O desde el
Si los archivos de cabecera están instalados en una ubicación estándar (
Puede tener que expandir el botón
Después, necesita añadir la biblioteca a un objetivo. Seleccione el objetivo donde quiere añadir la biblioteca en la
Debe establecer la propiedad
Si la biblioteca no está en una carpeta estándar,
Añadir o quitar bibliotecas de los proyectos objetivo.
Gestionar bibliotecas
Quitar un biblioteca personalizada de un objetivo.
Quitar una biblioteca personalizada
Seleccione el objetivo que tiene la biblioteca que quiere quitar en la
Quitar la biblioteca desde las propiedades de las
Añadir un conjunto de bibliotecas a un objetivo.
Añadir bibliotecas empaquetadas
En Linux, la mayoría de las bibliotecas se distribuyen con datos adicionales almacenados en un archivo
Seleccione el programa donde quiere añadir la biblioteca nueva en la
O desde el
Debe seleccionar el objetivo al que quiere añadir la biblioteca en la parte superior del
No se puede añadir directamente una biblioteca a un objetivo. Sólo puede añadir un módulo mostrado en la
Si la biblioteca que quiere no se muestra en la
Después de crear un módulo nuevo, tiene que esperar unos segundos mientras los archivos del proyecto se recargan para ver el módulo nuevo en la lista.
Cuando haya terminado, pulse el botón
Agrupar bibliotecas en un módulo.
Añadir un módulo
Los paquetes no se pueden añadir directamente a un programa pero sí se pueden agrupar en un módulo.
Seleccione el programa en la
En el diálogo
Obtendrá una lista de todas las bibliotecas empaquetadas instaladas en su sistema. Puede marcar una o más bibliotecas.
Si la biblioteca que quiere no aparece aquí:
Quizá no está instalada en su sistema. Lance la aplicación que usa para instalar la nuevos programas y busque el nombre de la biblioteca. A menudo, el paquete que necesita tiene un sufijo «dev» o «devel» y debe incluir los archivos de cabecera y un archivo
Es posible que la biblioteca no esté empaquetada, lo que sucede a menudo con bibliotecas no desarrolladas en Linux. Consulte el capítulo
Después de seleccionar una biblioteca, se generará automáticamente un nombre de módulo pero puede cambiarlo. Puede seleccionar un nombre de módulo que ya exista para añadirle una biblioteca nueva y a todos los objetivos que lo usen.
Cuando termine, pulse el botón
Quitar un conjunto de bibliotecas de un objetivo.
Quitar un módulo
Seleccione la biblioteca que quiera quitar en la
Confirme que quiere quitarla. Esta biblioteca se quitará del objetivo.
Quitar una biblioteca de un módulo.
Quitar un paquete
Seleccione el paquete que quiere quitar en la
Confirme que quiere quitar el paquete. Este paquete se quitará del archivo del proyecto.
Gestor de proyectos.
Complemento del gestor de proyectos

El «backend» del proyecto que usar cuando se crea o se importa un proyecto nuevo en
Cualquiera que sea el «backend» subyacente, la interfaz gráfica es la mismo pero algunas funciones pueden estar desactivadas.
Complemento de «backend» del proyecto
Editar las propiedades del proyecto.
Editar un proyecto
Añadir archivos existentes a un proyecto.
Añadir archivos
Seleccione el objetivo donde quiere añadir el archivo de código fuente nuevo en la
O desde el
Puede seleccionar otro objetivo en la parte superior del
En el selector de archivos de debajo, seleccione los archivos que quiere añadir. Pulse el botón
Puede añadir archivos a subcarpetas del proyecto. La mayoría de los formatos de proyectos requieren que los archivos estén bajo la carpeta del proyecto. Los archivos fuente añadidos fuera de la carpeta del proyecto se copian dentro automáticamente para cumplir con este requerimiento.
Añadir o quitar archivos de un proyecto.
Gestionar archivos
Quitar archivos de un proyecto.
Quitar archivos
Seleccione el archivo que quiere quitar en la
Confirme que quiere quitarlo. El archivo sólo se quitará del proyecto, no se eliminará en el disco.
Puede seleccionar varios archivos a la vez manteniendo pulsada la tecla
Añadir un objetivo a un proyecto.
Añadir un objetivo
Un objetivo agrupa archivos y define su uso. Se usa para representar un programa, con todos su archivos de fuentes y sus hijos o sólo para para agrupar los archivos de datos que se deben instalar en el mismo sitio.
Seleccione la carpeta donde quiere añadir el objetivo nuevo en la
O desde el
Puede seleccionar otra carpeta en la parte superior de la
Introduzca el nombre de un objetivo y seleccione el tipo de objetivo en la lista desplegable de debajo. Dependiendo del «backend» de su proyecto habrá varios tipos de objetivos disponibles.
Generalmente los nombres de los objetivos están restringidos a letras, dígitos y el guión bajo, así que es mejor evitar otros caracteres.
Cuando haya elegido el nombre del objetivo, escriba el padre y pulse el botón
Añadir o editar o quitar objetivos de un proyecto.
Gestionar objetivos
Quitar un objetivo de un proyecto.
Quitar un objetivo
Seleccione el objetivo que quiere quitar en la
Confirme que quiere quitarlo. Se quitarán el objetivo y todas sus propiedades del archivo de proyecto. Todos los archivos permanecerán en su disco duro.
Mostrar el contenido del proyecto.
Ver un proyecto
Un proyecto se representa mediante un árbol, en el que el elemento raíz corresponde al proyecto, mientras que los hijos representan los programas, bibliotecas, carpetas y archivos de fuentes. Cada elemento puede tener propiedades que permiten establecer más detalles como la versión del proyecto, opciones del compilador o carpetas de instalación. Estos elementos se dividen en varias categorías y, dependiendo del «backend», no todas están disponibles.
Raíz
Sólo hay un nodo de este tipo. Representa al proyecto en sí. Es el lugar donde puede establecer propiedades que afecten a todo el proyecto, como el nombre o la versión.
Módulo
Esto es un conjunto de paquetes usados en un proyecto de autotools. Aparecen como hijos del nodo raíz para representar a todos los módulos definidos y como hijos de cada objetivo que los usa. Para obtener más detalles, consulte la
Paquete
Esto es una biblioteca empaquetada usada en proyectos de autotools. Aparece como un hijo en cada módulo. Para obtener más detalles, consulte
Carpeta
Esto se usar para agrupar objetivos, permitiendo establecer propiedades comunes. A menudo se implementan como subcarpetas. Para obtener más detalles, consulte la
Objetivo
Agrupa archivos y define cómo se usan. Hay varios tipos de objetivos, por ejemplo, programa, biblioteca o datos, que corresponden con los diferentes usos de los archivos hijos. A menudo representan archivos generados por el proyecto como programas compilados o bibliotecas. Para obtener más detalles, consulte la
Puede arrastrar y soltar objetivos al principio de la vista en árbol de un proyecto para crear un atajo que permita acceder a ellos más fácilmente. De manera predeterminada, todos los objetivos del programa ya aparecen aquí.
Fuente
Cada archivo de fuentes se representa por un elemento en la vista del proyecto. El uso de cada archivo depende de su objetivo padre. Todos los hijos de un programa objetivo se compila para generarlo, mientras que los hijos de un objetivo de datos se copian en una carpeta cuando se instala el proyecto. Para obtener más detalles, consulte la
Crear un proyecto nuevo desde el principio.
Crear un proyecto
Los proyectos nuevos se crean desde las plantillas.
Desde el
O desde la lista desplegable del botón
Seleccione el icono que representa el tipo del proyecto que quiere crear y pulse
Sitúe el ratón sobre un icono de proyecto un segundo y aparecerá un pequeño mensaje automático mostrando más información acerca de ese tipo del proyecto.
Dependiendo del tipo del proyecto seleccionado, tendrá que introducir diferente información. Cuando lo haya hecho, pulse
Toda la información se agrupan en páginas, generalmente tendrá que rellenar dos o tres páginas. Puede volver atrás en cualquier momento usando el botón
Mantenga el ratón sobre el botón o el área de escritura durante un segundo para obtener un pequeño mensaje automático con más detalles acerca del correspondiente ajuste.
Después de completar todas las páginas de información, obtendrá una página resumen listando la información principal acerca de su proyecto. En este punto, aún no se ha escrito nada en el disco. Pulse
Cada tipo de proyecto corresponde a una plantilla.
Plantilla del asistente de proyectos.
Plantilla del asistente de proyectos
Un archivo de plantilla de proyecto está compuesta de un conjunto de archivos que pueden ser procesados por un potente motor de procesado de plantillas llamado
Este archivo
Ejecutar el diálogo de parámetros
Ejecutar el diálogo de parámetros
El diálogo

Este es el programa que se ejecutará si ejecuta un programa con o sin el depurador. El menú desplegable le permite seleccionar programas creados por el proyecto actual, pero puede pulsar el botón

Estos son los argumentos de línea de comandos usados por su programa. La lista desplegable almacena un histórico de los últimos argumentos usados.

La carpeta de trabajo es la carpeta actual en la que se ejecutará su programa.

Puede pulsar en la sección desplegable para mostrar todas las variables de entorno que serán accesibles por su programa. De manera predeterminada, incluye todas las variables de entorno, que se muestran en gris claro.
Puede pulsar en el botón
Puede pulsar en el botón
Puede pulsar el botón
Cuando una variable no tiene el mismo valor que en el entorno actual, se muestra en negro.

Esto se debe comprobar para ejecutar el programa en una terminal, permitiéndole proporcionar entradas y ver sus salidas, usando los flujos estándar de Unix. No es necesario para programas que tengan interfaz gráfica.
Iniciar un programa sin el depurador.
Ejecutar un programa
Si se usa
Desde el
En el diálogo
Desde el
Si su programa necesita archivos de datos, probablemente tenga que instalarlos, al menos una vez antes de ejecutarlo. Para obtener más información consulte la
Todas las ventanas y diálogos.
Ventanas y diálogos
No se pueden añadir directamente paquetes a un objetivo. Primero debe añadirlos a un módulo y añadir este módulo al objetivo. Consulte la
Crear un conjunto de bibliotecas.
Crear un módulo

Seleccione el programa donde quiere añadir la biblioteca nueva en la
O desde el
Para saber cómo añadir este nuevo módulo a su objetivo, consulte la
Añadir un paquete
Seleccione el módulo donde quiere añadir la biblioteca nueva en la
En la lista de todas las bibliotecas empaquetaadas, compruebe las bibliotecas adicionales requeridas. Compruebe que el nombre del módulo esperado está seleccionado en la caja de verificación. Después, pulse el botón
Para saber cómo añadir el módulo a su objetivo, consulte la
seb.sfo@free.fr
philip.chimento@gmail.com
expandtab
et
noet
sts
tabstop
ts
sw
tab-width
object_file_name
make
make
Nombre
Versión
URL
jhs@gnome.org
Anjuta soporta los dos modos usados por
Añadir o quitar objetivos
Si el «backend» del proyecto lo soporta, puede añador o quitar archivos en sus proyectos sin editar el archivo del proyecto. Un objetivo agrupa archivos en un conjunto. Generalmente se usa para representar un programa con todos sus archivos de fuentes como sus hijos.
Añadir o quitar bibliotecas empaquetadas desde un objetivo.
Cuando ha creado un módulo que contiene una o más bibliotecas, puede añadirlo a un objetivo.
Añadir o quitar bibliotecas nuevas
Añadir bibliotecas empaquetadas a un módulo exitente
Seleccione la biblioteca que quiera quitar en la
Añadir o quitar bibliotecas no empaquetada en un proyecto.
Añadir o quitar bibliotecas no empaquetadas
Añadir una biblioteca no empaquetada a un objetivo
Quitar un biblioteca no empaquetada desde un objetivo
Añadir o quitar archivos
Si el «backend» del proyecto lo soporta, puede añador o quitar archivos en sus proyectos sin editar el archivo del proyecto.
El objetivo le permite agrupar archivos, y tiene un tipo que define cómo se usan los archivos dentro. Un objetivo de programa contiene código fuente, que se compilará para crear el objetivo. Por otra parte, un dato de objetivo sólo agrupa archivos de datos que se instalarán en el mismo lugar.
Pulse en el botón del
No funciona el autocompletado
Examinar hilos.
Listar hilos
Desde el
Cada ventana muestra la sigueinte información acerca de cada hilo:
Esto contiene una flecha amarilla que apunta al hilo activo.
ID
El nombre del archivo que contiene la función correspondiente al marco o al hilo actual.
El número de línea de la función correspondiente al marco o al hilo actual.
El nombre de la función correspondiente al marco o al hilo actual.
La dirección de la función correspondiente al marco o al hilo actual.
Cambiar el hilo actual
El hilo actual es el hilo para el cual la pila y variables locales se muestran actualmente en el depurador.
En la ventana
Pulse con el botón derecho y seleccione
Ver la función actual
Cada marco de la pila contiene la siguiente información:
Información sobre los archivos usados
Desde el
Información sobre el programa
Información sobre la estructura del núcleo
Desde el
Información sobre variables globales
Desde el
Información sobre el marco actual
Desde el
Información sobre los argumentos de la función actual
Desde el
Si una vigilancia corresponde a una variable, puede cambiar su valor. En la ventana
Un programa se puede detener tan pronto como se obtiene un error crítico de GLib si la variable de entorno
Desde el

Desde el

Desde el

Desde el

El espacio de direccionamiento, incluso de un microprocesador de 32-bit, es muy grande (4 gigabytes), de tal forma que es muy difícil ir a una dirección en particular con la barra de desplazamiento. Pero puede pulsar en el botón derecho del ratón y seleccionar
Detener la ejecución en un determinado lugar
Ejecute su aplicación
@@image: 'figures/anjuta_logo.png'; md5=THIS FILE DOESN'T EXIST
Ejecutar y depurar