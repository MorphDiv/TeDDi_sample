# language_name_wals:	Hebrew (Modern)
# language_name_glotto:	Modern Hebrew
# ISO_6393:	heb
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Hebr
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/he.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

מדריך PHP
קודם
הבא
אזהרה
רכיב זה הוא ניסיוני. כלומר, התנהגות הפונקציות,שמות הפונקציות ובאופן כללי כל מה שמתועד כאן עשוי להשתנות בהפצה עתידית של PHP ללא התרעה. ראה הוזהרת, השימוש ברכיב זה על אחריותך בלבד.
The domxml extension has been overhauled in PHP Version 4.3.0 in favour of a better compliance of the DOM standard.
The extension still contains many old functions, but they should not be used anymore.
Especially those non object oriented functions should be avoided.


Currently this tree should be considered read-only - you can modify it but this would not make any sense since DomDocument_dump_mem() cannot be applied to it.
Therefore, if you want to read an XML file and write a modified version use the DomDocument_create_element(), DomDocument_create_text_node(), set_attribute(), etc. and finally DomDocument_dump_mem() functions.
This extension make use of the GNOME xml library.

You will need at least libxml-2.2.7.
This extension is only available if PHP was configured with --with-dom=[ DIR].
There a quite some functions which do not fit into the DOM standard and should not be used anymore as listed in the following table.
The function DomNode_append_child() has changed its behaviour.
It now actually adds a child and not a sibling.
If this breaks your application use the non DOM function DomNode_append_sibling().
טבלה 1.
Deprecated functions and its replacements




xmldocfiel































DomDocument_create_text_node() und add it with DomNode_append_child().




These constants are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
טבלה 2.
































































The API of the module follows the DOM Level 2 standard as close as possible.
Consequently the API is fully object oriented.

Though the API is object oriented there are many functions which can be called in a non-object oriented way by passing the object to operate on as the first argument.
These function are mainly to retain compatibilty to older versions of the extension but are not encouraged to use anymore in new developments.
This API differs from the official DOM API in two points.
First, all class attributes are implemented as functions with the same name and secondly the function names follow the PHP naming convention.


Classes with an equivalent in the DOM Standard are named DOMxxx.
טבלה 3.




























טבלה 4.













































טבלה 5.















set_attribute_node
DomElement_set_attribute_node()




טבלה 6.



































טבלה 7.










טבלה 8.









טבלה 9.








טבלה 10.










טבלה 11.


















DomComment is derived from DomCData
Many examples in this reference require a xml string.
Instead of repeating this string in any example it will be put into a file and be included by each example.

You could also create an xml document read it with DomDocument_open_file().
דוגמה 1.
Include file example.inc with xml string

תוכן העניינים:

קודם
ראשי
הבא

למעלה
