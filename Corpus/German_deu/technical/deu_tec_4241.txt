# language_name_wals:	German
# language_name_glotto:	German
# iso639_3:	deu
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/de.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Handbuch
Zurück
Nach vorne

Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Die Funktion socket_write() schreibt aus dem Puffer buffer in den Socket socket.
Mit dem optionalen Parameter length kann man alternativ eine Anzahl von Bytes angeben, die in den Socket geschrieben wrden sollen.
Falls diese Anzahl größer ist, als der Puffer, wird sie stillschweigend auf die Puffergröße gekürzt.
Gibt die Anzahl der erfolgreich in den Socket geschriebenen Bytes zurück oder FALSE, falls ein Fehler aufgetreten ist.
Der Fehlercode kann mit der Funktion socket_last_error() abgefragt werden.
Dieser Fehlercode kann an die Funktion socket_strerror() übergeben werden, um eine textuelle Beschreibung des Fehlers zu erhalten.
Es ist auch möglich, dass, abhängig von den Puffern im Netzwerk usw., nur eine bestimmte Datenmenge, sogar auch nur ein Byte, geschrieben wird, obwohl der Puffer größer ist.
Dies müssen Sie beobachten, nicht dass Sie unabsichtlich vergessen, den Rest Ihrer Daten zu senden.
Anmerkung:
Es durchaus möglich, dass socket_write() 0 zurückgibt, was bedeutet, dass kein einziges Byte geschrieben wurde.
Vergewissern Sie sich, dass Sie den === Operator benutzen, um im Falle eines Fehlers auf FALSE zu testen.
See also socket_accept(), socket_bind(), socket_connect(), socket_listen(), socket_read() und socket_strerror().
Zurück
Zum Anfang
Nach vorne

Nach oben
