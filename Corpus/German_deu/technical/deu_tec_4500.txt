# language_name_wals:	German
# language_name_glotto:	German
# iso639_3:	deu
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/de.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Handbuch
Zurück
Kapitel 8.
Variablen
Nach vorne
Manchmal ist es komfortabel, variable Variablen-Bezeichner zu benutzen.
Das bedeutet, einen Variablen-Namen zu setzen und dynamisch zu gebrauchen.
Eine normale Variable wird wie folgt gebildet:
$a = "Hallo";
Eine variable Variable nimmt den Wert einer Variablen und behandelt ihn als Bezeichner der Variablen.
Im obigen Beispiel kann Hallo als Variablen-Name gebraucht werden, indem man zwei $-Zeichen benutzt, also schreibt:
$$a = "Welt";
Nun existieren in der PHP-Symbol-Struktur zwei definierte und gespeicherte Variablen: $a mit dem Inhalt "Hallo" und $Hallo mit dem Inhalt "Welt ".
Deshalb wird die Anweisung
echo "$a ${$a}";
zur genau gleichen Ausgabe führen wie:
echo "$a $Hallo";
also zu:
Hallo Welt.
Wenn sie variable Variablen mit Arrays verwenden, müssen sie eine Doppeldeutigkeit beachten.
Wenn sie nämlich $$a[ 1] schreiben, dann muss der Parser wissen, ob Sie $a[1] als Variable oder $$a als Variable und dann [1] als Index dieser Variablen verwenden wollen bzw. gemeint haben.
Die Syntax zur Lösung dieser Doppeldeutigkeit:
Verwenden Sie im ersten Fall ${$a[1]} und im zweiten Fall ${$a}[1].
Zurück
Zum Anfang
Nach vorne
Geltungsbereich von Variablen
Nach oben
Variablen ausserhalb von PHP