# language_name_wals:	German
# language_name_glotto:	German
# ISO_6393:	deu
# year_composed:	NA
# year_published:	2014
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	GNOME
# source:	https://object.pouta.csc.fi/OPUS-GNOME/v1/raw/de.zip
# copyright_short:	http://opus.nlpl.eu/GNOME.php
# copyright_long:	http://opus.nlpl.eu/GNOME.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Alle Fenster und Dialoge.
Sébastien Granjoux
seb.sfo@free.fr
Fenster und Dialoge
Ein Programm ohne Debugger ausführen.
Philip Chimento
philip.chimento@gmail.com
Ein Programm ausführen
Wenn mit
Wählen Sie
Das aktuelle Programm sowie weitere Parameter werden im Dialog
Wählen Sie
Wenn Ihr Programm Datendateien benötigt, so müssen Sie es wahrscheinlich zumindest einmalig installieren, bevor Sie es ausführen können. Lesen Sie auch
Ausführungsparameter-Dialog
Ausführungsparameter-Dialog
Der Dialog
Programm
Dieses ist das Programm, welches ausgeführt wird, wenn Sie ein Programm mit oder ohne Fehlerdiagnose ausführen. Die Auswahlliste führt Programme auf, die durch das aktuelle Projekt erstellt wurden. Sie können aber über den Knopf
Argumente
Dies sind Befehlszeilenargumente, die von Ihrem Programm verwendet werden. Die Auswahlliste enthält eine Chronik der zuletzt verwendeten Argumente.
Arbeitsordner
Der Arbeitsordner ist der aktuelle Ordner bei der Ausführung Ihres Programms.
Umgebungsvariablen
Klicken Sie auf die Auswahlliste, um alle Umgebungsvariablen anzuzeigen, die durch Ihr Programm zugänglich sind. Dies sind normalerweise alle aktuellen Umgebungsvariablen. Sie werden in hellem Grau dargestellt.
Klicken Sie auf den Knopf
Klicken Sie auf den Knopf
Klicken Sie auf den Knopf
Wenn eine Variable nicht den gleichen Wert wie in der aktuellen Umgebung hat, so wird diese in schwarz dargestellt.
Im Terminal ausführen
Wählen Sie dies, um das Programm in einem Terminal auszuführen, so dass Sie Eingaben tätigen und Ausgaben lesen können, auch mit Hilfe von Unix-Streams. Es ist für Programme mit grafischer Oberfläche nicht erforderlich.
Vorlage für Projekt-Assistenten.
Vorlage für Projekt-Assistenten
Eine Projektvorlage besteht aus einer Gruppe von Dateien, die von einer mächtigen Verarbeitungs-Engine namens
Diese
Ein neues Projekt von Grund auf erstellen.
Ein Projekt erstellen
Neue Projekte werden aus Vorlagen erstellt.
Wählen Sie
Oder wählen Sie in der Auswahlliste des Knopfes
Wählen Sie das Symbol aus, welches Ihr gewünschtes Projekt repräsentiert, und klicken Sie auf
Fahren Sie mit der Maus über eines der Projektsymbole. Eine kleine Meldung erscheint, in der weitere Informationen über den jeweiligen Projekttyp angezeigt werden.
Abhängig vom Projekttyp müssen Sie verschiedene Informationen angeben. Sobald Sie fertig sind, klicken Sie auf
Alle Informationen sind seitenweise organisiert. Typischerweise müssen Sie in zwei oder drei Seiten Angaben machen. Mit dem Knopf
Fahren Sie mit der Maus über einen Knopf oder ein Eingabefeld. Eine kleine Meldung erscheint, in der weitere Informationen über die jeweilige Einstellung angezeigt werden.
Nachdem Ausfüllen der Informationsseiten wird eine zusammenfassende Liste mit den grundlegenden Informationen zu Ihrem Projekt angezeigt. Zu diesem Zeitpunkt wurde noch nichts auf der Festplatte gespeichert. Klicken Sie auf
Jeder Projekttyp korrespondiert zu einer Vorlage.
Ein Ziel zum Projekt hinzufügen oder daraus entfernen.
Ziele hinzufügen oder entfernen
Falls das Projekt-Backend dies unterstützt, können Sie Ziele zu Ihrem Projekt hinzufügen oder daraus entfernen, ohne die Projektdatei bearbeiten zu müssen. Ein Ziel fasst Dateien zusammen. Es repräsentiert typischerweise ein Programm mit allen Quelldateien und deren Unterdateien.
Ein Ziel hinzufügen
Wählen Sie den Ordner in der
Oder wählen Sie im
Sie können in der unteren
Geben Sie einen Zielnamen ein und wählen Sie den Zieltyp in der Auswahlliste darunter. Je nach Projekt-Backend sind verschiedene Zieltypen möglich.
Zielnamen sind typischerweise auf Buchstaben, Ziffern und den Unterstrich beschränkt. Es ist ratsam, andere Zeichen zu vermeiden.
Sobald Sie einen Zielnamen, Zieltyp und Elternelement gewählt haben, klicken Sie auf den Knopf
Ein Ziel entfernen
Wählen Sie den Ordner in der
Bestätigen Sie das Entfernen. Alle Ziele und deren Eigenschaften werden von den Projektdateien entfernt. Alle Dateien des Ziels verbleiben unbeschadet auf Ihrem Datenträger.
Projektverwaltung
Projektverwaltung-Plugin

Was auch immer das darunterliegende Backend ist, die grafische Benutzeroberfläche wird immer die gleiche sein. Allerdings könnten einige Funktionen deaktiviert sein.
Projekt-Backend-Plugin
Paketierte Bibliotheken zu einem Projekt hinzufügen oder daraus entfernen.
Paketierte Bibliotheken hinzufügen oder entfernen
Sobald Sie ein Modul mit einer oder mehreren Bibliotheken erstellt haben, können Sie es dem Ziel hinzufügen.
Eine paketierte Bibliothek zu einem Ziel hinzufügen
Eine Bibliothek kann nicht direkt zu Ihrem Programm hinzugefügt werden. Zunächst müssen Sie ein Modul dafür erstellen, welches aus einer Gruppe von Bibliotheken besteht und dieses Modul zum Ziel hinzufügen.
Wählen Sie das Programm in der
Oder wählen Sie im
Sie müssen in der
Sobald Sie fertig sind, klicken Sie auf den Knopf
Eine paketierte Bibliothek aus einem Ziel entfernen
Wählen Sie die Bibliothek in der
Ein Bestätigungsdialog wird geöffnet, und die Bibliothek wird aus dem Ziel entfernt.
Bibliotheken zu einem Projekt hinzufügen oder daraus entfernen.
Neue Bibliotheken hinzufügen oder vorhandene entfernen
Unter Linux sind die meisten Bibliotheken für eine einfache Handhabung in Paketen verwaltet. Wenn Sie eine dieser Bibliotheken benötigen, bietet
Paketierte Bibliotheken in einem neuen Modul hinzufügen
Eine Bibliothek kann nicht direkt zu Ihrem Programm hinzugefügt werden. Zunächst müssen Sie ein Modul dafür erstellen, welches aus einer Gruppe von Bibliotheken besteht.
Wählen Sie das Programm in der
Wählen Sie
Eine Liste aller auf Ihrem System installierten Bibliotheken wird angezeigt. Sie können eine oder mehrere Bibliotheken auswählen.
Falls die Bibliothek, die Sie hinzufügen möchten, hier nicht auftaucht, ist sie eventuell nicht auf Ihrem System installiert. Starten Sie die Anwendung zur Paketverwaltung und suchen Sie nach dem Namen der Bibliothek. Das benötigte Paket hat oft die Endung »dev« oder »devel« und enthält Header-Dateien und eine pkg-config-Datei mit der Erweiterung
Nach Auswahl einer Bibliothek wird automatisch ein Modulname erstellt, der aber angepasst werden kann. Klicken Sie auf den Knopf
Lesen Sie die
Paketierte Bibliotheken in einem existierenden Modul hinzufügen
Wählen Sie das Modul in der
Prüfen Sie die Liste aller paketierten Bibliotheken auf zusätzlich gewünschte Bibliotheken. Stellen Sie sicher, dass der erwartete Modulname in dem unteren Textfeld ausgewählt ist. Klicken Sie anschließend auf den Knopf
Lesen Sie die
Eine paketierte Bibliothek aus einem Modul entfernen
Wählen Sie die Bibliothek in der
Ein Bestätigungsdialog wird geöffnet, und die Bibliothek wird aus der Projektdatei entfernt.
Nicht paketierte Bibliotheken zu einem Projekt hinzufügen oder daraus entfernen.
Nicht paketierte Bibliotheken hinzufügen oder entfernen
Eine nicht paketierte Bibliothek zu einem Ziel hinzufügen
Um eine Bibliothek in C nutzen zu können, müssen Sie dem Compiler mitteilen, wo sich die Header-Dateien befinden und dem Linker mitteilen, wo die erforderlichen Bibliotheken aufzufinden sind. Das Problem ist, dass Ihr Programm nicht auf einem anderen Rechner compilieren wird, wenn sich die Header- oder Bibliotheksdateien an einem anderen Ort befinden.
Wählen Sie in der
Oder wählen Sie im
Wenn die Header-Dateien im üblichen Pfad installiert sind (
Eventuell müssen Sie den Knopf
Als nächstes müssen Sie die Bibliothek einem Ziel hinzufügen. Wählen Sie in der
Sie müssen die Eigenschaft
Wenn die Bibliothek nicht in einem Standardordner liegt, so schaut
Eine nicht paketierte Bibliothek aus einem Ziel entfernen
Wählen Sie in der
Entfernen Sie die Bibliothek aus den Eigenschaften der
Dateien zu einem Projekt hinzufügen oder daraus entfernen.
Dateien hinzufügen oder entfernen
Falls das Projekt-Backend dies unterstützt, können Sie Dateien zu Ihrem Projekt hinzufügen oder daraus entfernen, ohne die Projektdatei bearbeiten zu müssen.
Dateien hinzufügen
Wählen Sie das Ziel in der
Oder wählen Sie
Ein Ziel ermöglicht es, Dateien zu gruppieren und hat einen Typ, der beschreibt, wie die Dateien verwendet werden. Ein Programmziel enthält Quelldateien, die zum Erstellen des Ziels compiliert werden. Ein Datenziel gruppiert lediglich Datendateien, die in den gleichen Ordner installiert werden.
Sie können in der unteren
Klicken Sie auf den Knopf
Sobald Sie das Ziel und die Dateien ausgewählt haben, klicken Sie auf den Knopf
Einige Projektformate benötigen die Datei speziell im Projektordner. Dateien, die außerhalb des Projektordners sind und hinzugefügt werden, werden automatisch in diesen kopiert, um die Bedingung zu erfüllen.
Eine Datei entfernen
Wählen Sie die Datei in der
Ein Bestätigungsdialog wird geöffnet, und die Datei wird nur aus dem Projekt entfernt, nicht von Ihrer Festplatte.
Ein bereits existierendes Projekt importieren.
Ein Projekt importieren

Wählen Sie
Wählen Sie
Wählen Sie
Nach Auswahl des bestehenden Projekts ist das Textfeld

Makefile-basiertes Projekt-Backend
Plugin für Makefile-basiertes Projekt-Backend
Ein »makefile« ist vermutlich die meist genutzte Methode, Software auf verschiedensten Plattformen zu erstellen. Ein »makefile« enthält eine Liste oder Regeln, die beschreiben, welche Befehle ausgeführt werden müssen, um ein Ziel unter Berücksichtigung all seiner Abhängigkeiten zu erstellen. Bei der Erstellung eines Programms ist das Ziel eine Objektdatei, und die Abhängigkeiten sind die Quelldateien. Das Ziel einer Regel kann eine Abhängigkeit einer anderen sein. Regeln können demnach untereinander verkettet sein bei der Erstellung des endgültigen Ziels.
Es ist ein allgemeines Werkzeug auf Basisebene, so dass es schwierig ist, alle Quelldateien und Ziele eines Projekts zu finden. D.h.
Wenn das Projekt-Backend nicht in der Lage ist, alle Quelldateien zu finden, so können Sie probieren, dass Ordner-Backend statt dessen zu verwenden. Es erkennt keine Ziele, sollte aber alle Quelldateien finden.
Das Ändern von Eigenschaften, Hinzufügen und Entfernen von Zielen und Quelldateien sind für dieses Backend deaktiviert, weil ein automatisches Bearbeiten nicht implementiert ist. Es muss von Hand mit einem Texteditor geändert werden. Nach jedem Speichern der makefile-Datei wird diese automatisch neu eingelesen.
Einführung
Einführung in die integrierte Entwicklungsumgebung



Wir hoffen, dass Sie mit
Das folgende Bildschirmfoto zeigt einige Dinge, die Sie in


Alle Hilfethemen.
Index
Ordner-basiertes Projekt-Backend
Plugin für Ordner-basiertes Projekt-Backend
Dies ist das einfachste Projekt-Backend. Es gibt keine Projekt-Datei. Es funktioniert wie ein Dateibetrachter, der alle Dateien mit typischen Quelldatei-Erweiterungen berücksichtigt (wie zum Beispiel
Dieses Backend ist eine nützliche Alternative, falls Ihr Projekt nicht das entsprechende Backend in
Es ist nicht möglich, bei einem Projekt mit diesem Backend etwas zu ändern oder hinzuzufügen. Wenn Sie aber eine Quelldatei mit der passenden Erweiterung im Projektordner hinzufügen, so wird es automatisch hinzugefügt.
Ausdrücke und Variablen überwachen.
Ausdrücke überwachen
Überwachte Ausdrücke, oder kurz »Ausdrücke«, sind Ausdrücke, die für eine Fehlerdiagnose untersucht werden. Die Ergebnisse werden bei jedem Programmstopp ausgegeben. Zum Beispiel kann dies bei jedem
Überwachte Ausdrücke auflisten
Wählen Sie
Ähnlich lokalen Variablen werden alle überwachten Ausdrücke in einem Baum mit Unterelementen zur Darstellung von Strukturen oder Feldelementen angezeigt.
Variable
Der Name der Variable oder des Ausdrucks.
Wert
Die Variable oder Ausdruckswert.
Typ
Der Typ der Variable oder des Ausdrucksergebnisses.
Überwachte Ausdrücke aktualisieren
Überwachte Ausdrücke können bei Programmstopp oder auf Anfrage automatisch aktualisiert werden.
So stellen Sie einen überwachten Ausdruck so ein, dass dieser automatisch aktualisiert wird:
Wählen Sie im Fenster
So aktualisieren Sie eine Ausdrucksüberwachung:
Drücken Sie im Fenster
So aktualisieren Sie die überwachten Ausdrücke manuell in einem Arbeitsgang:
Drücken Sie im Fenster
Eine Überwachung zu einem Ausdruck hinzufügen
So fügen Sie einen Ausdruck zur Überwachungsliste hinzu:
Wählen Sie
Geben Sie den zu überwachenden Ausdruck ein. Aktivieren Sie
Das Ergebnis eines Ausdrucks kann folgendermaßen zur Überwachung hinzugefügt werden:
Wählen Sie
Klicken Sie auf den
Einen überwachten Ausdruck entfernen
Sie können einen Ausdruck aus der Überwachungsliste entfernen.
Wählen Sie im Fenster
Alle Überwachungen können gleichzeitig entfernt werden.
Drücken Sie im Fenster
Den Wert einer Variable ändern
Wenn ein überwachter Ausdruck einer Variablen entspricht, dann können Sie deren Wert ändern.
Wählen Sie im Fenster
Geben Sie den neuen Wert ein.
Tipps und Tricks zur Fehlerdiagnose.
Tipps zur Fehlerdiagnose
Korrigieren von kritischen Fehlern in GLib/GTK+
Manchmal kann es schwierig sein herauszufinden, wo kritische GLib-Fehler auftreten, weil diese die Programmausführung nicht beenden. Setzen Sie die Umgebungsvariable
Öffnen Sie den
Klicken Sie auf das Pluszeichen neben
Klicken Sie auf
Geben Sie in das Feld
Klicken Sie auf
Führen Sie das Programm zur Fehlerdiagnose aus, indem Sie
Verwenden Sie das Programm, bis der kritische Fehler auftritt.
Schauen Sie sich im
Die oberste Funktion mit Frame-Nummer 0 ist in GLib, d.h. Sie müssen weiter unten im Stack schauen. Oft liegt der Fehler in der obersten Funktion, welche in Ihrem Programm liegt.
Threads untersuchen.
Threads
Threads auflisten
Ein Programm kann aus mehreren Threads bestehen. Alle diese Threads werden unabhängig voneinander ausgeführt, mit eigenen Registern, Stacks und lokalen Variablen, aber mit gemeinsamen globalen Variablen.
Wählen Sie
Das Fenster zeigt die folgenden Informationen zu jedem Thread an:
Aktiv
Ein gelber Pfeil zeigt hier auf den aktiven Thread.
Kennung
Eine Nummer, korrespondierend zu jedem Thread.
Datei
Der Name der Datei, welche die Funktion des aktuellen Frames des aktuellen Threads enthält.
Zeile
Der Zeilennummer der Funktion, welche dem aktuellen Frame des aktuellen Threads entspricht.
Funktion
Der Name der Funktion, die dem Frame des aktuellen Thread entspricht.
Adresse
Die Adresse der Funktion, die dem Frame des aktuellen Threads entspricht.
Aktiven Thread wechseln
Der aktuelle Thread ist jener, dessen Stacks und lokale Variablen momentan in der Fehlerdiagnose angezeigt werden.
Wählen Sie im Fenster
Drücken Sie die rechte Maustaste und wählen Sie
Die aktuelle Funktion anzeigen
Klicken Sie zweimal, oder drücken Sie die rechte Maustaste und wählen Sie
Anhalten und Fortsetzen
Anhalten und Einzelschritt
Ähnlich wie in der Videobearbeitung kann das Programm in Zeitlupe ausgeführt werden, wobei Sie fortsetzen, pausieren und anhalten können usw. So können Sie das Verhalten des Programms besser nachvollziehen. Sie können es jedoch nicht rückwärts laufen lassen.
Hineinspringen
Wählen Sie im
Einzelschritte führen nur eine Programmanweisung aus (ab Haltepunkt) und geben dann die Kontrolle zurück. Wenn die ausgeführte Anweisung eine Funktion ausführt, so versucht die Fehlerdiagnose in die Funktion zu springen (in der Reihenfolge, in der die Funktionen ausgeführt werden). Sobald die Anweisung ausgeführt und die Kontrolle zurück gegeben wurde, können Sie den Zustand Ihres Programms analysieren.
Wenn das Fenster
Einzelner Schritt über eine Funktion
Wählen Sie
Überspringen ist ähnlich wie Einzelschritt mit der Ausnahme, dass nicht innerhalb von Funktionen bei ausgeführten Anweisungen angehalten wird.
Wenn das Fenster
Herausspringen
Wählen Sie
Herausspringen führt die aktuelle Funktion aus, bis diese in die aufrufende Funktion zurückkehrt.
Ausführen und Fortsetzen
Wählen Sie
Dieser Befehl startet das Programm neu und führt es aus, bis ein Haltepunkt angelaufen wird oder das Programm regulär beendet wird.
Ausführen bis
Wählen Sie
Das Programm neu starten und bis zur Zeile oder Adresse (falls das Fenster
Programm stoppen
Wählen Sie
Das Programm unterbrechen und Kontrolle zurück an die Fehlerdiagnose geben, so dass diagnostiziert werden kann, wie z.B. Inspizieren von Daten oder Hinzufügen von Haltepunkten.
Den Stack untersuchen.
Stack
Stack-Frames auflisten
Ein Stack-Frame ist der Bereich des Stacks, der einem Funktionsaufruf zugeordnet ist. Es werden alle Funktionen und deren Aufrufargumente in der Aufrufreihenfolge aufgeführt. Jeder Stack-Frames ist beginnend mit 0 ab der aktuellen Funktion nummeriert. Die Stack-Frames werden nur angezeigt, während die Fehlerdiagnose läuft.
Wählen Sie
Jeder Stack-Frame enthält die folgenden Informationen:
Der gelbe Pfeil repräsentiert den aktiven Stack-Frame. Laut Vorgabe ist dies Frame 0, d.h. die aktuelle Funktion. Alle Auswertungen und lokalen Variablen sind relativ zu diesem aktiven Frame. Wechseln Sie den aktuellen Stack-Frame, um lokale Variablen anderer Funktionen zu untersuchen.
Frame
Dies ist die Frame-Nummer, beginnend mit 0 für die aktuelle Funktion. Die erste Funktion Ihres Programms (z.B.
Der Name der Datei, welche die Funktion des aktuellen Threads enthält.
Die Zeilennummer der Funktion, die diesem Frame entspricht.
Der Name der Funktion, welche diesem Frame entspricht.
Die Adresse der Funktion, welche diesem Frame entspricht.
Die Funktionsargumente.
Den aktuellen Stack-Frame wechseln
Wählen Sie im Fenster
Drücken Sie die rechte Maustaste und wählen Sie
Die aktuelle Funktion betrachten
Stacktrace ermitteln
Klicken Sie mit der rechten Maustaste in das
Ein Programm in einem Debugger starten.
Ein Programm diagnostizieren
Ein Programm in einem Debugger starten
Das aktuelle Programm ist im Dialog
Wählen Sie
Es kann schwieriger sein, ein Programm zu diagnostizieren, das hoch optimiert ist oder wenn Informationen zur Fehlerdiagnose fehlen. Im Konfigurationsschritt ist festgelegt, ob Optimierungen und Informationen zur Fehlerdiagnose aktiviert sind. Normalerweise gibt es eine Konfigurationsmöglichkeit zur Fehlerdiagnose, die Optimierungen abschaltet und alle Informationen zur Fehlerdiagnose beinhaltet. Anjuta gibt eine Warnung aus, wenn diese Konfiguration nicht verwendet wird. Lesen Sie
Fehlerdiagnose in einer bereits laufenden Anwendung
Der Debugger kann in einer bereits laufenden Anwendung verwendet werden.
Wählen Sie
Wählen Sie einen Prozess im Dialog
Fehlerdiagnose einer entfernten Anwendung
Der Debugger kann zum Debuggen einer auf einem anderen Rechner laufenden Anwendung verwendet werden, sofern der Rechner über eine TCP- oder serielle Verbindung angeschlossen ist.
Wählen Sie
Wählen Sie die Art der Verbindung zur entfernten Anwendung, entweder
Bei einer TCP-Verbindung füllen Sie die Felder
Bei einer seriellen Verbindung geben Sie im Texteingabefeld den Namen des seriellen Geräts an, beispielsweise
Klicken Sie auf
Debugger anhalten
Die Fehlerdiagnose und das Programm können jederzeit so beendet werden:
Wählen Sie
Dialog »An Prozess anhängen«
Dialog »An Prozess anhängen«
Der Dialog
Pfade verbergen
Dadurch werden Befehlspfade in der Prozessliste verborgen, falls aktiviert.
Prozess-Parameter verstecken
Dadurch werden Befehlszeilenargumente in der Prozessliste verborgen, falls aktiviert.
Prozessbaum anzeigen
Falls deaktiviert, werden die Prozesse in einer Liste dargestellt. Wenn aktiviert, werden die Prozesse in einer Baumansicht dargestellt.
Lokale Variablen untersuchen.
Lokale Variablen
Lokale Variablen des aktuellen Frames (die aktuelle Funktion, in welcher die Programmkontrolle vorhanden ist) werden im Fenster
Auflisten lokaler Variablen
Wählen Sie
Alle lokalen Variablen werden in einer Baumansicht mit Unterelementen zur Darstellung von Strukturen oder Feldelementen angezeigt.
Der Name der Variable.
Der Wert der Variable.
Der Typ der Variable.
Wählen Sie im Fenster
Der Typ des neuen Werts.
Zusätzliche Programminformationen untersuchen.
Verschiedene Informationen
Der Debugger kann verschiedene Informationen über das Programm liefern, während es läuft.
Gemeinsam genutzten Bibliotheken betrachten
Wählen Sie
Dadurch wird ein Fenster geöffnet, das alle vom Programm geladenen gemeinsamen Bibliotheken sowie deren Speicherbereiche auflistet. Es zeigt außerdem für jede der Bibliotheken, ob deren Symboltabelle geladen ist oder nicht.
Signale betrachten
Wählen Sie
Dies listet alle verfügbaren Signale einschließlich einer Kurzbeschreibung und drei Spalten, welche angeben, was zu tun ist, wenn ein Signal empfangen wird:
Stopp
Der Debugger stoppt die Ausführung des Programms, sobald das Programm dieses Signal empfängt.
Drucken
Der Debugger zeigt das empfangene Signal an.
Durchgang
Der Debugger übergibt das Signal an das Programm.
Die Einträge des über einen Klick mit der rechten Maustaste erreichbare Kontextmenü sind derzeit deaktiviert, da die entsprechenden Funktionen noch nicht implementiert wurden.
Ausdrücke inspizieren und Variablen verändern.
Ausdrücke untersuchen
Einen Ausdruck inspizieren und eine Variable verändern
Bei der Diagnose eines Programms wird der Wert eines Ausdrucks oder einer Variablen angezeigt, während das Programm angehalten ist. Manchmal ist es auch nützlich, den Wert einer Variablen abzuändern.
Wählen Sie
Falls der Ausdruck ein Variablenname ist, können Sie deren Wert ändern, indem Sie auf die
Ausführung des Programms steuern.
Ausführung steuern
Programmdaten untersuchen.
Daten untersuchen
Einen benutzerdefinierten Debugger-Befehl verwenden
Benutzerdefinierter Befehl
Ein benutzerdefinierter Befehl kann folgendermaßen an die Fehlerdiagnose gesendet werden:
Wählen Sie
Geben Sie Ihren Befehl ein.
Die Ausgabe des Befehls wird im Meldungsfenster des Debuggers angezeigt.
Der Befehl wird direkt ohne Überprüfung an den Debugger gesendet. Wenn Sie auf diese Weise einen Haltepunkt setzen, dann erscheint er nicht im
Informationen des Prozessors untersuchen.
CPU
Prozessorregister betrachten
Wählen Sie
Register, deren Wert seit dem letzten Stopp geändert wurden, werden rot dargestellt. Es ist möglich, den Wert eines beliebigen Registers zu ändern, indem Sie in die Wertspalte klicken und einen neuen Wert eingeben.
Speicher betrachten
Wählen Sie
Die erste Spalte zeigt die Speicheradressen hexadezimal an, die zweite Spalte den Speicherinhalt wiederum hexadezimal, und die letzte Spalte zeigt den Speicherinhalt im ASCII-Format an.
Der Adressierungsraum selbst eine 32-Bit-Mikroprozessors ist sehr groß (4 Gigabyte), daher ist es sehr schwierig mit Hilfe der Bildlaufleiste zu einer bestimmten Adresse zu springen. Drücken Sie die rechte Maustaste und wählen Sie
Disassemblierung ansehen
Wählen Sie
Die erste Spalte zeigt die Adresse hexadezimal an. In der zweiten Spalte darf eine mit einem Doppelpunkt abgeschlossene Beschriftung zu Zeilenanfang stehen, oder eine Anweisung in Maschinensprache, welche mit 4 Leerzeichen eingerückt ist.
Die Position des Fensters
Verwalten von Haltepunkten.
Haltepunkte
Haltepunkte werden verwendet, um die Ausführung eines Programms an bestimmten Stellen zu unterbrechen, so dass der Zustand des Programms an diesen Stellen genauer untersucht werden kann.
Haltepunkte auflisten
Wählen Sie
Die Ansicht gliedert sich in folgende Spalten:
Ort
Die Position des Haltepunkts im der Quelldatei. Wenn der Haltepunkt durch die Fehlerdiagnose festgelegt ist, werden zusätzliche Informationen wie die Funktion angezeigt, welche den Haltepunkt enthält.
Das Feld enthält die Adresse des Haltepunkts, wenn dieser durch die Fehlerdiagnose festgelegt ist.
Hier wird stets
Bedingung
Dies ist die Bedingung des Haltepunkts. Falls leer, ist keine Bedingung festgelegt.
Durchgang
Wenn der Debugger nicht läuft, zeigt diese Spalte die Nummer des Durchgangs des Haltepunkts an, oder 0, falls nichts festgelegt ist.
Wenn der Debugger läuft und die Durchgangsnummer 0 ist, dann zeigt diese Spalte die Anzahl an, wie oft dieser Haltepunkt ausgelöst wurde. Falls die Durchgangsnummer von 0 verschieden ist, werden beide Nummern angezeigt. Die Durchgangsnummer ist die zweite Zahl.
Status
Dies ist der Status des Haltepunkts. Folgende Zustände sind möglich:
Ausstehend:
Der Haltepunkt ist in Ihrem Programm nicht festgelegt.
Permanent:
Der Haltepunkt ist gesetzt (Kennung ist in Klammern angegeben).
Temporär:
Der Haltepunkt ist gesetzt, wird aber gelöscht, sobald er erreicht wurde.
Alle Haltepunkte bleiben über Anjuta-Sitzungen erhalten, selbst wenn sie auf nicht vorhandene Orte verweisen, beispielsweise eine Quelldatei in einer Bibliothek, die noch nicht geladen wurde. In diesem Fall wird der Status auf »Ausstehend« gesetzt.
Haltepunkte setzen
Wählen Sie
Geben Sie den
Eine weitere Lösung ist es, Haltepunkte ein- und auszuschalten. Wenn für die aktuelle Zeile kein Haltepunkt gesetzt ist, so wird einer hinzugefügt. Andernfalls wird dieser entfernt.
Wählen Sie
Haltepunkte bearbeiten
Der Ort eines Haltepunkts kann nicht geändert werden. Erstellen Sie stattdessen einen neuen. Die Haltebedingung oder der Durchgang können jedoch angepasst werden. So bearbeiten Sie einen Haltepunkt:
Wählen Sie einen Haltepunkt im
Klicken Sie mit der rechten Maustaste in das
Ändern Sie das Feld
Haltepunkte entfernen
Entfernen Sie Haltepunkte über die oben beschriebene Funktion
Klicken Sie mit der rechten Maustaste in das
Sie können alle Haltepunkte folgendermaßen entfernen:
Wählen Sie
Aktivieren und Deaktivieren von Haltepunkten
Gelegentlich bietet es sich an, den Haltepunkt vorübergehend zu deaktivieren, anstatt diesen zu löschen. So deaktivieren oder reaktivieren Sie einen Haltepunkt:
Klicken Sie auf
Sie können alle Haltepunkte folgendermaßen deaktivieren:
Wählen Sie
Wird zum Anlegen oder Bearbeiten von Haltepunkten verwendet
Haltepunkt-Dialog
Die Position des Haltepunkts. Sie kann für einen bestehenden Haltepunkt nicht geändert werden. Der Haltepunkt kann in einer bestimmten Zeilennummer oder an den Beginn einer Funktion festgelegt werden. Verwenden Sie eines der folgenden Formate:

Funktionsname

Die Haltebedingung ist ein Ausdruck, der zum booleschen Wert
Bei leerem Feld ist die Bedingung immer
Durchgang
Die Fehlerdiagnose kann den Haltepunkt für eine bestimmte Anzahl an Durchgängen übergehen. Wenn die Durchgangszahl ungleich Null ist, so wird die Fehlerdiagnose den Haltepunkt eine bestimmte Anzahl Durchgänge durchlaufen, bevor angehalten wird.
Die Durchgangszahl hat höhere Präferenz als die Bedingung. Nur wenn die Durchgangszahl erreicht wurde, wertet die Fehlerdiagnose die Bedingung aus und hält das Programm an, falls diese vorhanden ist.
Dialog der Einstellungen zur Erstellung mit Autotools.
Dialog der Einstellungen zur Erstellung mit Autotools
Der Dialog ermöglicht das Festlegen globaler Optionen zum Erstellen von Dateien.
Mehrere Befehle zugleich ausführen

Bei Fehlern fortfahren
Per Voreinstellung stoppt
Meldungen übersetzen
Per Voreinstellung werden Fehler und Warnungen übersetzt. Dies hat jedoch zwei Nachteile. Um Fehler und Warnungen zu erkennen, sollten die Übersetzungen in
Build-Warnungen und Fehler im Editor hervorheben
Fehlermeldungen und Warnungen während des Erstellungsvorgangs werden im Meldungsfenster angezeigt und hervorgehoben. Wenn Sie diese Option aktivieren, geschieht dies auch im Editorfenster.
Mit Administratorrechten installieren
Eine Programminstallation erfordert es, Dateien in Systemordner zu kopieren, für die in der Regel ein Benutzer keine Schreibrechte hat. Wenn dieses Ankreuzfeld ausgewählt ist, wählen Sie zwischen
Autotools-Erstellungs-Plugin
Dieses Plugin ist für autotools-Projekte ausgelegt, aber weil diese unter anderem auch »make« einbinden, ist es auch für andere Arten von Projekten geeignet, die auf »make« basieren.
Zu verwendender Make-Befehl
Nachfolgend finden Sie eine Liste der vom Plugin verwendeten Ziele. Sie sind in allen autotools-Projekten implementiert, aber Sie müssen diese selbst implementieren, wenn Sie ein eigenes »makefile« einsetzen.
object_file_name
make
Verwenden Sie dies, um eine Quelldatei zu kompilieren. Der Name der Objektdatei wird gebildet, indem die Erweiterung der Quelldatei durch die korrespondierende Objektdatei-Erweiterung ersetzt wird.
make
Verwenden Sie dies, um alle Ziele in einem Ordner zu erstellen.
make install
Verwenden Sie dies, um alle Ziele in einem Ordner zu installieren.
make clean
Verwenden Sie dies, um alle in einem Ordner erstellten Dateien zu löschen.
make dist
Verwenden Sie dies, um ein verteilbares Paket zu erstellen. Es wird nur im Projektordner aufgerufen.
Da »make« über Standardregeln verfügt, ist es möglich, ein C-Programm ohne Makefile zu erstellen und zu linken. Sie können ein C-Programm aus einer einzelnen Quelldatei erstellen, ohne Makefile oder umgebendes Projekt.
Ziele oder das Projekt installieren.
Ziele installieren
Es werden einige Datendateien wie Beschreibungen der Benutzerschnittstelle benötigt, es sei denn, Ihr Projekt ist sehr einfach angelegt. Diese Dateien werden üblicherweise in Standard-Ordner kopiert und von dort eingelesen, das heißt, Sie können Ihr Programm nicht im Erstellungsordner ausführen. Sie müssen eine Installation durchführen, um alle Dateien in die zugehörigen Ordner wie beispielsweise einen Unterordner von
Es gibt mehrere Möglichkeiten, Ziele oder ein Projekt zu installieren.
Wählen Sie
Wählen Sie
Wählen Sie eine Datei oder einen Ordner in der
Drücken Sie die rechte Maustaste. Das
Wählen Sie in der
Drücken Sie die rechte Maustaste zum Öffnen des
Wenn Sie das Programm in einen Systemordner installieren, müssen Sie für ausreichende Berechtigungen
Ein Distributionspaket erstellen.
Ein Distributionspaket erstellen
Der übliche Weg, ein autotools-Projekt zu verbreiten, ist der Einsatz eines komprimierten tar-Archivs mit allen Quelldateien. Der Benutzer muss es dekomprimieren, compilieren und anschließend auf dem System installieren mit folgenden Befehlen in genau dieser Reihenfolge:
Wählen Sie
Ein autotools-Projekt konfigurieren und Konfigurationen verwalten.
Ein Projekt konfigurieren
Vor dem Compilieren und Erstellen von Dateien muss ein autotools-Projekt konfiguriert werden. Dieser Schritt ist zum Einstellen globaler Optionen erforderlich, um zu prüfen, ob alle benötigten Bibliotheken und Programme auf dem System installiert sind, und um die passenden Erstellungsskripte zu generieren.
Das Projekt konfigurieren
Wählen Sie
Die voreingestellte Konfiguration beibehalten, eine neue Konfiguration wählen oder eine neue erstellen. Sie können alle Konfigurationsoptionen einsehen und ändern. Lesen Sie
Klicken Sie auf
Die Konfiguration könnte scheitern, wenn einige Bibliotheken oder Programme nicht oder nicht in der richtigen Version installiert sind. Die Fehlermeldung informiert Sie darüber, was genau fehlt.
Die Konfiguration ändern
Wählen Sie
Wenn das Projekt noch nicht konfiguriert wurde, so wird es automatisch vor dem Erstellen einer Datei konfiguriert.
Konfiguration entfernen
Es ist vergleichbar mit dem Bereinigen eines Projekts, aber es werden noch mehr Dateien entfernt. Sie müssen Ihr Projekt danach neu konfigurieren, um es erstellen zu können.
Wählen Sie
Konfigurationsdialog für Autotools
Konfigurationsdialog für Autotools
Der Dialog
Projekt neu generieren
Wenn ausgewählt, wird das Projekt vollständig neu generiert, andernfalls wird nur neu konfiguriert.
Konfiguration
Mit diesem Eingabefeld bennenen Sie verschiedene Konfigurationen, jede mit eigenen Optionen und eigenem Erstellungsordner. Normalerweise gibt es bereits eine Vorgabe-Konfiguration, eine Fehlerdiagnose-Konfiguration für einfache Fehlerdiagnose (zwischenläufige Variablen und Befehlsreihenfolge bleiben unberührt) und eine optimierte Konfiguration, die schnellere Programme bei längerer Erstellungsdauer produziert. Es können zusätzliche eigene Konfigurationen definiert werden.
Erstellungsordner
Wählen Sie den Erstellungsordner. Dieser darf auch der Projektordner oder ein Unterordner sein. Das ist speziell für den Wechsel zwischen verschiedenen Konfigurationen nützlich, um ein erneutes Erstellen des gesamten Projekts zu vermeiden.
Mit autotools ist es nicht möglich, eine Konfiguration für einen anderen Ordner zu verwenden, wenn bereits eine Konfiguration den Projektordner verwendet. Diese muss zuvor entfernt werden.
Einige autotools-Projekte können nicht außerhalb der Projektordners erstellt werden. Es können zwar dennoch verschiedene Konfigurationen eingesetzt werden, aber alle müssen den Projektordner verwenden und alles muss bei Konfigurationswechsel neu compiliert werden.
Konfigurationsoptionen
Dieses Textfeld führt alle vom Konfigurationsvorgang eingesetzten Befehlszeilenargumente auf. Alle Argumente werden durch Leerzeichen getrennt und müssen in Zitatzeichen gesetzt werden, wenn sie Leerzeichen enthalten. Jede Konfiguration schreibt Voreinstelllungen in dieses Feld, welche Sie ändern können.
Jedes autotools-Projekt unterstützt bestimmte Argumente, kann aber auch über spezifische Argumente verfügen. Der Befehl
Dateien kompilieren.
Dateien kompilieren
Die meisten Programmiersprachen ermöglichen das Compilieren von einzelnen Quelldateien. Die Datei wird gelesen, auf Syntaxfehler geprüft und in eine vorläufige Objektdatei umgewandelt. Die meisten Fehler passieren in diesem Schritt. Es ist daher sinnvoll, eine Datei nach Bearbeitung zu compilieren und auf Fehler prüfen zu lassen. Dazu gibt es mehrere Möglichkeiten.
Wählen Sie
Wählen Sie in der
Drücken Sie die rechte Maustaste. Das
Wählen Sie in der
Drücken Sie die rechte Maustaste. Das
Sie müssen Ihre Datei vor der Kompilierung nicht notwendigerweise speichern. Dies erledigt
Erstellte Dateien entfernen.
Ziele bereinigen
Es kann nützlich sein, alle durch den Erstellungsprozess erstellten Dateien zu löschen. Zum Beispiel, wenn alle Abhängigkeiten nicht berücksichtigt werden und eine veränderte Datei keine erwartete erneute Compilierung auslöst. Das Löschen aller Dateien löst dies. Dies kann auf mehrere Weisen geschehen:
Wählen Sie
Wählen Sie
Drücken Sie die rechte Maustaste. Das
Drücken Sie die rechte Maustaste zum Öffnen des
Ziele oder das Projekt erstellen.
Ziele erstellen
Ein Ziel ist eine Datei, die aus Quelldateien erstellt wird. Üblicherweise ist es ein Programm oder eine Bibliothek, aber es kann auch eine Dokumentation sein, falls Weiterverarbeitung in irgendeiner Form notwendig ist.
Der Befehl zur Erstellung compiliert alle erforderlichen Quelldateien und verlinkt diese gegebenenfalls mit anderen Dateien wie beispielsweise Bibliotheken, um das Ziel zu erstellen. Falls einige Quelldateien bereits compiliert oder nicht verändert worden sind, so werden diese nicht erneut compiliert, um Zeit zu sparen. Es gibt mehrere Wege, eine Erstellung anzustoßen.
Wählen Sie
Wählen Sie
Drücken Sie die rechte Maustaste. Das
Drücken Sie die rechte Maustaste zum Öffnen des
Johannes Schmid
jhs@gnome.org
Erste Schritte mit dem Editor für grafische Benutzeroberflächen
Den Editor für grafische Benutzeroberflächen starten
Eine neue Oberflächendatei erstellen
Keine vorhandene Oberflächendatei öffnen
Widgets hinzufügen
Widgets in Containern organisieren
Häufige Widgets und deren Zweck
Widget-Eigenschaften hinzufügen
Signale automatisch verbinden
Signale zum Signaleditor hinzufügen
Die Signalsteuerung erstellen
C
Python
Vala
Navigieren durch den Code mit dem Symbolbrowser
Verwendung des Symbolbrowsers
Navigieren im Editor
Auto-Einrücken
Konfigurieren des automatischen Einrückens
Manuelle Konfiguration
Modelines
Codeblöcke einrücken
Verwendung der API-Referenz
Durchsuchen der API-Referenz
Mit Tastenkürzeln im Editor zur API-Referenz springen
Automatisches Vervollständigen und Calltips
Die automatische Vervollständigung funktioniert nicht
Effektives Coding mit Hilfe von Calltips
original
Hilfe zu Anjuta DevStudio.
Anjuta
Anjuta DevStudio

Projektverwaltung
Coding und Navigieren durch den Code
Projekt erstellen
Fehlerdiagnoseprogramm
Editor für Benutzeroberflächen
Referenz
Mario Blättermann <mario\.blaettermann\@gmail\.com>, 2009-2011
Jonas Rebmann <jonas\.rebmann\@googlemail\.com>, 2010
Christian Kirbach <Christian\.Kirbach\@googlemail\.com>, 2010, 2011