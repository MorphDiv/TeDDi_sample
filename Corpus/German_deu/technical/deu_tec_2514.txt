# language_name_wals:	German
# language_name_glotto:	German
# iso639_3:	deu
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	KDEdoc
# source:	https://object.pouta.csc.fi/OPUS-KDEdoc/v1/raw/de.zip
# copyright_short:	http://opus.nlpl.eu/KDEdoc.php
# copyright_long:	http://opus.nlpl.eu/KDEdoc.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Arbeiten mit Syntax-Hervorhebungen
\xDCberblick
Syntax-Hervorhebungen bewirken, dass der Editor den Text automatisch in verschiedenen Farben und Schriftstilen anzeigt, abh\xE4ngig von der Fuktion der Zeichenkette in Beziehung zum Zweck des Dokumentes.
Zum Beispiel k\xF6nnen in Quelltext Kontrollbefehle fett dargestellt werden, w\xE4hrend Daten und Kommentare andere Farben als der Rest des Textes bekommen.
Dies verbessert die Lesbarkeit des Textes erheblich und verhilft damit dem Autor zu mehr Effizienz und Produktivit\xE4t.
Eine Perl-Funktion, mit Hervorhebungen angezeigt.
Die selbe Perl-Funktion, ohne Hervorhebungen.
Welche der beiden ist einfacher zu lesen?
Kate enth\xE4lt ein flexibles, konfigurierbares und leistungsf\xE4higes System f\xFCr Syntax-Hervorhebungen, und die Standarddistribution enth\xE4lt bereits Definitionen f\xFCr eine Anzahl von Programmiersprachen, Markup- und Scriptsprachen sowie andere Textformaten.
Au\xDFerdem k\xF6nnen Sie eigene Definitionen in einfachen XML -Dateien erstellen.
Kate erkennt auf Basis des MIME -Typs, der Dateiendung oder des Inhalts des Dokumentes automatisch die richtigen Regeln f\xFCr die Syntax-Hervorhebungen bereits beim \xD6ffnen des Dokuments.
Die Schriftstile und Farben, die von jeder Syntax-Hervorhebungsdefinition benutzt werden sollen sowie die MIME -Typen, f\xFCr die diese benutzt werden sollen, k\xF6nnen Sie im Dialog Hervorhebungen einrichten des Konfigurationsdialogs bearbeiten.
Syntax-Hervorhebungen sind gedacht, um die Lesbarkeit von Text zu verbessern, aber nicht geeignet, um die Richtigkeit des Quelltextes zu \xFCberpr\xFCfen.
Die Erstellung der Regeln f\xFCr die Hervorhebungen ist kompliziert, abh\xE4ngig davon, welches Format Sie benutzen.
In manchen F\xE4llen sind die Autoren der Regeln stolz, wenn 98% des Textes korrekt hervorgehoben werden, meistens jedoch sehen Sie die nicht korrekten 2% nur bei seltenen Konstruktionen.
Sie k\xF6nnen zus\xE4tzliche oder aktualisierte Syntax-Hervorhebungsdefinitionen von der Kate -Webseite durch Klicken auf Herunterladen im Dialog Hervorhebungen einrichten des Konfigurationsdialogs einrichten bzw. aktualisieren.
Das Kate Syntax-Hervorhebungssystem
Dieser Abschnitt behandelt die Mechanismen des Kate Syntax-Hervorhebungssystems genauer, wenn Sie selbst Definitionen erstellen oder ver\xE4ndern m\xF6chten, sollten Sie diesen genau lesen.
Wie es funktioniert
Immer, wenn Sie ein Dokument \xF6ffen, ist eines der ersten Dinge, die Kate macht, festzustellen, welche Syntaxdefinition f\xFCr dieses Dokument benutzt werden soll.
W\xE4hrend Sie den Text lesen und neuen Text eingeben, analysiert das Syntax-Hervorhebungssystem den Text anhand der Regeln in der Syntaxdefinition und markiert ihn dementsprechend.
Wenn Sie Text eingeben, wird der neue Text sofort analysiert und markiert.
Regeln f\xFCr das Erkennen von Text, organsiert in Kontextbl\xF6cken
Schl\xFCsselwortlisten
Stildefinitionen
Beim Analysieren von Text werden die Entdeckungsregeln in der Reihenfolge, in der sie definiert wurden, \xFCberpr\xFCft und wenn der Anfang des aktuellen Textes mit einer Definition \xFCbereinstimmt, wird der zugeh\xF6rige Kontext benutzt.
Der n\xE4chste Startpunkt wird nach dem Ende des erkannten Bereichs gesetzt und von dort aus wird eine neue Schleife f\xFCr die Regeln beginnt, beginnend mit dem Kontext der gerade gefundenen Regel.
Regeln
Die Entdeckungsregeln sind das Herzst\xFCck des Syntax-Hervorhebungssystems.
Eine Regel besteht aus einer Zeichenkette, einem Zeichen oder einem regul\xE4ren Ausdruck.
Mit diesen wird der zu analysierende Text verglichen.
Sie enthalten Informationen, welche Darstellung f\xFCr das erkannte St\xFCck Text verwendet werden soll und ob entweder zu einem explizit angegebenem Kontext oder zum vorher vom Text benutzten Kontext gewechselt werden soll.
Die Regeln sind in Kontextgruppen organisiert.
Eine Kontextgruppe wird f\xFCr die grundlegenden Textkonzepte innerhalb des Formates benutzt, z.B. f\xFCr Textteile in Anf\xFChrungszeichen oder Kommentarbl\xF6cke in Programmquelltext.
Dadurch wird sichergestellt, dass sich das Syntax-Hervorhebungssystem nicht durch alle Regeln hindurcharbeiten muss, wenn nicht n\xF6tig, und dass einige Zeichenketten im Text abh\xE4ngig vom aktuellen Kontext unterschiedlich behandelt werden k\xF6nnen.
Kontextstile und Schl\xFCsselw\xF6rter
In einigen Programmiersprachen werden Integerzahlen durch den Kompiler (das Programm, das den Quelltext in ein ausf\xFChrbares Programm \xFCbersetzt) anders behandelt als Gleitkommazahlen und es gibt Zeichen, die eine spezielle Bedeutung innerhalb einer in Anf\xFChrungszeichen eingeschlossenen Zeichenkette haben.
In solchen F\xE4llen ist es sinnvoll, diese unterschiedlich darzustellen, so dass sie beim Lesen einfach von umgebenden Text zu unterscheiden sind.
Auch wenn diese keine speziellen Kontexte repr\xE4sentieren, k\xF6nnen sie durch das Syntax-Hervorhebungssystem erkannt und anders dargestellt werden.
Eine Syntaxdefinition kann so viele verschiedene Stile, wie im benutzten Format notwendig enthalten.
In vielen Formaten gibt es Listen mit W\xF6rtern, die einem speziellen Konzept zugeh\xF6rig sind.
In Programmiersprachen sind z.B. die Kontrollanweisungen ein Konzept, die Datentypen ein anderes und die eingebauten Funktionen ein drittes.
Das Syntax-Hervorhebungssystem von Kate kann benutzt werden, um solche W\xF6rter anhand der Listen zu finden und zur Hervorhebung der Konzepte im Text zu markieren.
Standardstile
Wenn Sie eine C++ Quelltextdatei, eine Java -Quelltextdatei und eine HTML -Datei in Kate \xF6ffnen, sehen Sie dass auch in unterschiedlichen Formaten und damit unterschiedlichen Worten, die spezielle Behandlung bekommen, die benutzten Farben dieselben sind.
Der Grund daf\xFCr ist, dass Kate vordefinierte Standardstile benutzt, die von den individuellen Syntaxdefinitionen verwendet werden.
Dadurch wird die Erkennung von \xE4hnlichen Konzepten in verschiedenen Textformaten einfach.
Kommentare z.B. gibt es in fast allen Programmiersprachen, Skripten und Markup-Sprachen; diese werden in allen Sprachen gleich dargestellt, so dass Sie sich auf die Arbeit konzentrieren k\xF6nnen und nicht \xFCber den Zweck einzelner Eintr\xE4ge nachdenken m\xFCssen.
Alle Stile in einer Syntaxdefinition nutzen einen der Standardstile.
Einige wenige Syntaxdefinitionen nutzen mehr als Stile, Standardstile vorhanden sind, wenn Sie ein Format sehr oft benutzen, kann es die Arbeit wert sein, den Konfigurationsdialog zu starten und nachzusehen, ob mehrere Konzepte die selben Stile benutzen.
In der Programmiersprache Perl z.B. gibt es zwei Typen von Strings, so dass Sie die Hervorhebung durch eine etwas andere Darstellung des zweiten Typs verbessern k\xF6nnen.
Die Hervorhebungsdefinition f\xFCr das XML Format
\xDCberblick
Dieser Abschnitt ist ein \xDCberblick \xFCber die Hervorhebungsdefinition f\xFCr das XML Format..
Es beschreibt die Hauptbestandteile, deren Bedeutung und Nutzung; und im Detail die Erkennungsregeln.
Hauptbestandteile der Kate -Hervorhebungsdefinitionen
Der Abschnitt General
Der Abschnitt General enth\xE4lt Informationen \xFCber Kommentare in der beschriebenen Programmiersprache und legt fest, ob bei Schl\xFCsselw\xF6rtern Gro\xDF- und Kleinschreibung beachtet wird oder nicht.
Highlighting
Der Abschnitt Highlighting enth\xE4lt alle Daten, die zum Analysieren und Darstellen von Text gebraucht werden.
Im Einzelnen sind das:
ItemDatas
Enth\xE4lt ItemData-Elemente, jedes definiert einen Stil.
Schl\xFCsselwortlisten
Jede Liste hat einen Namen und kann eine beliebige Anzahl von Elementen enthalten.
Contexts
Enth\xE4lt Kontexts, die die Syntax-Erkennungsregeln enthalten.
Hervorhebungserkennungsregeln
Dieser Abschnitt beschreibt die Hervorhebungserkennungsregeln
Jede Regel kann auf null oder mehrere Zeichen am Anfang der untersuchten Zeichenkette zutreffen.
Wenn eine \xDCbereinstimmung gefunden wird, wird den erkannten Zeichen der Stil oder die Eigenschaft, die durch die Regel festgelegt wurde, zugeordnet und die Regel kann au\xDFerdem ein Umschalten des aktuellen Kontexts festlegen.
Die Eigenschaften attribute und context sind f\xFCr alle Regeln gemeinsam.
Eine Regel sieht wie folgt aus:
Die attribute (Eigenschaft) legt den Stil fest, der f\xFCr die erkannten Zeichen benutzt werden soll und der context (Kontext) legt den Kontext fest, der ab hier benutzt werden soll.
Der context (Kontext) kann durch Folgendes identifiziert werden.
Eine Anweisung, die vorgibt, im aktuellen Kontext zu bleiben (#stay), oder zu einem vorher in der Zeichenkette benutzten Kontext zur\xFCckzuspringen (#pop).
Zum Zur\xFCckgehen \xFCber mehrere Schritte kann das Schl\xFCsselwort #pop wiederholt werden: #pop#pop#pop
Regeln k\xF6nnen child rules (Unterregeln) haben, deren Einhaltung nur dann untersucht wird, wenn die Einhaltung der Hauptregel erkannt wurde.
Der gesamten erkannten Zeichenkette wird die durch die Hauptregel festgelegte attribute (Eigenschaft) zugeordnet.
Eine Regel mit Unterregel sieht z.B. so aus:
Regelspezifische Eigenschaften sind unterschiedlich und werden im Folgenden beschrieben.
Die Regeln im Einzelnen:
DetectChar
Entdeckt ein einzelnes bestimmtes Zeichen.
H\xE4ufig zum Finden des Endes von Zeichenketten in Anf\xFChrungszeichen benutzt.
Die Eigenschaft char definiert das zu erkennende Zeichen.
Detect2Chars
Entdeckt zwei bestimmte Zeichen in einer bestimmten Reihenfolge.
Die Eigenschaft char definiert das erste zu erkennende Zeichen, char1 das zweite.
AnyChar
Entdeckt ein Zeichen aus einem bestimmten Satz von Zeichen.
Die Eigenschaft String definiert den Satz der Zeichen.
StringDetect
Entdeckt eine bestimmte Zeichenkette.
Die Eigenschaft String definiert die zu entdeckende Zeichenkette.
Die Eigenschaft insensitive ist standardm\xE4\xDFig auf FALSE gesetzt und wird an die Zeichenkettenvergleichsfunktion \xFCbergeben.
Wenn der Wert auf TRUE gesetzt wird, wird Gro\xDF- und Kleinschreibung ignoriert.
RegExpr
Pr\xFCft die \xDCbereinstimmung mit einem regul\xE4ren Ausdruck.
Die Eigenschaft String definiert den regul\xE4ren Ausdruck.
Die Eigenschaft insensitive ist standardm\xE4\xDFig auf FALSE gesetzt und wird an die Funktion zur Auswertung des regul\xE4ren Ausdrucks \xFCbergeben.
Die Eigenschaft minimal ist standardm\xE4\xDFig auf FALSE gesetzt und wird an die Funktion zur Auswertung des regul\xE4ren Ausdrucks \xFCbergeben.
Sehen Sie unter Regul\xE4re Ausdr\xFCcke f\xFCr weitere Informationen zu diesen nach.
Keyword
Erkennt ein Schl\xFCsselwort aus einer angegebenen Liste.
Die Eigenschaft String definiert die Schl\xFCsselwortliste durch deren Name.
Eine Liste mit diesem Namen muss vorhanden sein.
Int
Erkennt eine ganze Zahl(integer).
<Int (common attributes) />
Diese Regel hat keine Eigenschaften.
H\xE4ufig werden Unterregeln dazu benutzt, Kombinationen mit L oder U nach der Zahl zu entdecken, die den Typ der ganzen Zahl(integer) anzeigen.
Float
Entdeckt eine Gleitkommazahl.
<Float (common attributes) />
Diese Regel hat keine Eigenschaften.
HlCOct
Entdeckt eine oktale Zahl.
<HlCOct (common attributes) />
Diese Regel hat keine Eigenschaften.
HlCHex
Entdeckt eine Hexazahl.
<Int (common attributes) />
Diese Regel hat keine Eigenschaften.
HlCStringChar
Entdeckt ein Steuerzeichen.
<HlCStringChar (common attributes) />
Diese Regel hat keine Eigenschaften.
Solche Zeichen sind durch druckbare Zeichen dargestellte nichtdruckbare Zeichen, die in Programmquelltexten h\xE4ufig benutzt werden. z.B.: \n (Zeilenvorschub) oder (TAB)
Die folgenden Zeichen werden erkannt, wenn sie einem\ folgen: abefnrtv "'?.
Zus\xE4tzlich werden auch hexadezimale (\xff) oder oktale (\033) Zahlen nach einem\ erkannt.
RangeDetect
Entdeckt eine Zeichenkette mit definierten Anfangs- und Endzeichen.
char definiert das Zeichen am Anfang des Bereichs, char2 das Zeichen am Ende des Bereichs.
Diese Regel ist f\xFCr das Entdecken von kleinen Zeichenketten in Anf\xFChrungszeichen n\xFCtzlich, kann aber wegen der verwendeten Funktion keine \xFCber mehrere Zeilen gehenden Zeichenketten entdecken.
LineContinue
Entdeckt das Zeilenende.
Diese Regel hat keine Eigenschaften.
Diese Regel ist f\xFCr das Umschalten des Kontextes am Zeilenende n\xFCtzlich.