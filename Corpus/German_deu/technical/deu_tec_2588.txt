# language_name_wals:	German
# language_name_glotto:	German
# ISO_6393:	deu
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	KDEdoc
# source:	https://object.pouta.csc.fi/OPUS-KDEdoc/v1/raw/de.zip
# copyright_short:	http://opus.nlpl.eu/KDEdoc.php
# copyright_long:	http://opus.nlpl.eu/KDEdoc.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Anwendungen auf aRts portieren
artsdsp verwenden
Die Anwendung artsdsp, die weiter oben beschrieben wird, erlaubt den meisten Standardanwendungen, die direkt auf die Audio-Ger\xE4te zugreifen, unter aRts problemlos zu funktionieren.
Die meisten Anwendungen, die den Enlightenment Sound Daemon (esd) verwenden, funktionieren ebenfalls, indem esd unter artsdsp gestartet wird.
Damit existiert eine gute \xDCbergangsl\xF6sung, um Anwendungen auf KDE zu portieren.
Es erlaubt nat\xFCrlich keiner Anwendung, direkt von aRts zu profitieren und alle F\xE4higkeiten von aRts, wie z.B. die Verwendung von Modulen und Multimediastr\xF6men, zu verwenden.
Wenn die Anwendung mehr k\xF6nnen soll, als nur einfache Audiodateien abzuspielen, sollte man Unterst\xFCtzung f\xFCr aRts hinzuf\xFCgen.
Die Anwendung kann dann viele Aufgaben an aRts \xFCbertragen -- sie kann die in aRts enthaltenen Funktionen verwenden, um Dinge wie unterschiedliche Codecs, Medienformate oder die Kontrolle der Audioger\xE4te.
aRts -Unterst\xFCtzung hinzuf\xFCgen
Die Entscheidung wird unter anderem davon abh\xE4ngen, welche Art von Medienstrom (Klang, MIDI, CD -Audio, u.s.w.) Sie verwenden wollen, welche API -F\xE4higkeiten Sie ben\xF6tigen und ob Sie in C++ programmieren.
In den meisten F\xE4llen sollte die Entscheidung abh\xE4ngig von den ben\xF6tigten F\xE4higkeiten klar sein
Anwendungen, die auf anderen Architekturen als KDE funktionieren sollen, k\xF6nnen nicht davon ausgehen, das aRts immer vorhanden ist.
Durch eine Plugin-Architektur k\xF6nnen Sie geschickt verschiedene Multimediaumgebungen unterst\xFCtzen.
Wenn Sie das Plugin- API au\xDFerdem ver\xF6ffentlichen und gut dokumentieren (besonders f\xFCr nicht als Quelltext verf\xFCgbare Anwendungen), erm\xF6glichen Sie auch anderen Entwicklern, ein aRts -Plugin f\xFCr Ihre Anwendung zu schreiben.