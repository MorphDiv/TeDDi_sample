# language_name_wals:	German
# language_name_glotto:	German
# ISO_6393:	deu
# year_composed:	NA
# year_published:	2012
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	Ubuntu
# source:	https://object.pouta.csc.fi/OPUS-Ubuntu/v14.10/raw/de.zip
# copyright_short:	http://opus.nlpl.eu/Ubuntu.php
# copyright_long:	http://opus.nlpl.eu/Ubuntu.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Konvertierung von %s nach %s wird von iconv nicht unterstützt
iconv_open
keine Implementation für iconv, es kann nicht von %s nach %s konvertiert werden
Zeichen 0x%lx ist nicht im regulären Quellzeichensatz
Konvertierung in Zeichensatz der Ausführung
Zeichen 0x%lx ist kein Unibyte im Ausführungs-Zeichensatz
Zeichen %x ist nicht in NFKC
universelle Zeichennamen sind nur in C++ und C99 gültig
die Bedeutung von '\\%c' ist in traditionellem C anders
In _cpp_valid_ucn, aber kein UCN
unvollständiger Universal-Zeichenname %.*s
»%.*s« ist kein gültiges universelles Zeichen
'$' in Bezeichner oder Zahl
universelles Zeichen %.*s ist nicht gültig in Bezeichner
universelles Zeichen %.*s ist nicht gültig am Anfang eines Bezeichners
UCN wird in Quellzeichensatz konvertiert
UCN wird in Ausführungszeichensatz konvertiert
die Bedeutung von '\\x' ist in traditionellem C anders
\\x ohne folgende Hex-Ziffern verwendet
Hex-Fluchtsequenz außerhalb des Wertebereiches
Oktal-Fluchtsequenz außerhalb des Wertebereiches
die Bedeutung von '\\a' ist in traditionellem C anders
nicht-ISO-standardkonforme Fluchtsequenz '\\%c'
unbekannte Fluchtsequenz: '\\%c'
unbekannte Fluchtsequenz: '\\%s'
Fluchtsequenz wird in Zeichensatz der Ausführung konvertiert
Zeichenkonstante zu lang für ihren Typ
Zeichenkonstante mit mehreren Zeichen
Leere Zeichenkonstante
Fehler beim Konvertieren von %s nach %s
mehrere Token am Ende der Direktive #%s
#%s ist eine Erweiterung des GCC
#%s ist eine veraltete Erweiterung des GCC
es wird empfohlen, in traditionellem C nicht #elif zu verwenden
traditionelles C ignoriert #%s mit eingerücktem #
es wird empfohlen, #%s vor traditionellem C mit # zu verbergen
das Einbetten einer Direktive innerhalb von Makroargumenten ist nicht portierbar
der Stil der line-Direktive ist eine Erweiterung des GCC
ungültige Präprozessordirektive #%s
»defined« kann nicht als Makroname verwendet werden
»%s« kann nicht als Makroname verwendet werden, da es ein Operator in C++ ist
kein Makroname in Direktive #%s angegeben
Makronamen müssen Bezeichner sein
»%s« wird un-definiert
fehlendes abschließendes »>«-Zeichen
#%s erwartet "DATEINAME" oder <DATEINAME>
leerer Dateiname in #%s
#include ist zu tief geschachtelt
#include_next in erster Quelldatei
ungültiges Kennzeichen »%s« in line-Direktive
unerwartetes Dateiende nach #line
»%s« hinter #line ist keine positive Ganzzahl
Zeilennummer ist außerhalb des Wertebereiches
»%s« ist kein gültiger Dateiname
»%s« hinter # ist keine positive Ganzzahl
%s
ungültige #%s-Direktive
Pragmas im Namespace »%s« werden ohne passende Namensauflösung registriert
Pragma »%s« wird mit Namensauflösung und ohne Namespace registriert
»%s« wird sowohl als Pragma als auch als Pragma-Namespace registriert
#pragma %s %s ist bereits registriert
#pragma %s ist bereits registriert
Pragma mit NULL-Handler wird registriert
#pragma once in Hauptdatei
ungültige #pragma push_macro Direktive
ungültige #pragma pop_macro Direktive
ungültige #pragma GCC Poison Direktive
schlechtes existierendes Makro »%s«
#pragma system_header außerhalb include-Datei ignoriert
Quelldatei %s kann nicht gefunden werden
aktuelle Datei ist älter als %s
_Pragma nimmt ein geklammertes Zeichenkettenliteral
#else ohne #if
#else hinter #else
die Bedingung begann hier
#elif ohne #if
#elif hinter #else
#endif ohne #if
fehlendes '(' hinter Prädikat
fehlendes ')', um Antwort abzuschließen
Prädikatantwort ist leer
Behauptung ohne Prädikat
Prädikat muss ein Bezeichner sein
»%s« wieder behauptet
unbeendetes #%s
nicht beendeter Kommentar
Standardausgabe
%s: %s
zu viele Dezimalpunkte in Zahl
Festkommakonstanten sind eine GCC-Erweiterung
ungültige Ziffer »%c« in binärer Konstante
ungültige Ziffer »%c« in Oktal-Konstante
ungültiger Prefix »0b« für Gleitkommakonstante
keine Ziffern in hexadezimaler Gleitkommakonstante
Verwendung von hexadezimaler C99-Gleitkommakonstante
Exponent hat keine Ziffern
hexadezimale Gleitkommakonstanten benötigen Exponenten
ungültiger Suffix »%.*s« an Gleitkommakonstante
traditionelles C lehnt den Suffix »%.*s« ab
Suffix an Gleitkommakonstante ist eine GCC-Erweiterung
ungültiger Suffix »%.*s« mit hexadezimaler Gleitkommakonstante
dezimale Gleitkommakonstanten sind eine GCC-Erweiterung
ungültiger Suffix »%.*s« an Ganzzahlkonstante
C++0x long long Ganzzahlkonstante verwendet
C99 long long Ganzzahlkonstante verwendet
imaginäre Konstanten sind eine GCC-Erweiterung
binäre Konstanten sind eine GCC-Erweiterung
Ganzzahlkonstante ist zu groß für ihren Typ
Ganzzahlkonstante ist so groß, dass sie vorzeichenlos ist
fehlendes ')' hinter »defined«
Operator »defined« erfordert einen Bezeichner
(»%s« ist ein alternatives Token for »%s« in C++)
diese Verwendung von »defined« könnte nicht portierbar sein
benutzerdefiniertes Symbol in Präprozessorausdruck
Gleitkommakonstante in Präprozessorausdruck
imaginäre Zahl in Präprozessorausdruck
»%s« ist nicht definiert
Assertions sind eine GCC-Erweiterung
Assertions sind eine veraltete Erweiterung
fehlender binärer Operator vor Token »%s«
Token »%s« ist nicht gültig in Präprozessorausdrücken
fehlender Ausdruck zwischen '(' und ')'
%s ohne Ausdruck
Operator »%s« hat keinen rechten Operanden
Operator »%s« hat keinen linken Operanden
':' ohne vorangehendes '?'
unausgeglichener Keller in %s
unmöglicher Operator '%u'
fehlendes ')' in Ausdruck
'?' ohne folgendes ':'
Ganzzahlüberlauf in Präprozessorausdruck
fehlendes '(' in Ausdruck
der linke Operand von »%s« ändert bei der Weitergabe das Vorzeichen
der rechte Operand von »%s« ändert bei der Weitergabe das Vorzeichen
traditionelles C weist den unären Plus-Operator zurück
Kommaoperator in Operand von #if
Division durch Null in #if
NULL-Verzeichnis in find_file
ein oder mehrere PCH-Dateien wurden gefunden, aber sie sind ungültig
-Winvalid-pch für mehr Informationen verwenden
%s ist ein Block-Gerät
%s ist zu groß
%s ist kürzer als erwartet
kein Include-Pfad, um %s zu finden
Mehrere Include-Wächter könnten nützlich sein für:
cppchar_t muss ein vorzeichenloser Typ sein
Präprozessorarithmetik hat maximale Präzision von %lu Bits; Ziel erfordert %lu Bits
CPP-Arithmetik muss mindestens so genau sein wie das Ziel int
Ziel-char ist weniger als 8 Bits breit
Ziel-wchar_t ist schmaler als Ziel char
Ziel-int ist schmaler als Ziel-char
CPP Halb-Ganzzahl ist schmaler als CPP-Zeichen
CPP kann auf diesem Computer keine Wide-Zeichenkonstanten über %lu Bits Breite behandeln, das Ziel benötigt %lu Bits
Backslash und Newline durch Leerzeichen getrennt
Backslash-Newline am Dateiende
Trigraph ??%c in %c konvertiert
Trigraph ??%c ignoriert, -trigraphs zum Aktivieren verwenden
»/*« innerhalb des Kommentars
%s in Präprozessordirektive
Null-Zeichen ignoriert
»%.*s« ist nicht in NFKC
»%.*s« ist nicht in NFC
Versuch, schlechtes »%s« zu verwenden
__VA_ARGS__ kann nur in Erweiterung eines variadischen C99-Makros auftreten
Bezeichner »%s« ist ein besonderer Operatorname in C++
Roh-Zeichenketten-Trennsymbol länger als 16 Zeichen
ungültiges Zeichen '%c' in Roh-Zeichenketten-Trennsymbol
unbeendete Roh-Zeichenkette
Null-Zeichen im Literal erhalten
fehlendes abschließendes Zeichen %c
C++-Stil-Kommentare sind in ISO-C90 nicht erlaubt
(dies wird nur einmal pro Eingabedatei gemeldet)
mehrzeiliger Kommentar
nicht buchstabierbares Token %s
Makro »%s« wird nicht benutzt
ungültiges eingebautes Makro »%s«
Datum und Zeit der Datei konnten nicht bestimmt werden
Datum und Zeit konnten nicht bestimmt werden
__COUNTER__ innerhalb von Anweisung mit -fdirectives-only expandiert
ungültiges Zeichenkettenliteral, abschließendes '\\' wird ignoriert
das Einfügen von »%s« und »%s« ergibt kein gültiges Präprozessor-Token
ISO-C99 erfordert, dass Restargumente verwendet werden
Makro »%s« erfordert %u Argumente, aber nur %u wurden angegeben
dem Makro »%s« wurden %u Argumente übergeben, aber es nimmt nur %u
unvollendete Argumentliste beim Makroaufruf »%s«
funktionsähnliches Makro »%s« muss mit Argumenten in traditionellem C verwendet werden
Beim Ausführen des Argument %2$d des Makros %1$s: Leere Makroargumente sind nach ISO-C90 und ISO-C++98 unbestimmt
doppelter Makroparameter »%s«
»%s« darf nicht in Makroparameterliste auftreten
Makroparameter müssen mit Komma getrennt sein
Parametername fehlt
anonyme variadische Makros wurden in C99 eingeführt
ISO-C erlaubt keine benannten variadischen Makros
fehlendes ')' in Makroparameterliste
'##' kann nicht an den Enden einer Makroexpansion auftreten
ISO-C99 erfordert Whitespace hinter Makroname
Whitespace hinter Makroname fehlt
'#' wird nicht von einem Makroparameter gefolgt
»%s« redefiniert
dies ist die Stelle der vorherigen Definition
Makroargument »%s« würde in traditionellem C zum String gewandelt werden
ungültiger Hash-Typ %d in cpp_macro_definition
beim Schreiben des vorkompilierten Headers
%s: nicht verwendet, da »%.*s« vergiftet ist
%s: nicht verwendet, da »%.*s« nicht definiert
%s: nicht verwendet, da »%.*s« als »%s« statt als »%.*s« definiert wurde
%s: nicht verwendet, da »%s« definiert ist
%s: nicht verwendet, da »__COUNTER__« ungültig ist
beim Lesen des vorkompilierten Headers
Rekursion bei Expansion des Makros »%s« entdeckt
Syntaxfehler in Makroparameterliste