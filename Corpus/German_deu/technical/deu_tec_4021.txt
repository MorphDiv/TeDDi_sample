# language_name_wals:	German
# language_name_glotto:	German
# iso639_3:	deu
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/de.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Handbuch
Zurück
Nach vorne

pg_send_query() sendet eine asynchrone Abfrage auf der Verbindung connection.
Im Unterschied zu pg_query() können hier mehrere Abfragen an den Server gesendet werden und die Ergebnisse nacheinander mit pg_get_result() geholt werden.
Die Ausführung eines Skripts wird während der Abarbeitung der Anfragen nicht blockiert.
Benutzen Sie die Funktion pg_connection_busy() um zu prüfen, ob die Verbindung gerade benutzt wird (z.B. ob gerade eine Abfrage ausgeführt wird).
Mit der Funktion pg_cancel_query() können Sie die Abfrage löschen.
Obwohl man mehrere Abfragen auf einmal an den Server senden kann, können die Abfragen nicht über eine gerade benutzte Verbindung geschickt werden.
Falls die Abfragen gesendet werden, während die Verbindung benutzt wird, wird abgewartet, bis die letzte Abfrage fertig ist und alle Ergebnisse werden verworfen.
Siehe auch pg_query(), pg_cancel_query(), pg_get_result() und pg_connection_busy()
Zurück
Zum Anfang
Nach vorne

Nach oben
