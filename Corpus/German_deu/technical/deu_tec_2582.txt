# language_name_wals:	German
# language_name_glotto:	German
# ISO_6393:	deu
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	KDEdoc
# source:	https://object.pouta.csc.fi/OPUS-KDEdoc/v1/raw/de.zip
# copyright_short:	http://opus.nlpl.eu/KDEdoc.php
# copyright_long:	http://opus.nlpl.eu/KDEdoc.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

aRts unterst\xFCtzen
Wie Sie helfen k\xF6nnen
Das aRts -Projekt ben\xF6tigt einerseite Hilfe von Entwicklern, um existierende Multimedia-Anwendungen f\xFCr aRts anzupassen, neue Anwendungen zu schreiben und die M\xF6glichkeiten von aRts zu erweitern.
Andererseits gibt es auch viele Aufgaben, die von Anderen \xFCbernommen werden k\xF6nnen.
Es werden Tester ben\xF6tigt, die Fehlermeldungen liefern, \xDCbersetzer, die die Anwendungstexte und die Dokumentation in andere Sprachen \xFCbersetzen, Graphiker, die Bitmaps (besonders f\xFCr die artsbuilder -Module) entwerfen, Musiker, die Beispiele f\xFCr aRts erzeugen, und Autoren, die die Dokumentation schreiben und korrigieren.
Mailinglisten
Viele Diskussionen zur Entwicklung von aRts finden in einer von zwei Mailinglisten statt.
Hier werden neue F\xE4higkeiten und Umsetzungsideen diskutiert, hierhin kann man sich bei Problemen wenden.
Die KDE -Multimedia-Mailingliste ist f\xFCr allgemeine Multimediathemen sowohl aRts als auch andere Multimediaprogramme wie Noatun und aKtion betreffend.
Die Liste wird unter http://lists.kde.org archiviert.
In der aRts -Mailingliste geht es um aRts -spezifische Themen einschlie\xDFlich der Nutzung von aRts au\xDFerhalb von KDE.
Die Liste wird unter http://space.twc.de/~stefan/arts-archive archiviert.
Programmierstandards (in Englisch)
For getting a consistent reading through all the sources, it is important to keep the coding style the same, all over the aRts source.
Please, even if you just write a module, try to write/format your source accordingly, as it will make it easier for different people to maintain the source tree, and easier to copy pieces of from one source to another.
Naming of member functions
Qt / Java style, that means capitalization on word breaks, and first letter always without capitalization; no underscores.
This means for instance:
Class members
Class members are not capitalized, such as menubar or button.
When there are accessing functions, the standard should be the &MCOP; way, that is, when having an long member foo, which shouldn't be visible directly, you create:
functions to get and set the value.
In that case, the real value of foo should be stored in _foo.
Class names
All classes should be wordwise capitalized, that means ModuleView, SynthModule.
All classes that belong to the libraries should use the aRts namespace, like Arts::Soundserver.
The implementations of &MCOP; classes should get called Class_impl, such as SoundServer_impl.
Parameters
Parameters are always uncapitalized.
Local variables
Local variables are always uncapitalized, and may have names like i, p, x, etc. where appropriate.
Tab width (Shift width)
One tab is as long as 4 spaces.
Naming of source files
Source files should have no capitalization in the name.
They should have the name of the class when they implement a single class.
Their extension is .cc if they refer to Qt / GUI independant code, and .cpp if they refer to Qt / GUI dependant code.
&IDL; files should be called in a descriptive way for the collection of interfaces they contain, also all lower case.
Especially it is not good to call an &IDL; file like the class itself, as the .mcopclass trader and type info entries will collide, then.