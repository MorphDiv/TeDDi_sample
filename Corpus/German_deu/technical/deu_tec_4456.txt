# language_name_wals:	German
# language_name_glotto:	German
# ISO_6393:	deu
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/de.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Handbuch
Zurück
Kapitel 14.
Klassen und Objekte
Nach vorne
Wahrscheinlich wollen Sie auch Code schreiben, der sich auch auf Variablen und Funktionen in Basisklassen bezieht.
Dies gilt speziell dann, wenn Ihre abgeleitete Klasse eine Verfeinerung oder Spezialisierung von Code in Ihrer Basisklasse ist.
Anstatt in Ihrem Code den wörtlichen Namen der Basisklasse zu verwenden, sollten Sie den speziellen Namen parent verwenden, welcher sich auf den in der Deklaration Ihrer Klasse mittels extends gegebenen Namen Ihrer Basisklasse bezieht.
So vermeiden Sie die mehrfache Verwendung des Namens der Basisklasse.
Sollte sich Ihr Vererbungsbaum während der Implementation ändern, brauchen Sie nur mehr die extends Deklaration Ihrer Klasse zu ändern.
class A {function example() {echo "I am A::example() and provide basic functionality. br \n";}} class B extends A {function example() {echo "I am B::example() and provide additional functionality. br \n"; parent::example();}} $b = new B; / / Dies ruft B::example() auf, welches wiederum A::example() aufruft. $b - example();
Zurück
Zum Anfang
Nach vorne

Nach oben
Objekte serialisieren - Objekte in Sessions