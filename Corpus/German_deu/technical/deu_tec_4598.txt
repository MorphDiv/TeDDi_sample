# language_name_wals:	German
# language_name_glotto:	German
# iso639_3:	deu
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/de.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Handbuch
Zurück
Nach vorne
PostgreSQL ist ein kostenloses Open Source Datenbanksystem.
Es wurde ursprünglich im UC Berkeley Computer Science Department entwickelt und hat Pionierarbeit bei objektrelationalen Datenbankkonzepten geleistet, die jetzt Einzug in einige kommerzielle Datenbanken halten.
PostgreSQL bietet SQL92 / SQL99 Sprachunterstützung, Transaktionen und ein erweiterbares Typkonzept.
PostgreSQL ist eine Weiterentwicklung des ursprünglichen Berkeley-Codes.
Um PostgreSQL benutzen zu können, brauchen Sie mindestens eine Version 6.5 oder später, um alle Leistungsmerkmale des PostgreSQL-Moduls nutzen zu können, müssen Sie eine Version ab 7.0 haben.
PostgreSQL unterstützt viele Zeichencodierungen, einschließlich multibyte character encoding.
Die aktuelle Version sowie weitere Informationen über PostgreSQL sind auf der Seite http: / /www.postgresql.org / erhältlich.
Um die PostgreSQL-Unterstützung nutzen zu können, müssen Sie PHP mit --with-pgsql[ =DIR] kompilieren.
Falls das shared object module verfügbar ist, kann das PostgreSQL-Modul mit der extension -Direktive der Datei php.ini oder mittels der Funktion dl() geladen werden.
Die unterstützten ini-Direktiven sind in der Datei php.ini-dist beschrieben, die mit der Distribution ausgeliefert wird.
Warnung
Wegen eines Bugs in der Behandlung von NOTICE-Benachrichtigungen sollte das PostgreSQL-Modul der PHP Version 4.0.6 nicht benutzt werden.
Bitte benutzen Sie PHP 4.1.0 oder höher.
Warnung
Die Namen der PostgreSQL-Funktionen werden sich ab der PHP Version 4.2.0 ändern, um sie an die gültigen Coding-Standards anzupassen.
Die meisten neuen Namen enthalten zusätzliche Unterstriche, z.B. pg_lo_open().
Einige Funktionen werden der Einheitlichkeit wegen umbenannt, z.B. pg_exec() zu pg_query().
Die älteren Namen können in der Version 4.2.0 und auch ein paar Releases danach noch verwendet werden, aber sie werden irgendwann gelöscht.
Tabelle 1.
Die geänderten Funktionsnamen
Alter Name
Neuer Name










































Die veraltete Syntax von pg_connect() und pg_pconnect() wird ungültig werden, um zukünftig asynchrone Verbindungen zu unterstützen.
Bitte benutzen Sie einen Verbindungsstring mit pg_connect() bzw. pg_pconnect().
Nicht alle Funktionen sind in allen Versionen verfügbar.
Es hängt davon ab, welche libpq Version (das PostgreSQL C Client Interface) auf Ihrem Rechner verfügbar ist und wie libpq kompiliert wurde.
Falls eine Funktion nicht verfügbar ist, liegt es daran, dass libpq die nötigen Routinen nicht unterstützt, die die Funktion braucht.
Es ist außerdem wichtig, dass Ihre libpq neuer ist, als der PostgreSQL-Server, zu dem Sie eine Verbindung aufbauen.
Wenn Sie eine libpq benutzen, die älter ist, als vom PostgreSQL-Server erwartet, werden Sie wahrscheinlich Probleme haben.
Seit Version 6.3 (03 / 02 / 1998) benutzt PostgreSQL per Voreinstellung Unix Domain Sockets.
Ein TCP / IP Port wird NICHT standardmäßig geöffnet.
In der untenstehenden Tabelle werden diese neuen Verbindungsmöglichkeiten gezeigt.
Der Socket ist in / tmp / .s.PGSQL.5432 zu finden.
Der Schalter -i, der dem postmaster mitgegeben werden kann, weist diesen an, sowohl über TCP / IP als auch über UNIX Domain Sockets eine Verbindung aufzubauen.
Tabelle 2.
Der Postmaster und PHP












Is the postmaster running and accepting TCP / IP (with -i) connection at 'localhost 'on port '5432'? in / pfad / zu / datei.php on line 20.



Eine Verbindung zu einem PostgreSQL-Server lässt sich auch mit den folgenden Wertepaaren, die im Verbindungsstring gesetzt werden, herstellen (wobei mindestens der Name der Datenbank angegeben sein muss): $conn = pg_connect("host=myHost port=myPort tty=myTTY options=myOptions dbname=myDB user=myUser password=myPassword ");
Die bisherige Syntax $conn = pg_connect ("host", "port", "options", "tty", "dbname") ist veraltet und sollte nicht weiter verwendet werden.
Umgebungsvariablen beeinflussen das Server / Client-Verhalten von PostgreSQL.
Zum Beispiel sucht das PostgreSQL-Modul nach der Umgebungsvariablen PGHOST, falls der Hostname im Verbindungsstring nicht angegeben wurde.
Die unterstützten Umgebungsvariablen variieren von Version zu Version.
Schauen Sie für weitere Informationen in den PostgreSQL Programmer' s Guide (nach den libpq Umgebungsvariablen).
Versichen Sie sich, dass Sie die Umgebungsvariable für den aktuellen Benutzer gesetzt haben.
Um sich die Umgebungsvariablen, die für den aktuellen Prozess verfügbar sind, anzeigen zu lassen, benutzen Sie $_ENV oder getenv().
Beispiel 1.
Umgebungsvariablen setzen
PGHOST=psgql.exmaple.com PGPORT=7890 PGDATABASE=web-system PGUSER=web-user PGPASSWORD=secret PGDATESTYLE=ISO PGTZ=JST PGCLIENTENCODING=EUC-JP export PGHOST PGPORT PGDATABASE PGUSER PGPASSWORD PGDATESTYLE PGTZ PGCLIENTENCODING
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Ab der PostgreSQL Version 7.1.0 ist die maximale Grösse eines Feldes mit dem Datentyp text 1GB.
Ältere PostgreSQL Versionen begrenzten Felder vom Typ text auf Blockgrösse (normalerweise 8 KB bis maximal 32 KB, falls dies bei der Kompilation angegeben wurde).
Um die Large Object-Schnittstelle (lo) zu benutzen, ist es nötig, die Large-Object-Funktionen in einen Transaktionsblock einzuschließen.
Ein Transaktionsblock beginnt mit einem SQL-Befehl BEGIN und endet, falls die Transaktion gültig war, mit COMMIT oder END.
Wenn die Transaktion fehlschlägt, sollte sie mit ROLLBACK oder ABORT geschlossen werden.
Beispiel 2.
Large Objects benutzen
?php $database = pg_connect ("dbname=jacarta"); pg_query ($database, "begin"); $oid = pg_lo_create ($database); echo ("$oid\n"); $handle = pg_lo_open ($database, $oid, "w"); echo ("$handle\n"); pg_lo_write ($handle, "Daten des Large Objects"); pg_lo_close ($handle); pg_query ($database, "commit");?
Zurück
Zum Anfang
Nach vorne

Nach oben
