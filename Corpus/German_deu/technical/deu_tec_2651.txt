# language_name_wals:	German
# language_name_glotto:	German
# ISO_6393:	deu
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/de.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Handbuch
Zurück
Kapitel 12.
Kontroll-Strukturen
Nach vorne
For -Schleifen sind die komplexesten Schleifen in PHP.
Sie funktionieren wie ihr Gegenstück in C.
Die Syntax einer for -Schleife sieht so aus:
for (ausdr1; ausdr2; ausdr3) Anweisung
Der erste Ausdruck (ausdr1) wird beim Schleifenbeginn (ohne jegliche Vorbedingung) geprüft bzw. ausgeführt.
Zu Beginn jedes Durchlaufs wird nun ausdr2 geprüft.
Wenn dieser TRUE ist, fährt die Schleife fort mit der Ausführung der nachfolgenden Anweisung.
Ist das Ergebnis FALSE, wird die Schleife beendet.
Am Ende jedes Durchlaufs wird ausdr3 geprüft (ausgeführt).
Jeder Ausdruck kann leer sein.
Ist ausdr2 leer, wird die Schleife endlos oft durchlaufen (PHP wertet diesen, wie in C, implizit als TRUE).
Das ist nicht so sinnlos, wie Sie vielleicht glauben, weil man häufig eine Schleife erst durch eine bedingte break -Anweisung statt durch eine unwahr werdende for -Bedingung beenden möchte.
Beachten Sie die folgenden Beispiele.
Alle geben Zahlen von 1 bis 10 aus:
/* Beispiel 1 * / for ($i = 1; $i = 10; $i++) {print $i;} / * Beispiel 2 * / for ($i = 1;;$i++) {if ($i 10) {break;} print $i;} / * Beispiel 3 * / $i = 1; for (;;) {if ($i 10) {break;} print $i; $i++;} / * Beispiel 4 * / for ($i = 1; $i = 10; print $i, $i++);
Selbstverständlich sieht das erste (oder vielleicht das vierte) Beispiel am besten aus, aber Sie werden noch feststellen, dass es oftmals ganz nützlich sein kann, leere Parameter in for -Schleifen zu verwenden.
PHP unterstützt auch bei for -Schleifen die alternative "Doppelpunkt-Syntax".
for (ausdr1; ausdr2; ausdr3):
Anweisung;...; endfor;
Andere Sprachen haben für das Durchlaufen eines Hash´s oder Arrays eine foreach -Anweisung.
PHP 3 hat dies nicht; im Gegensatz zu PHP 4 (vgl. foreach).
In PHP 3 kann man dafür eine Kombination von while mit der list() - und each() -Funktion einsetzen.
Beispiele finden Sie in der Dokumentation zu diesen Funktionen.
Zurück
Zum Anfang
Nach vorne

Nach oben
