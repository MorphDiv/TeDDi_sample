# language_name_wals:	German
# language_name_glotto:	German
# ISO_6393:	deu
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	KDEdoc
# source:	https://object.pouta.csc.fi/OPUS-KDEdoc/v1/raw/de.zip
# copyright_short:	http://opus.nlpl.eu/KDEdoc.php
# copyright_long:	http://opus.nlpl.eu/KDEdoc.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

aRts-builder
\xDCberblick
Wenn Sie aRts-builder verwenden wollen, sollten Sie zuerste den Klangserver (artsd) starten.
Normalerweise ist er bereits gestartet, wenn Sie KDE 2.1 verwenden.
Wenn Sie aRts verwenden, startet es kleine Module. aRts-builder ist ein Werkzeug zur Erstellung neuer Strukturen von kleinen verbundenen Modulen.
Sie k\xF6nnen die Module einfach innerhalb des Gitters anordnen.
W\xE4hlen Sie dazu aus dem Men\xFC Module aus und klicken Sie dann irgendwo im gr\xFCn-grauen Bereich.
Module habe \xFCblicherweise Kan\xE4le (durch die Audiosignale hinein und hinaus gelangen).
Um zwei Kan\xE4le zu verbinden, klicken Sie auf den Ersten (dadurch wird er orange) und dann auf den Zweiten.
Sie k\xF6nnen einen Eingabekanal (auf der oberen Modulseite) nur mit einem Ausgabekanal (auf der unteren Modulseite) verbinden.
Wenn Sie einem Kanal einen festen Werte geben wollen (oder einen Kanal trennen wollen) so doppelklicken Sie auf diesen.
Einf\xFChrung
Schritt 1
Starten Sie aRts-builder.
Um die Ausgabe zu h\xF6ren, ben\xF6tigen Sie ein Synth_AMAN_PLAY-Modul.
Platzieren Sie das Modul unterhalb der f\xFCnften Linie, da wir noch einige Module oberhalb einf\xFCgen werden.
Das Modul hat die Parameter title und autoRestoreID (in der N\xE4he des linken Kanals) zur Identifikation.
Um diese auszuf\xFCllen, doppelklicken Sie auf diese Kan\xE4le, w\xE4hlen Sie konstanter Wert und tippen Sie tutorial in das Eingabefeld.
Klicken Sie auf OK zur Best\xE4tigung.
Sie h\xF6ren bisher nichts.
Das Abspielmodul ben\xF6tigt irgendetwas als Eingabe.
Wenn Sie der Stille eine Weile gelauscht haben, klicken Sie auf OK und gehen Sie zu Schritt 2
Schritt 2
Wie Sie sehen, produziert dieses Modul eine Ausgabe, erfordert aber eine Position pos als Eingabe.
Verbinden Sie zuerst die Ausgabe mit den Lautsprechern.
Klicken Sie auf den Kanal out des Synth_WAVE_SIN-Modules und dann auf den Kanal left des Synth_AMAN_PLAY-Modules.
Damit sind diese zwei Module verbunden.
Keiner der Oszillatoren in aRts ben\xF6tigt eine Frequenz als Eingabe, sondern nur eine Position innerhalb der Welle.
Die Position muss zwischen 0 und 1 liegen.
Das wird f\xFCr ein Standard-Synth_WAVE_SIN-Modul auf den Bereich 0 bis 2*Pi umgerechnet.
Um eine bestimmte Frequenz zu erzeugen, ben\xF6tigen Sie ein Synth_FREQUENCY-Modul.
Legen Sie den Frequenzeingang des Frequenzgenerators auf den konstanten Wert 440.
Sie sollten einen Sinuston von 440 Hz in einem von Ihren Lautsprechern h\xF6ren.
Wenn Sie genug zugeh\xF6rt haben, klicken Sie auf OK und gehen Sie zu Schritt 3.
Schritt 3
Es w\xFCrde sich besser anh\xF6ren, wenn der Sinuston aus beiden Lautsprechern zu h\xF6ren w\xE4re.
Verbinden Sie den rechten Eingang von Synth_PLAY auch mit dem Ausgang von Synth_WAVE_SIN.
Es sollte am oberen Rand platziert werden.
Wenn Sie mehr Platz ben\xF6tigen, k\xF6nnen Sie die anderen Module verschieben, indem Sie sie ausw\xE4hlen (um mehrere auszuw\xE4hlen, verwenden Sie Shift) und mit der Maus bewegen.
Nun verbinden Sie den Frequenzausgaben von Synth_SEQUENCE mit dem Frequenzeingang des Synth_FREQUENCY-Moduls.
Stellen Sie die Geschwindigkeit der Sequenz auf den konstanten Wert 0.13 (der Geschwindigkeitseingang ist der linke).
Geben Sie nun f\xFCr den rechten Eingang (Sequenz) von Synth_SEQUENCE als konstanten Wert A-3;C-4;E-4;C-4 ein.
Das legt eine Sequenz fest.
Mehr dazu finden Sie im Abschnitt Modulreferenz.
Synth_SEQUENCE ben\xF6tigt unbedingt eine Sequenz und eine Geschwindigkeit.
Ohne diese Angaben wird das Programm vermutlich abst\xFCrzen.
Sie sollten nun eine nette Sequenz h\xF6ren.
Klicken Sie auf OK und gehen Sie zu Schritt 4.
Schritt 4
Trennen Sie den Ausgang der SIN-Welle durch doppelklicken und ausw\xE4hlen von nicht verbunden.
Verbinden Sie
den SIN-Ausgang mit dem Eingang (inval) von PSCALE
Den Ausgang von PSCALE mit dem linken Eingang von AMAN_PLAY
den Ausgang von PSCALE mit dem rechten Eingang von AMAN_PLAY
den SEQUENCE-Ausgang (pos) mit dem PSCAL-Eingang (pos).
Setzen Sie schlie\xDFlich den Eingang top von PSCALE auf einen konstanten Wert, z.B.
0.1.
Das funktioniert folgenderma\xDFen:
Das Modul Synth_SEQUENCE gibt zus\xE4tzliche Informationen \xFCber die Position der gerade erklingenden Note, wobei 0 gerade gestartet und 1 beendet bedeutet.
Das Modul Synth_PSCALE skaliert die Lautst\xE4rke des Audiostroms von 0 (Ruhe) \xFCber 1 (Originallautst\xE4rke) zur\xFCck zu 0 (Ruhe) abh\xE4ngig von der Position.
Die Position, an der die Maximallautst\xE4rke erklingen soll, kann als Positionswert (pos) angegeben werden.
0.1 bedeutet, das nach 10% der Note die Lautst\xE4rke ihren Maximalwert erreicht und danach der Ausklingvorgang startet.
Sie sollten nun eine nette Sequenz h\xF6ren.
Klicken Sie auf OK und gehen Sie zu Schritt 4.
Schritt 5:
Daten sollen \xFCbertragen werden ;-)
Starten Sie aRts-builder ein zweites Mal
Erstellen Sie ein Synth_AMAN_PLAY-Modul und benennen Sie es sinnvoll.
Erstellen Sie ein Synth_BUS_DOWNLINK-Modul und:
benennen Sie den Synth_BUS_DOWNLINK-Bus mit dem Namen Audio (das ist nur ein Name, man k\xF6nnte auch jeden anderen Name verwenden)
Verbinden Sie den linken Ausgang von Synth_BUS_DOWNLINKmit dem linken Eingang von Synth_AMAN_PLAY
Verbinden Sie den rechten Ausgang von Synth_BUS_DOWNLINK mit dem rechten Eingang von Synth_AMAN_PLAY
Wenn Sie die Struktur jetzt ausf\xFChren, h\xF6ren Sie noch nichts.
Gehen Sie zur\xFCck zur ersten Struktur in der ersten Instanz von aRts-builder mit dem Synth_WAVE_SIN-Modul und ersetzen Sie das Modul Synth_AMAN_PLAY durch ein Synth_BUS_UPLINK,-Modul und benennen Sie es Audio (oder den Namen, den Sie f\xFCr die entsprechende Komponente in der zweiten Instanz von aRts-builder verwendet haben).
Sie h\xF6ren die Notensequenz wiedergegeben \xFCber die Bus-Verbindung.
Wenn Sie herausfinden wollen, wozu eine solche Funktion n\xFCtzlich ist, klicken Sie auf OK (in der Instanz, die das Synth_SEQUENCE-Modul enth\xE4lt, die andere Struktur wird nicht ver\xE4ndert) und gehen Sie zu Schritt 6.
Schritt 6 \xDCbertragung f\xFCr Fortgeschrittene
Best\xE4tigen Sie mit OK.
Sie h\xF6ren nun die gleiche Struktur zweimal.
Abh\xE4ngig von der Zeitverschiebung wird es mehr oder weniger gl\xFCcklich klingen.
Schritt 7:
Midi-Synthese
Jetzt wollen wir den Sinusgenerator in ein wirkliches Musikinstrument verwandeln.
Dazu ben\xF6tigen Sie ein Ger\xE4t, das MIDI -Ereignisse an aRts senden kann.
Sie k\xF6nnen ein externes Keyboard (wie im folgenden beschrieben wird) aber auch einen Sequenzer, der den Midi-bus unterst\xFCtzt, wie Brahms verwenden.
Beenden Sie zuerst alle \xFCberfl\xFCssigen Instanzen von aRts-builder.
Sie ben\xF6tigen lediglich die Instanz mit dem Sinusgenerator.
Sie k\xF6nnen nun das Modul Synth_SEQUENCE l\xF6schen und stattdessen den Frequenzeingangskanal mit dem Modul Synth_FREQUENCY-Eingang verbinden.
Was soll nun mit dem pos-Eingang passieren?
Dieser Eingang bleibt unbesetzt, da es keinen Algorithmus der Welt gibt, der vorausberechnen kann, wann ein Spieler die Taste des Keyboards, die er gerade gedr\xFCckt hat, wieder loslassen wird.
Daher haben wir nur einen Parameter gedr\xFCckt stattdessen, der anzeigt, ob der Spieler die Taste noch gedr\xFCckt h\xE4lt (gedr\xFCckt=1:
Taste immer noch heruntergehalten; gedr\xFCckt=0:
Taste losgelassen)
Das Synth_PSCALE-Objekt muss nun auch ersetzt werden.
Verbinden Sie:
den Struktureingang mit dem Ausgang active von ADSR
den SIN-Ausgang mit dem Eingang (inval) von ADSR
den Ausgang (outvalue) von ADSR mit dem linken Strukturausgang
den ADSR-Ausgang (outvalue) mit dem rechten Strukturausgang
Setzen Sie die Parameter attack auf 0.1, decay auf 0.2, sustain auf 0.7 und release auf 0.1.
Weiterhin m\xFCssen wir daran denken, das die Instrumentenstruktur wissen muss, wenn der Spieler mit spielen fertig ist, da sonst der letzte Klang nicht beendet wird, auch wenn die letzte Taste losgelassen worden ist.
Gl\xFCcklicherweise wei\xDF die ADSR-H\xFCllkurve (envelope), wann nichs mehr zu h\xF6ren ist, da das Signal nach dem Loslassen der letzten Taste irgendwann auf Null reduziert wird.
Das wird erreicht, indem der Ausgang done auf 1 gesetzt wird.
Verbinden Sie diesen Ausgang mit dem Ausgangskanal stopp.
Damit wird die Struktur beendet, sobald dieser Ausgang auf 1 wechselt.
Speichern Sie die Struktur nun (der vorgegebene Name sollte jetzt Instrument_Anleitung sein).
Hier sollten Sie in der Lage sein, ihr Instrument (Anleitung) auszuw\xE4hlen.
Wenn Sie jetzt ein Terminal \xF6ffnen und midisend eintippen, sollte midisend und das Instrument im aRts MIDI -Manager angezeigt werden.
W\xE4hlen Sie beides aus und klicken Sie auf Verbinden.
Damit sind die Vorbereitungen abgeschlossen.
Nehmen Sie nun ihr Keyboard und beginnen Sie zu spielen (selbstverst\xE4ndlich nachdem Sie es mit dem Computer verbunden haben).
Hinweise
Sie sind nun in der Lage, aRts zu verwenden.
Hier sind noch einige Tipps, die den Umgang mit Strukturen verbessern k\xF6nnen:
Versuchen Sie andere Module anstelle von SIN.
Wenn Sie eine TRI-Wellenform verwenden, werden Sie vermutlich feststellen, das diese Wellenform nicht besonders h\xFCbsch klingt.
H\xE4ngen Sie einen SHELVE_CUTOFF-Filter an das TRI-Modul, um alle Frequenzen oberhalb einer bestimmten Grenzfrequenz (versuchen Sie etwa 1000 Hz oder besser noch die doppelte Eingabefrequenz +200 Hz oder einen \xE4hnlichen Wert).
Verwenden Sie mehrere Oszillatoren zusammen.
Synth_XFADE kann zum kreuzweisen mixen (cross fade) von zwei Signalen verwendet werden, Synth_ADD zum Addieren von zwei Signalen.
Verstimmen Sie die Oszillatoren geringf\xFCgig gegeneinander.
Das erzeugt nette Schwebungen.
Experimentieren Sie mit mehreren H\xFCllkurven (envelopes) gleichzeitig.
Stellen Sie Instrumente zusammen, die verschiedene Signale auf den linken und rechten Ausgang legen.
Verarbeiten Sie das Signal, das aus dem Downlink-Bus kommt, weiter.
Sie k\xF6nnen f\xFCr einen Echo-Effekt das urspr\xFCngliche Signal etwas verz\xF6gert dazumischen.
Verwenden Sie die Lautst\xE4rkeeinstellung (die St\xE4rke, mit der die Taste gedr\xFCckt worden ist).
Ein besonderer Effekt entsteht, wenn der Lautst\xE4rkewert nicht nur die Ausgabelautst\xE4rke sondern auch den Klang des Instrumentes ver\xE4ndert (zum Beispiel die Grenzfrequenz).
...
Wenn Sie eine besondere Struktur konstruiert haben, schicken Sie sie an die aRts -Internetseite.
Sie kann dann der n\xE4chsten Version beigelegt werden.
Beispiele
Einige befinden sich im angezeigten Verzeichnis, einige (die in der aktuellen Version aus irgendwelchen Gr\xFCnden nicht funktionieren) befinden sich im todo-Verzeichnis.
Die Beispiele k\xF6nnen in mehrere Kategorien eingeteilt werden:
Modulbeispiele demonstrieren jeweils eines der in arts enthaltenen Modules (example_*.arts benannt).
Sie senden \xFCblicherweise irgendwelche Ausgaben an die Soundkarte.
Instrumente (mit Namen instrument_*.arts) sind aus den grundlegenden arts-Modulen zusammengesetzt.
Sie haben standardisierte Ein- und Ausgabekan\xE4le, so dass sie mit dem MIDI -Manager aus artscontrol verwendet werden k\xF6nnen.
Vorlagen (mit Namen template_*.arts) zur Erstellung neuer Module.
Effekte (mit Namen effect_*.arts) k\xF6nnen als Bausteine verwendet werden [momentan alle im todo-Verzeichnis]
Mixer-Elemente (mit Namen mixer_element_*.arts) k\xF6nnen zur Erstellung von Mixern mit graphischen Kontrollelementen verwendet werden [momentan alle im todo-Verzeichnis]
Verschiedene Module, die in keine der angegebenen Kategorien passen.
Detailierte Beschreibung der einzelnen Module:
example_stereo_beep.arts
Sendet einen 440Hz-Sinuston an den linken und einen 880Hz-Sinuston an den rechten Kanal der Soundkarte.
Dieses Modul wird in der aRts -Dokumentation erw\xE4hnt.
example_sine.arts
Erzeugt einen 440Hz-Sinuston.
example_pulse.arts
Erzeugt einen 440Hz-Impulston mit 20%-Arbeitswiederholung (duty cycle).
example_softsaw.arts
Erzeugt eine 440Hz-S\xE4gezahnschwingung.
example_square.arts
Erzeugt eine 440Hz-Rechteckschwingung.
example_tri.arts
Erzeugt eine 440Hz-Dreieckschwingung.
example_noise.arts
Erzeugt wei\xDFen L\xE4rm.
example_dtmf1.arts
Erzeugt einen Doppelton aus einer 697Hz- und 1209Hz-Sinusschwingung, die mit 0.5 skaliert und addiert werden.
Es entsteht der DTMF-Ton f\xFCr die Ziffer "1" einer Telefontastatur.
example_atan_saturate.arts
Eine Dreieckschwingung wird mit einem atan-S\xE4ttigungsfilter ver\xE4ndert.
example_autopanner.arts
Verwendet ein Autopan-Modul, um einen 400Hz-Sinuston mit einer Frequenz von 2 Hz zwischen dem linken und rechten Lautsprecher hin- und herzubewegen.
example_brickwall.arts
Skaliert eine Sinusschwingung mit dem Faktor 5 und ver\xE4ndert sie mit einem brickwall-Begrenzer.
example_bus.arts
Vom Bus mit dem Namen Bus wird zum Bus out_soundcard eine Verbindung mit vertauschten Kan\xE4len hergestellt.
example_cdelay.arts
Verbindet von einem Bus namens Delay zum rechten Ausgangskanal mit einer Verz\xF6gerung von 0.5 Sekunden (cdelay), w\xE4hrend der linke Kanal unver\xE4ndert bleibt.
Mit artscontrol k\xF6nnen Sie diesen Effekt mit einem Abspieler verbinden.
Das Resultat ist h\xF6renswert.
example_delay.arts
Das gleiche Beispiel wie example_cdelay.arts, mit dem Unterschied, dass der delay-Effekt anstelle von cdelay verwendet wird.
example_capture_wav.arts
Mit dem Modul Synth_CAPTURE_WAV wird ein 400Hz-Sinuston als wav-Datei gespeichert.
Lassen Sie das Modul f\xFCr 2 Sekunden laufen und untersuchen Sie die in /tmp erzeugte Datei.
Sie k\xF6nnen Sie mit einem Spieler wie kaiman abspielen.
example_data.arts
Mit einem Data-Modul wird ein konstanter Strom mit dem Wert 3 erzeugt und f\xFCr die periodische Anzeige an ein Debug-Modul gesendet.
Das Beispiel enth\xE4lt weiterhin ein Nil-Modul, das demonstriert, wie man eine Struktur erzeugt, die gar nichts tut.
example_adsr.arts
Demonstriert, wie man mit dem Envelope-Adsr-Modul einen einfachen Instrumentenklang erzeugt, der durch eine Rechteckschwingung geschaltet wird.
example_fm.arts
Ein FM-Quellmodul erzeugt einen 440Hz-Sinuston, der dann mit 5 Hz frequenzmoduliert wird.
example_freeverb.arts
Verbindet den Freeverb-Effekt von einem Bus downlink zu einem Bus outlink.
Sie k\xF6nnen mit artscontrol diesen Effekt mit einem Spieler verbinden und sich das Resultat anh\xF6ren.
example_flanger.arts
Implementiert einen einfachen Flanger-Effekt (scheint bisher nicht zu funktionieren).
example_moog.arts
Diese Struktur kombiniert zwei Kan\xE4le von einem Bus, schickt das Signal durch einen Moog-VCF-Filter und das Ergebnis auf den out_soundcard-Bus.
example_pitch_shift.arts
Diese Struktur schickt den linken Kanal von Soundkartendaten durch einen H\xF6henverschiebungseffekt (pitch shift).
Mit dem Speed-Parameter kann der Effekt modifiziert werden.
example_rc.arts
Diese Struktur sendet wei\xDFen L\xE4rm durch einen RC-Filter und dann an die Soundkarte.
Betrachten Sie das Ergebnis in der FFT-Anzeige von artscontrol, um den Unterschied zu ungefiltertem L\xE4rm zu sehen.
example_sequence.arts
Demonstriert die Verwendung des Sequencer-Moduls durch das Abspielen einer Notensequenz.
example_shelve_cutoff.arts
Diese Struktur schickt wei\xDFen L\xE4rm durch einen Shelve-Cutoff-Filter und dann an die Soundkarte.
Das Ergebnis k\xF6nnen Sie in der FFT-Anzeige von artscontrol betrachten.
example_equalizer.arts
Demonstriert das Std_Equalizer-Modul.
Es hebt die H\xF6hen und Tiefen um 6dB an.
example_tremolo.arts
Demonstriert den Tremolo-Effekt.
Der rechte und linke Kanal werden mit einem 10Hz-Tremolo moduliert.
example_xfade.arts
Dieses Beispiel mixt einen 440Hz- und einen 880Hz-Sinuston mit einem "cross fader".
Ver\xE4ndern Sie die Prozentanzeige von -1 bis 1, um die Mischung der zwei Signale zu beeinflussen.
example_pscale.arts
Demonstriert das Pscale-Modul (ich zweifle, dass dieses Beipiel aussagekr\xE4ftig ist).
example_play_wav.arts
Illustriert das Play_Wave-Modul.
Sie m\xFCssen den kompletten Pfad zur wav -Datei als Parameter filename angeben.
example_multi_add.arts
Zeigt, wie das Multi_Add-Modul eine beliebige Anzahl Eingangssignale aufsummiert.
Drei Eing\xE4nge mit den Werten 1,2 und 3 erzeugen den Ausgangswert 6.