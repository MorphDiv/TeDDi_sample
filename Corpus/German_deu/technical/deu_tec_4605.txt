# language_name_wals:	German
# language_name_glotto:	German
# iso639_3:	deu
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/de.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Bei Verwendung der PCRE Funktionen unterstützt PHP auch Reguläre Ausdrücke mit einer zu Perl kompatiblen Syntax.
Diese Funktionen unterstützen non-greedy Matching, Assertions, bedingte Subpatterns und viele andere Merkmale, die von der POSIX-erweiterten Syntax regulärer Ausdrücke nicht unterstützt werden.
Warnung
Diese Funktionen regulärer Ausdrücke sind im Gegensatz zu den PCRE Funktionen nicht binary-safe.
Reguläre Ausdrücke werden für komplexe Manipulationen an Zeichenketten mit PHP verwendet.
Folgende Funktionen unterstützen reguläre Ausdrücke:






Diese Erweiterung benötigt zur Erstellung keine externen Bibliotheken.
Um die regexp-Unterstützung zu aktivieren, müssen Sie PHP mit der Option --with-regex[ =TYPE] übersetzen.
TYPE kann entweder system, apache oder php sein.
Standardmäßig wird php verwendet.
Anmerkung:
Sie sollten TYPE nur ändern, wenn Sie wissen, was Sie tun.


Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Diese Erweiterung definiert keine Resource-Typen.
Diese Erweiterung definiert keine Konstanten.
Beispiel 1.
Beispiele regulärer Ausdrücke
ereg ("abc", $string); / * Gibt true zurück, falls "abc "irgendwo in $string gefunden wird. * / ereg ("^abc", $string); / * Gibt true zurück, falls "abc" am Anfang von $string gefunden wird. * / ereg ("abc$", $string); / * Gibt true zurück, falls "abc "am Ende von $string gefunden wird. * / eregi ("(ozilla .[23]|MSIE.3)", $HTTP_USER_AGENT); / * Gibt true zurück, falls es sich beim Client Browser um Netscape 2, 3 oder MSIE 3 handelt. * / ereg ("([[:alnum :]]+) ([[:alnum :]]+) ([[:alnum :]]+)", $string,$regs); / * Setzt drei Wörter, die durch Leerzeichen getrennt sind, in $regs[1], $regs[2] und $regs[3] ein. * / $string = ereg_replace ("^"," br / ", $string); / * Setzt ein br / Tag vor $string. * / $string = ereg_replace ("$"," br / ", $string); / * Setzt ein br / Tag hinter $string. * / $string = ereg_replace ("\n", "", $string); / * Entfernt alle Zeilenumbrüche aus $string. * /
Schauen Sie sich bezüglich regulärer Ausdrücke mit einer zu Perl kompatiblen Syntax die PCRE Funktionen an. fnmatch() bietet die Möglichkeit der Suche nach Übereinstimmungen mit Wildcard-Suchmustern im einfacheren Shell-Stil.
Zurück
Zum Anfang
Nach vorne

Nach oben
