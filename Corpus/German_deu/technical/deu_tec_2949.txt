# language_name_wals:	German
# language_name_glotto:	German
# ISO_6393:	deu
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/de.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Handbuch
Zurück
Nach vorne

dbx_compare() gibt 0 zurück, wenn row_a[$column_key] gleich row_b[$column_key] ist.
Ist der erste Wert größer oder kleiner als der zweite, wird 1 bzw. -1 zurückgegeben (oder umgekehrt, wenn der Parameter flag auf DBX_CMP_DESC gesetzt ist). dbx_compare() ist eine Hilfsfunktion für dbx_sort(), um das Erstellen bzw.
Verwenden der Benutzerfunktion zu vereinfachen.
Der Parameter flags spezifiziert die Vergleichsrichtung:
DBX_CMP_ASC - aufsteigende Reihenfolge
DBX_CMP_DESC - absteigende Reihenfolge
DBX_CMP_NATIVE - keine Typenkonvertierung
DBX_CMP_TEXT - vergleicht die Werte als Strings
DBX_CMP_NUMBER - vergleicht die Werte numerisch
Beispiel 1. dbx_compare()
?php function user_re_order ($a, $b) {$rv = dbx_compare ($a, $b, "parentid", DBX_CMP_DESC); if (!$rv) {$rv = dbx_compare ($a, $b, "id", DBX_CMP_NUMBER);} return $rv;} $link = dbx_connect (DBX_ODBC, "", "db", "username", "password") or die ("Fehler beim Verbinden"); $result = dbx_query ($link, "SELECT id, parentid, description FROM table ORDER BY id"); / / die Daten in $result sind nun nach id gereiht dbx_sort ($result, "user_re_order"); / / die Daten in $result sind nun nach parentid (absteigend) gereiht, / / und dann nach id dbx_close ($link);?
Siehe auch dbx_sort().
Zurück
Zum Anfang
Nach vorne

Nach oben
