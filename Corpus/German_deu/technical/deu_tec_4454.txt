# language_name_wals:	German
# language_name_glotto:	German
# ISO_6393:	deu
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/de.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Handbuch
Zurück
Kapitel 14.
Klassen und Objekte
Nach vorne
Oft braucht man Klassen mit in einer anderen Klasse ähnlichen Variablen und Funktionen.
So ist es eine gute Vorgehensweise, eine in allen Ihren Projekten verwendbare Oberklasse zu definieren, und diese dann den Bedürfnissen Ihrer einzelnen Projekte anzupassen.
Um dies zu erleichtern, können Klassen andere Klassen erweitern.
Die erweiterte bzw. abgeleitete Klasse verfügt über alle Variablen und Funktionen der Basisklasse (dies wird 'Vererbung 'genannt, obwohl niemand gestorben ist), und was Sie in der erweiterten Definition hinzufügen.
Es ist nicht möglich, etwas von einer Klasse wegzunehmen, d.h.
Sie können keine existierenden Variablen oder Funktionen 'wegdefinieren'.
Eine Unterklasse ist immer von einer einzigen Oberklasse abhängig, d.h.
Mehrfachvererbung wird nicht unterstützt.
Klassen werden mittels dem Schlüsselwort 'extends' erweitert.

Hier wird die Klasse Named_Cart definiert, die über alle Variablen und Funktionen von Cart, plus der Variable $owner und der Funktion set_owner() verfügt.
Sie können einen bestimmten Einkaufswagen (Named_Cart) auf dem üblichen Weg erstellen, und nun auch den Besitzer (owner) bestimmen und erfragen.
Sie können noch immer die normalen Cart Funktionen an Named_Cart anwenden:
$ncart = new Named_Cart; / / Erstellt einen bestimmten Einkaufwagen $ncart - set_owner("kris"); / / den Besitzer festlegen print $ncart - owner; / / den Besitzer ausgeben $ncart - add_item("10", 1); / / (vererbte Funktionalität von Cart)
Dies wird auch eine "Eltern-Kind" Beziehung genannt.
Sie erstellen eine Klasse ("Eltern"), und erstellen mittels extends eine neue Klasse, die auf der "Eltern"-Klasse basiert: die "Kind "-Klasse.
Sie können auch diese neue Unterklasse verwenden und eine neue, auf dieser Klasse basierenden Klasse erstellen.
Anmerkung:
Bevor Sie Klassen verwenden können, müssen Sie diese definieren.
Wenn Sie wollen, dass Named_Cart die Klasse Cart erweitert, müssen Sie Cart erst definieren.
Wenn Sie eine andere Klasse, z.B.
Yellow_named_cart erstellen wollen, welche auf Named_Cart basiert, müssen Sie zuerst Named_Cart definieren.
Kurz gesagt ist die Reihenfolge, in der die Klassen definiert werden, sehr wichtig.
Zurück
Zum Anfang
Nach vorne
Klassen und Objekte
Nach oben
Konstruktoren