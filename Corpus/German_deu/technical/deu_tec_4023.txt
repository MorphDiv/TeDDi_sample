# language_name_wals:	German
# language_name_glotto:	German
# iso639_3:	deu
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/de.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Handbuch
Zurück
Nach vorne

pg_trace() ermöglicht die Protokollierung der frontend / backend Kommunikation in eine Debug-Datei, die durch den Pfadnamen pathname bestimmt wurde.
Um die Ergebnisse ganz zu verstehen, sollte man sich mit den Interna des PostgreSQL-Kommunikationsprotokolls auskennen.
Für diejenigen, die sich damit nicht auskennen kann es trotzdem hilfreich sein, um Fehler in Abfragen zu finden, die an den Server gesendet wurden.
Beispielsweise können Sie das Kommando grep '^To backend' trace.log Beispielsweise können Sie das Kommando grep '^To backend 'trace.log eingeben und schauen, welche Abfrage gerade an den PostgreSQL Server geschickt wurde.
Weitere Informationen finden Sie im PostgreSQL-Manual.
Filename und mode sind dieselben, wie bei der Funktion fopen() (mode Standardwert ist 'w'), connection bezeichnet die Verbindung, die protokolliert werden soll.
Standardmäßig wird die zuletzt geöffnete Verbindung protokolliert.
Falls die Datei pathname zum protokollieren geöffnet werden konne, wird TRUE zurückgegeben, anderenfalls FALSE.
Siehe auch fopen() und pg_untrace().
Zurück
Zum Anfang
Nach vorne

Nach oben
