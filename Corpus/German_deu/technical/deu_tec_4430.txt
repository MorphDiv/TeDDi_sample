# language_name_wals:	German
# language_name_glotto:	German
# ISO_6393:	deu
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/de.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Handbuch
Zurück
Anhang A.
Die Geschichte von PHP und verwandten Projekten
Nach vorne
PEAR, das PHP Extension and Application Repository (ursprünglich PHP Extension and Add-on Repository) ist PHP 's Version von fundamentalen Klassen, und könnte in der Zukunft zu einem der Hauptwege zur Verteilung von PHP - und C-basierten PHP Erweiterungen zwischen Entwicklern werden.
PEAR entstand in Diskussionen während des PHP Developers' Meeting (PDM) vom Januar 2000 in Tel Aviv.
Es wurde von Stig S.
Bakken geschaffen, und ist seiner erstgeborenen Tochter, Malin Bakken, gewidmet.
Seit Anfang 2000 ist PEAR zu einem großen, signifikanten Projekt mit vielen Entwicklern gewachsen, welche an der Implementierung von gemeinsamer, wiederverwendbarer Funktionalität zum Nutzen der gesamten PHP Gemeinschaft arbeiten.
PEAR umfasst heute eine große Auswahl an infrastrukturellen Basisklassen, für Datenbankzugriff, Zwischenspeicherung von Inhalten, mathematischen Kalkulationen, eCommerce, und viel, viel mehr.
Die PHP Initiative zur Qualitätssicherung wurde im Sommer 2000 als Reaktion auf die Kritik, dass PHP Releases für Produktionssysteme nicht genügend getestet würden.
Das Team besteht nun aus einer Hauptgruppe von Entwicklern mit einem guten Verständnis der PHP Codebasis.
Diese Entwickler stecken eine Menge ihrer Zeit in das auffinden und Beheben von Fehlern in PHP.
Zusätzlich gibt es noch viele andere Teammitglieder, die diese Fehlerbehebungen auf den verschiedensten Plattformen testen, und Feedback geben.
PHP-GTK ist die Lösung von PHP, um clientseitige GUI Applikationen zu schreiben.
Andrei Zmievski erinnert sich an die Planungs - und Erstellungsphase von PHP-GTK:
GUI Programmierung hat mich immer schon interessiert und ich fand, dass Gtk + ein sehr nettes Werkzeug ist, außer dass dessen Programmierung in C etwas langwierig ist.
Nachdem ich die Implementierungen von PyGtk und GTK-Perl miterlebt habe, entschied ich mich zu sehen, ob PHP ebenfalls mit Gtk + verbunden werden könnte, wenn auch minimal.
Ab August 2000 hatte ich etwas mehr Freizeit, und begann zu experimentieren.
Meine Hauptvorlage war die PyGTK Implementierung, denn sie war von den Leistungsmerkmalen her ziemlich komplett, und hatte eine nette objektorientierte Schnittstelle.
James Henstridge, der Autor von PyGtk, hatte in diesen ersten Schritten immer hilfreichen Rat.
Die Schnittstellen zu all den Gtk + Funktionen per Hand zu schreiben kam nicht in Frage, und so griff ich die Idee eines Code Generators auf, ähnlich wie es PyGTK tat.
Der Code Generator ist ein PHP Programm, das eine Reihe von .defs Dateien mit den Gtk + Klassen, Konstanten und Information über Methoden liest, und danach C Code generiert, der PHP mit ihnen verbindet.
Was nicht automatisch generiert werden kann, wird händisch in eine .overrides Datei geschrieben.
Die Arbeit an dem Code Generator und der Infrastruktur dauerte einige Zeit, da ich im Herbst 2000 nur wenig Zeit für die Arbeit an PHP-GTK erübrigen konnte.
Nachdem ich PHP-GTK Frank Kronman gezeigt hatte bekam er Interesse, und begann mir bei der Arbeit am Code Generator und der Win32 Implementierung zu helfen.
Es war richtig aufregend, als wir das erste Hello World Programm schrieben und laufen ließen.
Es dauerte noch einige Monate, bis wir das Projekt in einen vorzeigbaren Zustand brachten und am 1.
März 2001 die erste Version freigeben konnten.
Die Geschichte schlug prompt SlashDot.
In dem Gefühl, dass PHP-GTK umfangreich werden könnte, habe ich extra Mailinglisten und CVS Repositories dafür eingerichtet, wie auch mit Hilfe von Colin Viebrock die Website gtk.php.net.
Die Dokumentation musste ebenfalls erstellt werden, und James Moore begann hierbei zu helfen.
Seit seiner Freigabe gewinnt PHP-GTK an Popularität.
Wir haben unser eigenes Dokumentationsteam, das Handbuch wird weiter verbessert, die Leute beginnen Erweiterungen für PHP-GTK, und auch immer mehr Applikationen mit PHP-GTK zu schreiben.
Zurück
Zum Anfang
Nach vorne
Die Geschichte von PHP und verwandten Projekten
Nach oben
Bücher über PHP