# language_name_wals:	Mandarin
# language_name_glotto:	Mandarin Chinese
# iso639_3:	cmn
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Hans
# special_characters:	NA
# short_description:	KDE4
# source:	https://object.pouta.csc.fi/OPUS-KDE4/v2/raw/zh_CN.zip
# copyright_short:	http://opus.nlpl.eu/KDE4.php
# copyright_long:	http://opus.nlpl.eu/KDE4.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

KDE 中国EMAIL OF TRANSLATORS
kde- china@ kde. org
剖析档倾出
目标
时间
路径
选项
目标命令 ：
剖析档选项 ：
选项
值
跟踪
跳转
指令
事件
完整缓存
自定义
收集
启动时
倾出时机
跳过
PLT
函数
倾出剖析档
进入时
离开时
事件清零
分离
线程
递归
调用链
自定义剖析档 ：
运行新的剖析档
信息
倾出原因 ：
事件摘要 ：
名称
总计
杂项 ：
显示
比较
状态
更新
间隔( 秒) ：
计数器
倾出完成
收集中
已执行
基本区块
调用
不同
ELF 对象
函数
上下文
堆栈跟踪 ：
同步 。
#
包含
已调用
地址
开始
清零
倾出
消息
终止运行
清除
配置
常规
数量大于多少时截断 ：
百分比的精确度 ：
工具提示和上下文菜单中的符号
列表中的最大项目数 ：
开销项目的颜色
自动年
对象 ：
类 ：
文件 ：
注释
注释里的上下文 ：
源码文件夹
对象或相关源码的基础目录
添加...
删除
确定( O)
取消( C)
文件( F)
查看( V)
布局( L)
侧边栏
主工具栏
状态工具栏
部件概览
最高开销调用栈
最高开销调用栈 这只是虚拟的“ 最有可能的” 调用栈。 它建立在当前选中函数的开始上， 并将每个调用方和被调用方以最高开销添加到栈的两端 。 其中 开销 与 调用 栏显示的是上一行函数调用时的总执行开销 。
简单剖析档
复制( D)
复制当前版图 生成当前版图的副本 。
删除( R)
删除当前版图 删除当前版图并激活上一个图 。
跳至下一个( G)
跳至下一个版图
跳至上一个( G)
跳至上一个版图
恢复默认( R)
恢复默认版图
另存为默认( S)
将此版图存为默认版图
新建 打开新的 KCachegrind 空窗口 。
添加( A)...
添加剖析档数据 这将在当前窗口内打开一个附加的剖析档数据文件 。 Reload a document
重新载入( R)
重新载入剖析档数据 这将同时载入任何新建部件 。
导出图表( E)
导出调用图表 生成扩展名为 dot 的 GraphViz 工具包文件 。
强制倾出( F)
打开剖析档数据 这将打开一个剖析档数据文件， 可能带有多个部件 。
显示/ 隐藏可停靠部件概览
调用栈
显示/ 隐藏可停靠调用栈
函数剖析档
显示/ 隐藏可停靠函数剖析档
显示/ 隐藏可停靠剖析档倾出
相对
显示相对而不是绝对的执行开销
相对父类
相对父类的百分比开销
循环检测
在函数选择历史中后退
在函数选择历史中前进
向上 转到当前函数最后一个选中的调用方。 如果没有访问过任何调用， 则选择其最高开销 。
向上( U)
主要事件类型
选择开销的主要事件类型
次要事件类型
选择开销的次要事件类型， 如注解显示
分组
选择将函数分组到更高级开销项目的方式
(无分组)
分割面板
显示两个信息面板
水平分割
以水平方向分割主窗口
cachegrind. out * callgrind. out* |Callgrind 剖析档数据 * |所有文件
选择 Callgrind 剖析档数据
无法打开文件 “% 1 ” 。 请检查它是否存在以及您是否有读取权限 。
添加 Callgrind 剖析档数据
(已隐藏)
隐藏
显示绝对开销
显示相对开销
返回
前进
上移
制图计数 ：% 1
没有载入剖析档数据文件 。
总共% 1 开销 ：% 2
没有选择事件类型
(无堆栈)
(无下一个函数)
(无上一个函数)
(无向上函数)
KCachegrind
Callgrind/ Cachegrind 工具的 KDE 前端
(C) 2002 - 2007
Josef Weidendorfer
作者/ 维护者
显示此跟踪的信息
源码文件
C++ 类
函数( 无分组)
(常值)
KCachegrind 配置
列表项的最大值应在 500 以下， 将仍使用之前的设置 (% 1) 。
选择源码文件夹
KCachegrind 中每个界面构件都有相应的 这是什么... 提供用法细节信息 。 强烈推荐您首次使用时至少阅读一次这些帮助文字。 您可以按 Shift+F1 或点击构件来获取说明 。
如果附加了 -- dump- instr=yes 选项， 您可以在调用树中获取指令级 的剖析档信息 。 使用汇编器视图可获取指令注解 。
您可以按 Alt+Left/ Right 键在活动对象历史中后退/ 前进 。
您可以用方向按键在调用/ 被调用图中游览， 左右键可在相邻项目间跳转 ， 上下键可在不同嵌套等级中跳转。 要选择当前项， 按空格， 按回车则是激活 。
您可以用方向按键在调用版图中游览。 左右键可在当前选中的相邻调用 和函数间跳转， 上下键可在相邻的调用级别间跳转。 要激活当前项， 请按回车 。
您可以在工具栏的编辑行中输入某函数的部分名称( 不分大小写) 来快速定位到它 。
您可以在 设置 - > 配置 KCachegrind... 对话框中对 ELF 对象 、 C++ 类、 源码文件分别指定不同的绘图颜色 。
如果调试信息可用， 您可以在信息标签或源码标签的列表标头上看到相应的 函数调试信息 。 您必须提供源码文件名( 含扩展名) 。 如果 KCachegrind 依然无法显示源码 ， 请确认您已将源码文件添加到配置对话框的 源码文件夹 列表中 。
您可以设定 KCachgrind 要以百分比形式显示绝对事件计数或相对事件计数 。
您可以配置 KCachegrind 的最大函数列表项数值。 有效的限制可以加快 程序界面的响应。 列表中最后一个项目会显示省略的函数数量和它们的开销 。 要激活低开销函数， 请在简单剖析档中找到并选中它， 这样它会临时添加到 该简单剖析档列表中 。
总体标签和调用列表标签相反， 它显示的是调用了选中函数的 所有 上级函数 ， 以及被调用的下级函数， 包括直接调用和跨越栈的间接调用 。 例如 ： 选中函数 bar () ， 有一个上级函数 foo1 () 的值为 50% 代表从 foo1 () 调用 bar () 所占的开销占整个开销的 50% 。 下级函数列表中的 foo2 () 的值为 50% 代表 bar () 调用 foo2 () 的开销占整个开销 的 50% 。
鼠标指针悬停在树状图时若稍等一下， 会弹出相应的工具提示 ， 里面有嵌套的名称列表 。 此列表中的项目可以用鼠标右键选中 。
您可以限制只显示整个跟踪中一部分部件的计数， 只需在“ 跟踪选择” 停靠框 中选择这些部件 。 要在 cachegrind 剖析档中生成多个部件， 可使用选项 “ -- cachedumps=xxx ” ， “ xxx” 表示基本块的数量( 基本块是指您的程序中每个非分支的汇编语句块) 。