# language_name_wals:	Mandarin
# language_name_glotto:	Mandarin Chinese
# iso639_3:	cmn
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Hans
# special_characters:	NA
# short_description:	KDE4
# source:	https://object.pouta.csc.fi/OPUS-KDE4/v2/raw/zh_CN.zip
# copyright_short:	http://opus.nlpl.eu/KDE4.php
# copyright_long:	http://opus.nlpl.eu/KDE4.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

监视% 1 (% 2) 的输入输出( I/ O)
正在通过文件描述符监控程序 “% 1 ” (进程号 ：% 2) 的输入输出( 包括标准输入、 标准输出、 标准错误、 打开文件、 网络连接等) 。 由此进程写入的数据在下面以红色表示， 由其读取的数据则以蓝色表示 。
挂接( A)
暂停( P)
恢复( R)
取消挂接( D)
挂接到进程% 1 失败 。
跳转到父进程
跳转到正在调试此进程的进程
显示应用程序窗口
监视输入输出
恢复待机的进程
待机( STOP)
继续( CONT)
挂起( HUP)
中断( INT)
终止( TERM)
杀死( KILL)
用户 1( USR1)
用户 2( USR2)
快速搜索
发送信号
跳转到父进程 (% 1)
隐藏列 “% 1 ”
显示列 “% 1 ”
显示单位
每秒 KB
KB
每秒 MB
MB
每秒 GB
GB
百分比
显示命令行选项
CPU 利用率除以 CPU 数量
已显示信息
字符数读写
读写操作数
实际读写字节数
显示 I/ O 比率
显示工具提示
您没有权限更改此进程的运行优先级， 而尝试以 root 身份进行时遇到问题。 错误% 1% 2
您必须先选择一个进程 。
您没有权限更改 CPU 调度器。 已中止 。
您没有权限更改 CPU 优先级。 已放弃 。
您没有权限更改 IO 调度器和优先级。 已放弃 。
您没有权限更改此进程的 I/ O 优先级， 而尝试以 root 身份进行时遇到问题。 错误% 1% 2
您没有权限更改此进程的 CPU 调度方式， 而尝试以 root 身份进行时遇到问题。 错误% 1% 2
您没有权限杀死此进程， 而尝试以 root 身份进行时遇到问题。 错误% 1% 2
杀死
解析包含 VT100 命令集的输出， 针对基本的控制台程序 。
如果选中此项， ANSI 转义序列集将被解析， 不会直接输出。 在监控 bash 时很有用 。
解析 ANSI 转义序列集
显示由此进程启动的进程的输出 。
跟随派生及克隆命令以监控子进程
监控子进程
暂停进程及其输出
停止从进程中读取输出， 此操作将会阻塞进程并有效暂停其运行。 您可以通过恢复、 取消挂接或关闭此对话框等几种方式使其恢复运行 。
停止监控此进程
停止监控此进程并使其恢复运行 。
向所选进程发送 SIGTERM 信号 。 请查看“ 这是什么” 来获取更多信息 。 右键单击一个进程可以发送其它信号 。
<! DOCTYPE HTML PUBLIC "- // W3C // DTD HTML 4. 0 // EN" "http: // www. w3. org/ TR/ REC- html40/ strict. dtd" > p, li {white- space: pre- wrap;} 尝试以发送 SIGTERM 信号的方式杀死当前所选进程 技术信息 ： SIGTERM 信号将被发送到给定进程， 如果权限不足， 默认将会请求一个密码 。 通过 polkit- kde- authorization 这个程序， 您可以授予指定( 或所有) 用户不需密码就杀死任何进程的权限 。
杀死进程( K)...
在此输入进程显示过滤文字。 它可以是进程名、 进程命令或是窗口标题文字中的一部分， 也可以是进程用户名或进程号 。 示例 ： ksys显示所有包含 “ ksys ” 字串的进程， 例如 “ ksysguard ” 和 “ ksysguardd ” root显示所有属于 root 用户的进程。 例如 init 1234显示所有进程号或其父进程号是 1234 的进程 。
快速搜索
设定要显示哪些进程， 以及怎样显示。 您可以通过快速搜索过滤器来做到这些 。 所有进程显示系统上的所有进程 所有进程， 树状使用进程号按树状层级显示系统上的所有进程 。 系统进程显示所有以 root 和其它以不可登录用户身份运行的进程 。 用户进程显示所有以非 root 的可登录用户身份运行的进程 。 自属进程显示所有当前用户身份所属的进程 。 程序进程显示所有以可登录用户身份运行， 并且已挂接到一个终端， 或是拥有至少一个 X11 窗口的进程 。 技术信息 ： 多线程进程只会显示为单一进程， 不会被作为特例对待 。 内核线程会被显示为普通进程， 但只能在内核线程中运行， 并非实际进程， 因此有些字段( 如用户名) 不可用 。
全部进程
全部进程， 树形
系统进程
用户进程
自有进程
只有程序
更改调度优先级 ：
CPU 调度器
p, li {white- space: pre- wrap;} 标准的进程分时调度器， 没有特殊需求 。
p, li {white- space: pre- wrap;} 普通调度： 使用Linux 默认的分时调度器( 其它) 普通 的 Linux 标准分时调度器可供所有无特定实时优先级要求的进程使用。 要运行的进程会从其它的 普通 或 批处理 进程列表中选择， 选择依据于独立的动态优先级来决定， 而这动态优先级则依据给定的优先级及进程的等待时间而非调度器来决定。 这样可确保公平地调度所有常规意义上的进程 。
普通
p, li {white- space: pre- wrap;} 对和非交互式进程不同的 CPU 密集型进程而言， 在调度时这些进程会被予以适度搁置 。
p, li {white- space: pre- wrap;} 批处理调度 (自 Linux 2. 6. 16 以后) 和 普通 调度规则近似， 区别在于这种规则会假设进程都是 CPU 密集型的。 因此在这种方案下， 相应进程会在调度中受到一定的 CPU 等待时间惩罚, 但优先级不会低于 nice 设定值。 如果您需要一种固定的调度顺序， 并且不希望因交互式规则导致其它进程额外抢占过多的 CPU 时间， 这种规则会很有用 。
批处理
p, li {white- space: pre- wrap;} 只要可以， 进程就将运行。 进程会有时间片动作， 其优先级比普通或批处理模式都要高 。
p, li {white- space: pre- wrap;} 轮询调度 轮询 调度是基于 先进先出( FIFO) 原理的轻量增强型规则。 下面关于 先进先出( FIFO) 的描述也适用于 轮询 ， 差别在于轮询时每个进程只能运行固定的最大时间段 。
轮询
p, li {white- space: pre- wrap;} Process will run whenever right: 0px; - qt- block- indent: 0; text- indent: 0px; "> 只要可以， 进程就将运行。 进程不会有时间片动作， 其优先级比普通或批处理模式都要高 。
p, li {white- space: pre- wrap;} 先进先出调度 当一个 先进先出( FIFO) 进程可运行时， 它会立即抢占任何当前已在运行的 普通 或 批处理 进程 。
先进先出
I/ O 调度器
p, li {white- space: pre- wrap;} 进程优先级基于 CPU 优先级 。
p, li {white- space: pre- wrap;} 普通调度 和 最佳 式调度基本一样， 差别在于进程优先级会根据 CPU 优先级自动计算生成， 优先级越高的进程对磁盘的访问优先级也越高。 以相同的 最佳/ 普通 优先级运行的程序会以 轮询 方式交替运行 。
p, li {white- space: pre- wrap;} 只有在没有其它进程最近使用过磁盘的情况下， 进程才被允许访问磁盘 。
p, li {white- space: pre- wrap;} 空闲调度 如果程序以 空闲 I/ O 优先级运行， 只当没有其它程序在预定的一段时间内请求过磁盘 I/ O 的情况下， 此程序才被允许获得对磁盘的访问优先权。 使用 空闲 I/ O 调度的进程对常规系统活动基本没有影响， 而且进程优先级对它没有意义 。
空闲
p, li {white- space: pre- wrap;} 与普通调度相比， 进程会被给予更高的对磁盘访问的优先级 。
p, li {white- space: pre- wrap;} 最佳调度 优先级越高的进程对磁盘访问的优先级也越高。 以相同的 最佳/ 普通 优先级运行的程序会以 轮询 方式交替运行 。
最佳
p, li {white- space: pre- wrap;} 在需要时进程可立即获得对磁盘的访问权， 不管是否有其它进程在操作 。
p, li {white- space: pre- wrap;} 实时调度 实时调度 进程会获得对磁盘访问的第一优先级， 不管系统中是否有其它进程在操作。 因此您应该小心地使用 实时 调度， 它会阻塞其它进程对磁盘的操作。 当与 最佳 方式一同使用时， 可以定义八种优先级别， 以指定每个调度窗口中要给予进程多大的时间片 。
实时
低优先级
高优先级
脚本错误： setHtml () 的参数不是一个字符串
脚本错误： fileExists () 的参数不是一个字符串
脚本错误： readFile 的参数不是一个字符串
无法读取脚本 “% 1 ” 。 错误% 2
- 进程正在执行工作 。
- 进程正在等候事件发生 。
- 进程已停止。 此时不会响应用户输入 。
- 进程已完成并僵死， 但父进程未将其清理 。
进程名称 。
此进程的所属用户 。
控制此进程运行的终端 。
此进程的运行优先级。 范围从最低的 19 到最高的 - 19 。
此进程当前的 CPU 使用率 。
此进程当前的 CPU 总使用率 。
这是此进程在使用的虚拟内存空间总量， 包含共享库、 显存、 磁盘上的文件等。 这个数值基本没有意义 。
这是此进程本身在使用的物理内存总量 。 其中不包含交换空间和共享库代码的占用 。 通常这就是判断一个程序所占用内存的最实用数值 。
这是此进程的共享库在使用的物理内存总量 。 所有使用此库的进程都会共享这部分内存 。
启动此进程的命令 。
此进程所显示的任意窗口的标题 。
标识此进程的唯一进程号( UID) 。
读取的字节数。 参阅“ 这是什么” 可获取更多信息 。
写入的字节数。 参阅“ 这是什么” 可获取更多信息 。
技术信息： 内核进程名的字符长度最大为 8， 因此这里显示的完整命令会经过内部审核。 如果一个完整命令行第一个单词是其进程名， 则显示这个单词， 否则会显示进程名 。
进程的所属用户。 工具提示中包含更完整的信息 。 < table > 登录用户名/ 属组创建此进程的真实用户名/ 属组有效用户名/ 属组此进程的有效运行权限所对应的用户/ 属组， 仅当和真实用户不同时才显示。 SetUID 用户/ 属组进程的双重用户身份。 一个进程可以通过 SetUID/ GID 特性来提升权限。 文件系统用户名/ 属组此进程对文件系统的访问都会经过此用户名/ 属组的校验。 这是一个 Linux 上特有的系统调用。 请参阅 setfsuid( 2) 手册页了解更多信息 。
这是为进程分配的地址空间( 不是内存) ， 这个值的实际意义非常有限。 如果一个进程请求了很大的内存区块， 但实际利用的很少， 看上去 VIRT 值就会很高。 技术信息： 此数值在 proc / * / status 文件中体现为 VmSize， 在 top 命令中体现为 VIRT 。
技术信息： URSS 表示独立常驻空间， 它根据 / proc / * / statm 中的 VmRSS 值计算得出。 通过它可以容易地判断出一个进程的真实内存占用量( 不包括 I/ O 写回的内存页) 。
一个进程及其所有线程的 CPU 利用率 。
技术信息： 这里表示共享内存， 在 top 命令中以 SHR 表示。 它表示由文件写回的内存页数量( 参见内核文档 Documentation/ filesystems/ proc. txt) 。
技术信息： 此数据来源于 / proc / * / cmdline
技术信息： 每一个 X11 窗口都有用于和进程号实现映射的 _ NET_ WM_ PID 属性。 如果某个进程的窗口不能显示， 相应的问题程序就不会设置 _ NET_ WM_ PID 属性 。
技术信息： 这里是进程号( PID) ， 多线程程序也会被当作单一进程来对待， 它所有的线程都会共享相同的进程号。 而 CPU 利用率则是所有线程用到的总计值 。
此栏目显示的是每个进程的 IO 状态， 它提供以下的信息。 读取字符数此任务从存储介质上读取到的字符数， 这个数据是相应进程流经过 read () 和 pread () 系统调用的所有字节数的简单相加和， 其中也包括终端 IO 和其它不涉及真实磁盘读写的内容( 如页面缓存字节) 。 写入字符数此任务向存储介质上已写入的字符数， 数据来源和读取字符数类似。 读取调用数执行读取 I/ O 操作系统调用数量， 例如 read () 和 pread () 。 写入调用数执行写入 I/ O 操作的系统调用数量， 例如 write () 和 pwrite () 。 实际读取字节数此进程实际从存储介质获取到的字节数量， 由 submit_ bio () 一级的系统调用完成。 对于使用块设备存储的文件系统而言， 这是一个精确的参考值， 但对于 NFS 和 CIFS 等网络文件系统而言可能意义不大。 实际写入字节数由此进程发送给存储介质的字符数统计， 其数据是根据脏内存页处理时间得来。 括号内的数字显示的是各统计值的更新比率， 它是由两次数据变化之间的差异除以更新时间间隔得来的。 技术信息： 此数据来源于 / proc / * / io， 更详细的说明文档请参见内核树中 Documentation/ accounting 和 Documentation/ filesystems/ proc. txt 。
登录名 ：% 1
因为某些原因， 无法识别此用户 。
% 1
登录名 ：% 1 (uid ：% 2)
房间号 ：% 1
工作电话 ：% 1
有效用户 ：% 1
SetUid 用户 ：% 1
文件系统用户 ：% 1
组 ：% 1
有效用户组 ：% 1
Setuid 用户组 ：% 1
文件系统用户组 ：% 1Short description of a process. PID, name, user
% 1 ：% 2， 所属用户为% 3
% 1 (gid ：% 2)
% 1 (uid ：% 2)
% 1/ 秒tooltip. name, pid
此进程正在被% 1 (% 2) 调试
Init 是所有其它进程的父进程， 不能杀死 。
KThreadd 用于管理内核线程。 其子进程在内核中运行， 可控制硬盘访问等种种工作 。 name column tooltip. first item is the name
% 1 进程号 ：% 2 name column tooltip. first item is the name
% 1 进程号 ：% 2 父进程 ：% 3 父进程号 ：% 4name column tooltip. first item is the name
% 1 进程号 ：% 2 父进程号 ：% 3
命令 ：% 1
运行在 ：% 1
启动此进程的命令 ：% 1
运行在 ：% 1
优先级 ：% 1 (% 2)
调度器优先级 ：% 1
调度器 ：% 1
I/ O 优先级 ：% 1 (% 2)
I/ O 类别 ：% 1
进程状态 ：% 1% 2用户 CPU 使用率 ：% 3% 系统 CPU 使用率 ：% 4%
子进程数量 ：% 1 用户 CPU 使用率总计 ：% 2% 系统 CPU 使用率总计 ：% 3% CPU 使用率总计 ：% 4%
花费在用户空间的 CPU 时间 ：% 1 秒
花费在内核空间的 CPU 时间 ：% 1 秒
优先级 ：% 1 (% 2)
内存用量 ：% 1， 共% 2 (% 3%)
内存用量 ：% 1
RSS 内存用量 ：% 1， 共% 2 (% 3%)
RSS 内存用量 ：% 1
您的系统似乎没有提供给我们这方面的信息 。
共享库内存用量 ：% 1， 共% 2 (% 3%)
共享库内存用量 ：% 1
读取字符 ：% 1 (% 2 KiB/ 秒) 写入字符 ：% 3 (% 4 KiB/ 秒) 读取系统调用 ：% 5 (% 6 s⁻¹) 写入系统调用 ：% 7 (% 8 s⁻¹) 实际读取字节 ：% 9 (% 10 KiB/ 秒) 实际写入字节 ：% 11 (% 12 KiB/ 秒) process heading
名称process heading
用户名process heading
进程号process heading
终端process heading
优先级process heading
CPU% process heading
IO 读取process heading
IO 写入process heading
虚拟大小process heading
内存process heading
共享内存process heading
命令process heading
窗口标题
% 1 K
% 1 M
% 1 G
% 1%
调整进程优先级
否 。
找不到 kdesu 可执行文件 。
找不到 setscheduler 可执行文件， 它应该已和系统监视器一同安装了 。
您没有权限调整进程优先级， 而以 root 运行又遇到问题 。
您没有权限调整 I/ O 优先级， 而以 root 运行又遇到问题 。