# language_name_wals:	Mandarin
# language_name_glotto:	Mandarin Chinese
# iso639_3:	cmn
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Hans
# special_characters:	NA
# short_description:	KDE4
# source:	https://object.pouta.csc.fi/OPUS-KDE4/v2/raw/zh_CN.zip
# copyright_short:	http://opus.nlpl.eu/KDE4.php
# copyright_long:	http://opus.nlpl.eu/KDE4.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

函数
已禁用
待定( 添加)
待定( 清除)
待定( 修改)
活动Code breakpoint
代码
在调试器运行前发送了 GDB 命令 命令为 ：% 1
内部错误
无效的调试器命令% 1
无效的调试器命令
无效的 gdb 回应“ stopped” 数据包不包含“ reason” 字段 。
gdb 回应为： 无效
无效的 gdb 回应
以信号% 1 退出
程序收到了信号% 1 (% 2)
收到信号
gdb 消息 ：% 1
警告
程序运行中
gdb 无法使用 tty * 或 pty * 设备 。 请检查 / dev/ tty * 和 / dev/ pty * 的设置 您也许需要作为超级用户对 tty * 和 pty * 设备使用“ chmod ug+rw” 命令并且/ 或者使用“ usermod - G tty username” 命令将用户添加到 tty 组中 。
应用程序没有退出您正尝试调试的应用程序 ，% 1 没有退出。 请检查您在调试器配置中已指定了正确的应用程序 。
应用程序不存在
无法运行程序 “% 1 ” 。 此程序没有设置可执行权限位。 请尝试重新构建工程或手动更改程序权限 。
无法运行应用程序
调试器错误调试器报告了以下错误 ：% 1
调试器错误
调试器状态
当前命令类别 ： “% 1 ” 当前命令文本 ： “% 2 ” 当前命令的原文 ： “% 3 ”
调试器状态
机器码显示显示机器代码的视图， 里面显示您当前运行的程序中的指令并且当前指令被加亮。 您可以使用调试器工具栏中的“ 单步指令” 和“ 单步跟进指令” 按钮来逐条执行指令 。
反汇编视图
地址
偏移量
指令
堆栈框架通常又叫做“ 调用堆栈 ” ， 它是一个列表， 显示当前运行的是哪个函数以及在您的程序中谁调用了每一个函数从而到达当前位置。 点击一个项目您可以看到在前面调用的函数的参变量值 。
无法定位调试器 shell “% 1 ” 。
未找到调试器 Shell Internal debugger error
调试器组件在处理 gdb 响应时遇到内部错误。 请提交错误报告 。
内部调试器错误
进程已退出
无法启动调试器 。 “% 1” 不能运行。 请确认您指定的路径名无误 。
无法启动调试器
调试器断点
断点列表显示断点列表和它们的当前状态。 用鼠标右键点击断点项目， 就会弹出一个菜单， 这样您就可以对这个断点进行操作。 双击断点将会把您带到编辑窗口中的源文件处。 New breakpoint
新建Data breakpoint
数据写入Data read breakpoint
数据读取
显示文字
编辑
禁用
删除
全部禁用
全部启用
全部删除
数据写入断点 表达式 ：% 1 地址： 0x% 2 旧值 ：% 3 新值 ：% 4
启用
GDB 输出
GDB 输出显示所有已执行过的 gdb 命令。 您也可以在调试时分派任何其它 gdb 命令 。
GDB 命令( G) ：
暂停执行中的程序以输入 gdb 命令
显示内部命令
全部复制
监视
最近
附加到进程
调试器变量
计算 ：% 1
监视
表达式条目输入要监视的表达式 。
重新赋值表达式
最近的表达式
全部删除
全部重新赋值
格式
自然格式
十六进制
十进制
字符
二进制
记住值
删除监视变量
监视变量
重新赋值表达式
删除表达式
数据写入断点
复制值
无效
监视点
读入监视点
调试器配置
调试参数可在运行选项页面 或直接在项目管理器中设定
调试器可执行文件 ：
Gdb 可执行文件
在特定的 shell 中运行 gdb( 主要用于 automake 工程)
调试器外壳( S) ：
选项
显示静态成员将会使 gdb 在 KDE 和 Qt 中生成数据的速度变慢 。 它可能改变那些 QString 和友元 函数所依赖的数据的“ 签名 ” 。 但是如果您需要调试这些变量的话 ， 请选中这个选项 。
显示静态成员( M)
当显示反汇编代码时， 您可以选择显示编码后的方法名 。 然而， 未编码的方法名要容易阅读得多 。
显示解码后的方法名( D)
当一个库通过“ dlopen” 加载的时候， 如果 GDB 没 有用到过它， 那么它将拒绝在那里的代码中设置断点 。 我们可以在载入库的时候让 GDB 停下来， 这样我们 就可以尝试设置待定断点。 请在相关文档中查看与这 种行为相关的更多细节 。 如果您不是用“ dlopen” 加载库， 请不要选择这项 。
尝试在装入库时设置断点( B)
使用可以浮动的工具栏。 这种工具栏通常呆在 所有的窗口的顶部， 因此如果一个应用程序覆盖 了 KDevelop， 您可以通过这个小工具栏来控制 应用程序， 这个工具栏也可以停靠在面板上 。 这个工具栏是 KDevelop 工具栏之外的一个补充 。
启用浮动工具栏( N)
如果您的应用程序含有终端输入代码( 比如 cin、 fgets 等等) 这让您可以在终端里进行输入。 如果您在程序里用到终端输入 请选中此选项， 反之请不要选中它 。
为应用程序输入输出启用独立的终端( I)
在调试器中运行
堆栈框架
这个脚本是连接到远程运行的执行程序所需要的实际命令 。\ tshell sleep 5\ t等待远程程序启动\ ttarget remote...\ t连接到远程调试器\ tcontinue\ t[ optional] 调试运行到第一个断点
远程调试
配置 gdb 脚本( C) ：
Gdb 配置脚本
Shell script to be executed at run time
运行 shell 脚本( U) ：
启动远程应用程序的脚本
这个脚本用于远程调试时启动远程进程 。 ［ 这个脚本希望可以连接调试的进程， 或者在编译的最后可以下载到本地 。 ］ 1) 选择执行远程命令的方式－ rsh， ssh， telnet ，... 2a) 在目标平台上运行" gdbserver... 应用程序 "。 或者您的应用程序中已经包含gdb启动程序 2b) 在目标平台上运行" 应用程序" 。 Gdb script to be executed at run time.
运行 gdb 脚本( G) ：
连接远程应用程序的脚本
这个脚本是连接到远程运行的执行程序所需要的实际命令 。\ tshell sleep 5\ t等待远程程序启动\ ttarget remote...\ t连接到远程调试器\ tcontinue\ t[ optional] 调试运行到第一个断点 。
跟踪配置
启用跟踪
取消
自定义格式字符串
确定
要打印的表达式 ： @ title: menu
运行
调试工具栏
Pid
TTY
开始
时间
命令NAME OF TRANSLATORS
Ni HuiEMAIL OF TRANSLATORS
shuizhuyuanluo@ 126. com
开始
总计
内存视图
更改内存范围
重新装入
关闭此视图
特殊调试器视图
断点
临时
硬件
已启用
类型
状态
位置
条件
忽略计数
次
正在跟踪
框架
GDB 支持
在 GDB 中运行程序支持
断点
变量
堆栈框架
反汇编
GDB
启动( S)
在调试器中启动
在调试器中运行在调试器里运行此工程的主要执行程序。 开始前您可以先设置一些断点， 或者您也可以在程序运行的时候中断它， 查看变量、 堆栈框架等信息 。
重新启动( R)
重新启动程序
重新启动程序从开始处再次启动应用程序 。
停止( P)
停止调试器
停止调试器强行终止执行并退出调试器 。
中断
中断程序
中断程序中断被调试的进程或当前执行的 GDB 命令 。
运行到光标处( C)
运行到光标处
运行到光标处执行到光标所在的位置处 。
执行位置设为光标处( X)
跳转到光标处
设置执行位置将执行指针设到当前光标的位置处 。
步进执行( O)
按行一步步执行
单步执行当前源文件中的一行源代码。 如果这行源代码是一个函数调用， 则执行完整个函数并且停在函数返回后的那行代码处 。
步进执行指令( T)
步进执行指令
步进执行指令一步步执行下一条汇编指令 。
步进跳转( I)
步进跳转到下一条语句
单步跟进仅执行一行源代码。 如果这行源代码是一个函数调用， 则进入函数后马上停在函数开始处 。
步进跳转指令( N)
步进跳转指令
步进跳转指令一步步跳转到下一条汇编指令 。
步进跳出( U)
步进跳出当前函数
跳出函数执行应用程序直到当前函数执行完毕。 调试器将会显示原来调用该函数的地方之后的源代码。 如果程序在最外层的框架执行( 比如在 main () 中) ， 这个操作将没有效果 。
查看器
调试查看器
调试器视图关于被执行程序的多种信息。 共有四个视图： 内存反汇编寄存器库
剖析核心文件...
剖析核心文件
检查溃核文件加载 core 溃核文件。 它通常在程序崩溃后产生， 比如段错误等。 溃核文件包含程序崩溃时的内存映像， 能让您进行后期崩溃分析 。
附加到进程
附加到进程将调试器附加到运行中的进程 。
切换断点
切换断点
切换断点将断点切换到编辑器中的当前行位置处 。
在 KDevelop 中调试( K)
计算 ：% 1
计算表达式显示光标下表达式的值 。
监视 ：% 1
观察表达式将光标下的表达式添加到变量/ 观察列表 。
GDB 异常退出这像是 GDB 中的错误。 请检查 gdb 输出窗口然后停止调试器
GDB 异常退出
选择要剖析的核心文件...
正在剖析核心文件% 1
选择要附加到的进程...
正在附加到进程% 1
调试器
调试器已停止
在调试器中运行程序
在调试器中运行 在调试器里运行此工程的主要执行程序。 开始前您可以先设置一些断点， 或者您也可以在程序运行的时候中断它， 查看变量、 堆栈框架等信息 。
继续( C)
继续执行应用程序
继续运行程序 在调试器中继续执行您的应用程序。 只有在您的应用程序被调试器暂停( 比如断点被激活或者您按了中断) 的时候， 继续执行程序才有效 。
变量
值
kdevelop： 程序调试控制台