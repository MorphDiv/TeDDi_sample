# language_name_wals:	Mandarin
# language_name_glotto:	Mandarin Chinese
# iso639_3:	cmn
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Hans
# special_characters:	NA
# short_description:	KDE4
# source:	https://object.pouta.csc.fi/OPUS-KDE4/v2/raw/zh_CN.zip
# copyright_short:	http://opus.nlpl.eu/KDE4.php
# copyright_long:	http://opus.nlpl.eu/KDE4.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

单元格% 1 中的方程式解析失败 。
澳大利亚
美元
加拿大
加勒比海
新西兰
美国
奥地利
欧元
比利时
塞浦路斯
芬兰
法国
德国
希腊
爱尔兰
意大利
卢森堡
马耳他
摩纳哥
荷兰
葡萄牙
圣马力诺
斯洛伐克
斯洛文尼亚
西班牙
英国
英镑
日本
日元
阿富汗
阿富汗尼
AFA
阿富汗尼
AFA
阿尔巴尼亚
列克
阿尔及利亚
阿尔及利亚第纳尔
DZD
美属萨摩亚
美元
USD
安道尔
EUR
安道尔陪士特
ADP
安哥拉
宽札
AOA
安圭拉
东加勒比元
XCD
安提瓜和巴布达
东加勒比元
阿根廷
阿根廷比索
ARS
亚美尼亚
亚美尼亚特拉姆
AMD
阿鲁巴
阿鲁巴基尔得
AWG
澳元
AUD
先令
S
阿塞拜疆
阿塞拜疆马纳特
AZM
巴哈马群岛
巴哈马元
BSD
巴林
巴林第纳尔
BHD
孟加拉
塔卡
BDT
巴巴多斯
巴巴多斯元
BBD
白俄罗斯
白俄罗斯卢布
p.
法郎
BF
伯利兹
伯利兹元
BZ$
贝宁
非洲金融共同体法郎
XOF
百慕大群岛
百慕大元
BMD
不丹
印度卢比
INR
不丹元
BTN
玻利维亚
玻利维亚货币单位
Bs
Mvdol
BOV
波斯尼亚和黑塞哥维那
可兑换马克
BAM
博茨瓦纳
普拉
BWP
波维特岛
挪威克朗
NOK
巴西
巴西瑞尔
R$
英属印度洋领地
文莱
文莱元
BND
保加利亚
列弗
BGL
保加利亚列弗
BGN
布吉纳法索
布隆迪
布隆迪法郎
BIF
柬埔寨
瑞尔
KHR
喀麦隆
CFA法郎BEAC
XAF
加拿大元
CAD
佛得角
佛得角埃斯库多
CVE
开曼群岛
开曼群岛元
KYD
中非共和国
乍得
智利
智利比索
Ch$
Unidades de fomento
CLF
中国
人民币
CNY
圣诞岛
科科斯群岛
哥伦比亚
哥伦比亚比索
C$
科摩罗
科摩罗法郎
KMF
刚果
刚果民主共和国
刚果法郎
CDF
库克群岛
新西兰元
NZD
哥斯达黎加
哥斯达黎加克朗
C
科特迪瓦
克罗地亚
克罗地亚昆拉
kn
古巴
古巴比索
CUP
塞浦路斯镑
CYP
捷克共和国
捷克克朗
Kc
丹麦
丹麦克朗
kr
吉布提
吉布提法郎
DJF
多米尼加
RD$
多米尼加共和国
多米尼加比索
DOP
东帝汶
帝汶埃斯库多
TPE
厄瓜多尔
埃及
埃及镑
EGP
萨尔瓦多
萨尔瓦多科郎
赤道几内亚
厄立特里亚
拉克法
ERN
爱沙尼亚
克朗
埃塞俄比亚
埃塞俄比亚比尔
ETB
福克兰群岛( 马尔维纳斯)
福克兰群岛镑
FKP
法罗群岛
斐济
斐济元
FJD
马克
mk
F
法属圭亚那
法属波利尼西亚
CFP 法郎
XPF
法属南部领地
加蓬
冈比亚
达拉西
GMD
格鲁吉亚
拉里
GEL
德国马克
DM
加纳
塞地
GHC
直布罗陀
直布罗陀镑
GIP
德拉克马
GRD
格陵兰
DKK
格林纳达
瓜德罗普岛
关岛
危地马拉
格查尔
Q
几内亚
几内亚法郎
GNF
几内亚比绍共和国
几内亚比绍共和国比索
GWP
圭亚那
圭亚那元
GYD
海地
古德
HTG
赫德和卖当劳群岛
梵蒂冈
洪都拉斯
伦皮拉
L
中国香港
港元
HKD
匈牙利
福林特
Ft
冰岛
冰岛克朗
kr.
印度
印度尼西亚
卢比( 盾)
Rp
伊朗伊斯兰共和国
伊朗里亚尔
IRR
伊拉克
伊拉克第纳尔
IQD
Punt
IR ----
便士
IEX
以色列
新以色列谢克尔
ILS
里拉
L.
牙买加
牙买加元
J$
JPY
约旦
约旦第纳尔
JOD
哈萨克斯坦
坦吉
KZT
肯尼亚
肯尼亚先令
KES
基里巴斯共和国
朝鲜人民民主共和国
北韩元
KPW
韩国
韩国元
KRW
科威特
科威特第纳尔
KWD
吉尔吉斯坦
萨姆
KGS
老挝
基普
LAK
拉脱维亚
拉脱维亚拉兹
Ls
黎巴嫩
黎巴嫩镑
LBP
莱索托
兰特
ZAR
洛第
LSL
利比里亚
利比里亚元
LRD
利比亚
利比亚第纳尔
LYD
列支敦士登
瑞士法郎
CHF
立陶宛
立陶宛立塔斯
Lt
中国澳门
澳门元
MOP
马其顿共和国
丁拉
MKD
马达加斯加岛
马拉加西法郎
MGF
马拉维
夸加
MWK
马来西亚
马来西亚林吉特
MYR
马尔代夫
卢非亚
MVR
马里
EURO
马耳他里拉
MTL
马绍尔群岛
马提尼克岛
毛里塔尼亚
乌吉亚
MRO
毛里求斯
毛里求斯卢比
MUR
马约特群岛
墨西哥
墨西哥比索
MXN
墨西哥 UDI
MXV
密克罗尼西亚联邦国
摩尔多瓦
摩尔多瓦列伊
MDL
蒙古
图格里克
MNT
蒙特塞拉特
摩洛哥
摩洛哥迪拉姆
MAD
莫桑比克
梅蒂卡尔
MZM
缅甸
缅甸元
MMK
纳米比亚
纳米比亚元
NAD
瑙鲁
尼泊尔
尼泊尔卢比
NPR
荷兰盾
fl
荷属安的列斯
荷属安的列斯盾
ANG
新喀里多尼亚
尼加拉瓜
科多巴
NIO
尼日尔
尼日利亚
奈拉
NGN
纽埃
诺福克群岛
北马里亚纳群岛
挪威
阿曼
阿曼里亚尔
OMR
巴基斯坦
巴基斯坦卢比
PKR
帕劳
巴拿马
巴波亚
PAB
巴布亚新几内亚
基纳
PGK
巴拉圭
瓜拉尼
G
秘鲁
新太阳币
PEN
菲律宾
菲律宾比索
PHP
皮特康岛
波兰
兹罗提
zt
埃斯库多
Esc.
波多黎各
卡塔尔
卡塔尔里亚尔
QAR
罗马尼亚
列伊
LEI
俄罗斯
俄罗斯卢布
RUR
RUB
卢旺达
卢旺达法郎
RWF
圣赫勒拿岛
圣赫勒拿镑
SHP
圣基德和列维斯
圣卢西亚岛
圣皮埃尔和麦克伦群岛
圣文森特和格林纳达
萨摩亚
塔拉
WST
圣多美和普林西比
杜布拉
STD
沙特阿拉伯
沙特里亚尔
SAR
塞内加尔
塞舌尔群岛
塞舌尔卢比
SCR
塞拉利昂
利昂
SLL
新加坡
新加坡元
SGD
斯洛伐克克朗
Sk
托勒
SIT
所罗门群岛
所罗门群岛元
SBD
索马里
索马里先令
SOS
南非
R
培士特
Pts
斯里兰卡
斯里兰卡卢比
LKR
苏丹
苏丹第纳尔
SDD
苏里南
苏里南盾
SRG
斯瓦巴和尖棉岛
斯威士兰
里兰吉尼
SZL
瑞典
瑞典克朗
瑞士
SFr.
叙利亚
叙利亚镑
SYP
中国台湾
新台币
TWD
塔吉克斯坦
Somoni
TJS
坦桑尼亚
坦桑尼亚先令
TZS
泰国
泰铢
THB
多哥
托克劳群岛
汤加
巴安加
TOP
特立尼达和多巴哥
特立尼达和多巴哥元
TT$
突尼斯
突尼斯第纳尔
TND
土耳其
土耳其里拉
TL
土库曼斯坦
马纳特
TMM
特克斯和凯科斯群岛
图瓦卢
乌干达
乌干达先令
UGX
乌克兰
Hryvnia
UAH
阿拉伯联合酋长国
UAE 迪拉姆
AED
英镑
GBP
美元( 下一天)
USN
美元( 同一天)
USS
乌拉圭
乌拉圭比索
NU$
乌兹别克斯坦
乌兹别克 Sum
UZS
瓦鲁阿图
Vatu
VUV
委内瑞拉
博利瓦
越南
越南盾
VND
维尔金群岛
瓦利斯和富图群岛
西撒哈拉
也门
也门里亚尔
YER
南斯拉夫
南斯拉夫第纳尔
YUM
赞比亚
ZMK
津巴布韦
津巴布韦元
ZWD
文字
整数( 如1, 132, 2344)
布尔值( 真 或 假)
浮点数( 如1. 3, 0. 343, 253)
任意类型值
字符串范围
整数范围( 如 1, 132, 2344)
布尔值范围( 真 或 假)
浮点数范围( 如1. 3, 0. 343, 253)
任意类型值范围
返回类型 ：% 1
语法
参数
评论 ：% 1
类型 ：% 1
例子
相关函数
工作表% 1
此文档没有工作表( 表格) 。
在单元格编辑器中用左右箭头键导航文本 。
如果为真， 您可以在单元格编辑器中用左右箭头键导航 。 否则， 退到编辑模式 。
文件( F)
编辑( E)
填充( L)
清除
删除
视图( V)
插入( I)
外部数据( E)
格式( O)
合并单元格
行( R)
列( C)
工作表( S)
打印范围( P)
数据( D)
过滤
工具( T)
设置( S)
编辑
导航
字体
格式
颜色/ 边框NAME OF TRANSLATORS
KDE 中国, Ni HuiEMAIL OF TRANSLATORS
kde- china@ kde. org, shuizhuyuanluo@ 126. com
数据库选择器
数据区域
区域 ：
第一行为列标签
第一列为标签
数据格式
行内数据集
列内数据集
预览
时间
日期
分数
货币
货币
百分比
常规
数字
日期和时间
货币 ：
格式 ：
后缀 ：
精度 ：
前缀 ：
您可以在此选择字体样式、 大小和颜色， 包括一些诸如对当前单元格文本添加下划线或删除线之类的额外选项。 页面的下方部分给出了所选文本格式的预览 。 默认字体由 格式 - > 样式管理器 菜单中以当前所使用的样式为全部单元格设定 。
罗马尼亚
意大利
正常
粗体
颜色 ：
如果选中的话， 当前单元格中的文字将会加下划线 。
下划线
大小 ：
粗细 ：
样式 ：
如果选中的话， 当前单元格中的文字将会加删除线 。
删除线
水平
标准
居左
居中
居右
垂直
顶部
中间
底部
旋转
°
文本选项
文字换行
垂直文字
缩进
合并单元格
单元格大小
默认高度 (% 1)
高度 ：
设定单元格的高度 。
默认宽度 (% 1)
宽度 ：
打印
不打印文字( D)
保护
全部隐藏( A)
已保护( P)
隐藏公式( H)
内容
所有内容
注释
结果
所有内容边框除外
操作
覆盖
相加
相减
相乘
相除
分类汇总
分类汇总累加到 ：
使用函数 ：
每次更改发生在 ：
列
选项
替换当前的分类汇总( R)
在组之间分页( P)
数据下方显示摘要( S)
只有摘要( O)
寻找更改时忽略空单元格( I)
文件选项
最近使用过的文件列表中条目数量 ：
控制着您选择 文件 - > 打开最近使用过的文件 所显示的文件名最大数量 。
自动保存延迟( 分钟) ：
在此您可以选择自动保存之间的时间间隔， 或者通过选择不自动保存来完全禁用此特性( 将滑块拖动到最左边) 。
不自动保存
分钟
如果您想要创建备份文件， 选中此复选框。 默认选中 。
创建备份文件
按下回车键之后光标的移动 ：
在状态栏中显示的功能 ：
单元 ：
缩进步长 ：
颜色
网格 ：
自定义...
页面边框 ：
打印设置
网格
注释标示符
图表
对象
零值
公式指示器
绘图
页眉
页面顺序
从左到右， 然后向下
从上往下， 然后交叉
页面上的表格对齐
水平居中
垂直居中
每一页的重复
列从
行从
到
缩放比例
固定缩放 ：
页面限制 ：
工作表属性基础
布局方向 ：
自左至右
自右至左
显示注释标示符( O)
使用 LC 模式( L)
显示页面边界( B)
首字母转换为大写( C)
隐藏零值( H)
显示公式( F)
列标显示为数字( N)
显示公式指示器( I)
显示网格( G)
自动重新计算( A)
全部工作表
活动的工作表
选中的工作表 ：
可用的工作表
可用的工作表
按给定顺序列出要打印的工作表 。
选中的工作表
选择全部工作表
将选中的工作表上移至顶
选择工作表
将选中的工作表上移
删除工作表
将选中的工作表下移
清除选择
将选中的工作表下移至底
依赖
剪切
无效的文档。 工作表名称为空 。
您不能更改受保护的工作表 < "and" >
页
页
文件
名称
时间
日期
作者
电子邮件 ：
组织
工作表
标题
标题1
默认
单元格% 1 验证失败
真
假Error: circular formula dependency
# CIRCLE! Error: broken cell reference
# DEPEND! Error: division by zero
# DIV/ 0! Error: not available
# N/ AError: unknown function name
# NAME? Error: number out of range
# NUM! Error: empty intersecting area
# NULL! Error: formula not parseable
# PARSE! Error: invalid cell/ array reference
# REF! Error: wrong (number of) function argument( s)
# VALUE!
下午
上午
小时
分钟
秒
真
假
下午
上午
数位操作
第一个数
第二个数
CONCATENATE () 函数返回一个由参数字符串拼接起来的字符串 。
BITAND( 值; 值)
PERMUT () 函数返回排列数目。 第一参数是元素的总数, 第二参数是用于排列的元素数 。
PERMUT () 函数返回排列数目。 第一参数是元素的总数, 第二参数是用于排列的元素数 。
CONCATENATE () 函数返回一个由参数字符串拼接起来的字符串 。
BITOR( 值; 值)
CONCATENATE () 函数返回一个由参数字符串拼接起来的字符串 。
BITXOR( 值; 值)
转换
要转换的布尔值
BOOL2STRING () 函数返回一个给定布尔数值的字符串表示。 这个方法是为了在需要字符串参数的场合使用布尔变量 。
BOOL2STRING( 值)
BOOL2STRING( true) 返回 "True"
BOOL2STRING( false) 返回 "False"
upper( BOOL2STRING( find ("nan"; "banana"))) 返回 True
要转换的整数值
INT2BOOL () 函数返回给定整数的布尔值。 这个方法是为了在需要布尔参数的场合使用整数值。 它只接受整数 0 和 1。 如果给定了任何其它值， 它会返回 false 。
INT2BOOL( 整数值)
INT2BOOL( 1) 返回 True
INT2BOOL( 0) 返回 false
OR( INT2BOOL( 1); false) 返回 True
BOOL2INT () 函数返回给定布尔值的整数值。 这个方法是为了在需要整数参数的场合使用布尔值 。
BOOL2INT( 布尔值)
BOOL2INT( True) 返回 1
BOOL2INT( False) 返回 0
要转换为字符串的数字
NUM2STRING () 函数返回给定数字的字符串值。 请注意， KSpread 会在需要时自动将数值转换为字符串， 所以此函数很不常用 。
NUM2STRING( 数字)
NUM2STRING( 10) 返回 "10"
NUM2STRING( 2. 05) 返回 "2. 05"
=find ("101"; NUM2STRING( A1)) (A1 = 2. 010102) 返回 True
STRING () 函数返回给定数字的字符串值。 此函数与 NUM2STRING 函数相同 。
要转换的只包含单个字符的字符串
CHARTOASCII () 函数返回给定字符的 ASCII 代码 。
CHARTOASCII( 字符)
CHARTOASCII ("v") 返回 118
CHARTOASCII( r) 是错误的， 字符必须放在引号里 。
要转换的 ASCII 值
ASCIITOCHAR () 函数返回具有给定 ASCII 值的字符 。
ASCIITOCHAR( 值)
ASCIITOCHAR( 118) 返回 "v"
ASCIITOCHAR( 75; 68; 69) 返回 "KDE"
X中的值
Y中的值
POLR () 函数返回笛卡尔坐标系上某点位置对应的半径值 。
POLR( X; Y)
POLR( 12; 12) 返回 16. 9705
POLR( 12; 0) 返回 12
POLA () 函数返回笛卡尔坐标系上某点位置对应的角度值( 单位为弧度) 。
POLA( X; Y)
POLA( 12; 0) 返回 0. 78539816
POLA( 12; 0) 返回 0
POLA( 0; 12) 返回 1. 5707
半径
角度 (弧度)
CARX () 函数返回极坐标上某点位置对应的 X 位置 。
CARX( 半径; 弧度)
CARX( 12; 1. 5707) 返回 0. 00115592
CARX( 12; 0) 返回 12
值
DECSEX () 函数把一个双精度值转换为时间值 。
DECSEX( 双精度值)
DECSEX( 1. 6668) 返回 1: 40
DECSEX( 7. 8) 返回 7: 47
小时
分钟
秒
SEXDEC () 函数返回一个十进制的值。 您也可以提供一个时间值 。
SEXDEC( 时间值) 或 SEXDEC( 小时; 分钟; 秒)
SEXDEC( 1; 5; 7) 返回 1. 0852778
DECSEX ("8: 05") 返回 8. 08333333
CARY () 函数返回极坐标上某点位置对应的 Y 位置 。
CARY( 半径; 弧度)
CARY( 12; 1. 5707) 返回 12
CARY( 12; 0) 返回 0
ROMAN () 函数返回古罗马格式的数字。 数字应该是正整数 。
ROMAN( 数值)
ROMAN( 99) 返回 "XCIX"
ROMAN (- 55) 返回 "Err"
数字
ARABIC () 函数把罗马数字转换为数 。
ARABIC( 罗马数字)
ARABIC ("IV") 返回 4
ARABIC ("XCIX") 返回 99
数据库
标记数据库的范围
标记数据库表列的字符串
标记条件的范围
对数据库里由一组条件指定的某一列数字求和 。
DSUM( 数据库; "列头"; 条件)
DSUM( A1: C5; "Salary"; A9: A11)
计算数据库里由一组条件指定的某一列里的所有数字的平均值 。
DAVERAGE( 数据库; "列头"; 条件)
DAVERAGE( A1: C5; "Salary"; A9: A11)
对数据库里由一组条件指定的某一列里的所有数字单元格计数 。
DCOUNT( 数据库; "列头"; 条件)
DCOUNT( A1: C5; "Salary"; A9: A11)
对数据库里由一组条件指定的某一列里的数字和字符单元格计数 。
DCOUNTA( 数据库; "列头"; 条件)
DCOUNTA( A1: C5; "Salary"; A9: A11)
对数据库里由一组条件指定的某一列返回一个值， 如果该列没有数值或者有多个数值， 它将返回错误 。
DGET( 数据库; "列头"; 条件)
DGET( A1: C5; "Salary"; A9: A11)
返回数据库里由一组条件指定的某一列内的最大值 。
DMAX( 数据库; "列头"; 条件)
DMAX( A1: C5; "Salary"; A9: A11)
返回数据库里由一组条件指定的某一列内的最小值 。
DMIN( 数据库; "列头"; 条件)
DMIN( A1: C5; "Salary"; A9: A11)
返回数据库里由一组条件指定的某一列内所有数值的乘积 。
DPRODUCT( 数据库; "列头"; 条件)
DPRODUCT( A1: C5; "Salary"; A9: A11)
对数据库里由一组条件指定的某一列内所有数值所代表的样本， 计算其总体标准差的估计值 。
DSTDEV( 数据库; "列头"; 条件)
DSTDEV( A1: C5; "Salary"; A9: A11)
对数据库里由一组条件指定的某一列内所有数值所代表的整个总体， 计算该总体的标准差 。
DSTDEVP( 数据库; "列头"; 条件)
DSTDEVP( A1: C5; "Salary"; A9: A11)
对数据库里由一组条件指定的某一列内所有数值所代表的样本， 计算其总体方差的估计值 。
DVAR( 数据库; "列头"; 条件)
DVAR( A1: C5; "Salary"; A9: A11)
对数据库里由一组条件指定的某一列内所有数值所代表的整个总体， 计算该总体的方差 。
DVARP( 数据库; "列头"; 条件)
DVARP( A1: C5; "Salary"; A9: A11)
包含数据透视表的范围
您想要进行处理的数据的字段名
从数据透视表中获取摘要数据 。
GETPIVOTDATA( 数据库; "Sales")
日期和时间
方法( 可选的)
WEEKDAY () 函数返回给定日期的星期代号。 如果方式为 1 (默认) ， WEEKDAY () 返回 1 表示星期日、 2 表示星期一 、 …… ； 如果方式为 2， 星期一是 1、 星期二是 2 、 …… ； 如果方式是 3， WEEKDAY () 返回 0 表示星期一、 1 表示星期二 、 …… 。
WEEKDAY( 日期; 方式)
WEEKDAY ("2002- 02- 22"; 2) 返回 5
日期1
日期2
方式
DAYS360 () 函数按照一年总共360天、 每月都是30天的日历返回日期1和日期2之间间隔的天数。 如果方式为 false( 默认) ， 将使用美国方式， 否则使用欧洲方式计算 。
DAYS360( 日期1; 日期2; 方式)
DAYS360 ("2/ 22/ 2002"; "4/ 21/ 2002"; FALSE) 返回 59
TIMEVALUE () 函数返回一个介于0和1之间的数， 表示一天之内的时间 。
TIMEVALUE( 时间)
TIMEVALUE ("10: 05: 02") 返回 0. 42
DATEVALUE 函数返回一个代表当天的数值， 即自 1899年12月31日起经过的天数 。
DATEVALUE( 日期)
DATEVALUE ("2/ 22/ 2002") 返回 37309
月
EDATE 函数返回给定日期一个或多个月之前或之后的日期 。
EDATE( 日期; 月份数)
EDATE ("2/ 22/ 2002"; 3) 返回 "5/ 22/ 2002"
EDATE ("3/ 31/ 2002"; - 1) 返回 "2/ 28/ 2002"
EOMONTH 函数返回给定日期和距离该日期月份数的日期月份的最后一天 。
EOMONTH( 日期; 月份数)
EOMONTH ("2/ 22/ 2002"; 3) 返回 "5/ 31/ 2002"
EOMONTH ("3/ 12/ 2002"; - 1) 返回 "2/ 28/ 2002"
EOMONTH ("3/ 12/ 2002"; 0) 返回 "3/ 31/ 2002"
YEAR 函数返回给定日期的年份。 如果没有指定参数， 则返回当前年份 。
YEAR( 日期)
YEAR ("2/ 22/ 2002") 返回 2002
YEAR( 2323. 1285) 返回 1906
MONTH 函数返回给定日期的月份。 如果没有指定参数， 则返回当前月份 。
MONTH( 日期)
MONTH ("2/ 22/ 2002") 返回 2
MONTH( 2323. 1285) 返回 5
DAY 函数返回给定日期里的日。 如果没有指定参数， 则返回当前日 。
DAY( 日期)
DAY ("2/ 22/ 2002") 返回 22
DAY( 2323. 1285) 返回 11
HOUR 函数返回给定时间里的小时。 如果没有给定参数， 则返回当前时间的小时 。
HOUR( 时间)
HOUR ("22: 10: 12") 返回 22
HOUR( 0. 1285) 返回 3
MINUTE 函数返回时间里的分钟。 如果没有给定参数， 则返回当前时间的分钟 。
MINUTE( 时间)
MINUTE ("22: 10: 12") 返回 10
MINUTE( 0. 1234) 返回 57
SECOND 函数返回给定时间里的秒。 如果没有给定参数， 则返回当前时间的秒 。
SECOND( 时间)
SECOND ("22: 10: 12") 返回 12
SECOND( 0. 1234) 返回 42
第一个( 较早的) 日期值
第二个日期值
计算方式
WEEKS () 函数返回两个日期之间相差的星期数。 第三个参数指定计算方式： 如果方式为 0， WEEKS () 返回这两个日期间隔的最大可能星期数； 如果方式为 1， WEEKS () 只返回这两个日期间隔的整星期数 ；
WEEKS( 日期2; 日期1; 方式)
WEEKS ("2002- 02- 18"; "2002- 02- 26"; 0) 返回 1， 因为两个日期相差1 星期零 1 天 。
WEEKS ("2002- 19- 02"; "2002- 19- 02"; 1) 返回 0， 因为从每星期的第一天( 根据您当地的设置， 可能是星期一或星期日) 算起， 两个日期间隔中没有一个完整的星期 。
MONTHS () 函数返回两个日期之间相差的月数。 第三个参数指定计算方式： 如果方式为 0， MONTHS () 返回这两个日期间隔的最大可能月数； 如果方式为 1， MONTHS () 只返回这两个日期间隔的整月数 ；
MONTHS( 日期2; 日期1; 方式)
MONTHS ("2002- 01- 18"; "2002- 02- 26"; 0) 返回 1， 因为两个日期相差1 个月零 8 天 。
MONTHS ("2002- 01- 19"; "2002- 02- 26"; 1) 返回 0， 因为从每个月第一天算起， 两个日期间隔中没有一个完整的月 。
YEARS () 函数返回两个日期之间相差的年数。 第三个参数指定计算方式： 如果方式为 0， YEARS () 返回这两个日期间隔的最大可能年数； 如果方式为 1， YEARS () 只返回这两个日期间隔的、 从 1 月 1 日到 12 月 31 日的整年数 。
YEARS( 日期2; 日期1; 方式)
YEARS ("2001- 02- 19"; "2002- 02- 26"; 0) 返回 1， 因为两个日期间隔1 年零 7 天 。
YEARS ("2002- 02- 19"; "2002- 02- 26"; 1) 返回 0， 因为从每年第一天算起， 两个日期间隔中没有一个完整的年 。
DAYS () 返回两个日期间隔的天数 。
DAYS( 日期2; 日期1)
DAYS ("2002- 02- 22"; "2002- 02- 26") 返回 4
年
月
日
DAYOFYEAR () 函数返回给定日期在一年中的天数( 1... 365) 。
DAYOFYEAR( 年; 月; 日)
DAYOFYEAR( 2000; 12; 1) 返回 336
DAYOFYEAR( 2000; 2; 29) 返回 60
DATE () 函数返回按本地参数格式化的日期 。
DATE( 年; 月; 日)
DATE( 2000; 5; 5) 返回 2000年5月5日 星期五
TIME () 函数返回按本地参数格式化的时间 。
TIME( 小时; 分钟; 秒)
TIME( 10; 2; 2) 返回 10: 02: 02
TIME( 10; 70; 0) 返回 11: 10: 0
TIME( 10; - 40; 0) 返回 9: 20: 0
HOURS () 函数返回在时间表达式中的小时值 。
HOURS( 时间)
HOURS ("10: 5: 2") 返回 10
如果给出的年份是闰年， 函数 ISLEAPYEAR () 返回 True 。
ISLEAPYEAR( 年份)
ISLEAPYEAR( 2000) 返回 True
DAYSINMONTH () 函数返回在给定年份和月份中的天数 。
DAYSINMONTH( 年; 月)
DAYSINMONTH( 2000; 2) 返回 29
DAYSINYEAR () 函数返回给定年份的天数 。
DAYSINYEAR( 年份)
DAYSINYEAR( 2000) 返回 366
WEEKSINYEAR () 函数返回给定年度中的周数 。
WEEKSINYEAR( 年份)
WEEKSINYEAR( 2000) 返回 52
MINUTES () 函数返回在时间表达式中分钟的值 。
MINUTES( 时间)
MINUTES ("10: 5: 2") 返回 5
SECONDS () 函数返回在时间表达式中秒的值 。
SECONDS( 时间)
SECONDS ("10: 5: 2") 返回 2
一星期中的天数( 1.. 7)
DAYNAME () 函数返回一星期中的某天( 1.. 7) 的名称。 在有些国家一星期的第一天是星期一， 而在其它国家中一星期的第一天是星期日 。
DAYNAME( 一周内天数)
DAYNAME( 1) 返回星期一( 如果一周从星期一算起)
月份数( 1.. 12)
MONTHNAME () 函数返回月份( 1... 12) 的名称 。
MONTHNAME( 月份数)
MONTHNAME( 5) 返回 五月
CURRENTDATE () 函数返回按本地参数格式化的当前日期。 此函数等同于 TODAY 函数 。
CURRENTDATE ()
CURRENTDATE () 返回 "2000年7月15日 星期六"
TODAY () 函数返回当前日期 。
TODAY ()
TODAY () 返回 "2000年4月13日 星期六"
NOW () 函数返回按本地参数格式化的当前日期。 它和 CURRENTDATETIME 是完全等同的， 是为了和其它应用软件兼容而提供的 。
NOW ()
NOW () 返回 "2002年4月13日 星期六 19: 12: 01"
CURRENTDATETIME () 函数返回当前日期和时间 。
CURRENTDATETIME ()
CURRENTDATETIME () 返回“ 2002年4月13日 星期六 19: 12: 01 ”
CURRENTTIME () 函数返回按本地参数格式化的当前时间 。
CURRENTTIME ()
CURRENTTIME () 返回 "19: 12: 01"
EASTERSUNDAY () 函数返回给定的参数年份中的复活节礼拜天的日期 。
EASTERSUNDAY( 年份)
EASTERSUNDAY( 2003) 返回 "2003年4月20日"
ISOWEEKNUM () 函数返回给定日期所在的星期。 注意此函数遵循 ISO8601 标准： 每个星期从星期一开始， 到星期天结束。 每年的第一个星期是包含第一个星期四的星期 。
ISOWEEKNUM( 日期)
若 A1 为" 12月21日 "， 则ISOWEEKNUM( A1) 返回 51 。
EVEN () 函数返回大于或等于参数值的最小偶数 。
WEEKNUM( 日期; 方式)
第一个日期
第二个日期
时间间隔
DATEDIF () 函数返回两个日期间隔的天数 。
DATEDIF( 第一个日期; 第二个日期; 时间间隔)
COUNTIF () 函数返回给定范围内满足给定规则的单元格个数 。
YEARFRAC( 起始日期; 结束日期; basis)
起始日期
工作天数
假日
TODAY () 函数返回当前日期 。
WORKDAY( 起始日期; 天数; 假日)
结束日期
DAYS () 返回两个日期间隔的天数 。
NETWORKDAY( 起始日期; 结束日期; 假日)
NETWORKDAY ("01/ 01/ 2001"; "01/ 08/ 2001") 返回 5 个工作日
NETWORKDAY ("01/ 01/ 2001"; "01/ 08/ 2001"; 2) 返回 3 个工作日
DECSEX () 函数把一个双精度值转换为时间值 。
DATE2UNIX( 日期)
DATE2UNIX ("01/ 01/ 2000") 返回 946, 684, 800
时间
DECSEX () 函数把一个双精度值转换为时间值 。
UNIX2DATE( 0) 返回 1970- 01- 01
工程计算
Bs
长度
BASE () 函数把一个数从十进制转换为 2 到 36 进制的字符串 。
BASE( 数; 数基; 精度)
BASE( 128; 8) 返回 "200"
函数计算的位置
函数的顺序
BESSELI () 函数返回修订的贝塞尔函数 In( x) 。
BESSELI( X; N)
BESSELI( 0. 7; 3) 返回 0. 007367374
BESSELJ () 返回贝塞尔函数 。
BESSELJ( X; N)
BESSELJ( 0. 89; 3) 返回 0. 013974004
BESSELK () 函数返回修订的贝塞尔函数， 它与用纯虚数参数运算时的贝塞尔函数值相等 。
BESSELK( X; N)
BESSELK( 3; 9) 返回 397. 95880
BESSELY () 函数返回贝塞尔函数， 也称为 Weber 函数或 Neumann 函数 。
BESSELY( X; N)
BESSELY( 4; 2) 等于 0. 215903595
从单位
到单位
CONVERT () 函数从一种度量衡系统转换为另外一种度量衡系统 。
支持的质量单位： g( 克) ， sg( 斯勒格) ， lbm( 磅) ， u( 原子量) ， ozm( 盎司) ， stone， ton( 吨) ， grain， pweight( 英钱) ， hweight( 英担) ， bron( 英吨) 。
支持的长度单位： m( 米) ， in( 英寸) ， ft( 英尺) ， mi( 英里) ， Nmi( 海里) ， ang( 埃) ， parsec( 秒差距) ， lightyear( 光年) 。
支持的压强单位： Pa( 帕斯卡) ， atm( 大气压) ， mmHg( 毫米汞柱) ， psi， Torr 。
支持的力单位： N( 牛顿) ， dyn， pound 。
支持的能量单位： J( 焦耳) ， e( 尔格) ， c( 热力学卡) ， cal( IT 卡) ， eV( 电子伏特) ， HPh( 马力小时) ， Wh( 瓦特小时) ， flb( 英尺磅) ， BTU 。
支持的功率单位： W( 瓦特) ， HP( 马力) ， PS( Pferdestaerke) 。
支持的磁单位： T( 特斯拉) ， ga( 高斯) 。
支持的温度单位： C( 摄氏) ， F( 华氏) ， K( 开尔文) 。
支持的容积单位： l( 升) ， tsp( 茶匙) ， tbs( albespoon) ， oz( 盎司) ， cup， pt( 品脱) ， qt( 夸脱) ， gal( 加仑) ， barrel， m3( 立方米) ， mi3( 立方英里) ， Nmi3( 立方海里) ， in3( 立方英寸) ， ft3( 立方英尺) ， yd3( 立方码) 。
支持的面积单位： m2( 平方米) ， mi2( 平方英里) ， Nmi2( 平方海里) ， in2( 立方英寸) ， ft2( 立方英尺) ， yd2( 立方码) ， acre( 英亩) ， ha( 公顷) 。
支持的速度单位： m/ s( 米每秒) ， m/ h( 米每小时) ， mph( 英里每小时) ， kn( 节) 。
对于公制单位， 可使用下列任何前缀： E( 1E+18) ， P( 1E+15) ， T( 1E+12) ， G( 1E+09) ， M( 1E+06) ， k( 1E+03) ， h( 1E+02) ， e( 1E+01) ， d( 1E- 01) ， c( 1E- 02) ， m( 1E- 03) ， u( 1E- 06) ， n( 1E- 09) ， p( 1E- 12) ， f( 1E- 15) ， a( 1E- 18) 。
CONVERT( 数值; 从单位; 到单位)
CONVERT( 32; "C"; "F") 等于 89. 6
CONVERT( 3; "lbm"; "kg") 等于 1. 3608
CONVERT( 7. 9; "cal"; "J") 等于 33. 0757
下限
上限
BESSELK () 函数返回修订的贝塞尔函数， 它与用纯虚数参数运算时的贝塞尔函数值相等 。
ERF( 下限; 上限)
ERF( 0. 4) 等于 0. 42839236
ERFC () 函数返回补出错函数 。
ERFC( 下限; 上限)
ERFC( 0. 4) 等于 0. 57160764
要转换的值
输出的最小长度
DEC2BIN () 函数返回二进制格式的值 。
DEC2BIN( 值)
DEC2BIN( 12) 返回 "1100"
DEC2BIN( 55) 返回 "110111"
DEC2HEX () 函数返回十六进制格式的值 。
DEC2HEX( 值)
DEC2HEX( 12) 返回 "c"
DEC2HEX( 55) 返回 "37"
DEC2OCT () 函数返回八进制格式的值 。
DEC2OCT( 值)
DEC2OCT( 12) 返回 "14"
DEC2OCT( 55) 返回 "67"
OCT2BIN () 函数返回二进制格式的值 。
OCT2BIN( 值)
OCT2BIN ("12") 返回 "1010"
OCT2BIN ("55") 返回 "101101"
OCT2DEC () 函数返回十进制格式的值 。
OCT2DEC( 值)
OCT2DEC ("12") 返回 10
OCT2DEC ("55") 返回 45
OCT2HEX () 函数返回十六进制格式的值 。
OCT2HEX( 值)
OCT2HEX ("12") 返回 "A"
OCT2HEX ("55") 返回 "2D"
BIN2DEC () 函数返回十进制格式的值 。
BIN2DEC( 值)
BIN2DEC ("1010") 返回 10
BIN2DEC ("11111") 返回 31
BIN2OCT () 函数返回八进制格式的值 。
BIN2OCT( 值)
BIN2OCT ("1010") 返回 "12"
BIN2OCT ("11111") 返回 "37"
BIN2HEX () 函数返回十六进制格式的值 。
BIN2HEX( 值)
BIN2HEX ("1010") 返回 "a"
BIN2HEX ("11111") 返回 "1f"
HEX2DEC () 函数返回十进制格式的值 。
HEX2DEC( 值)
HEX2DEC ("a") 返回 10
HEX2DEC ("37") 返回 55
HEX2OCT () 函数返回八进制格式的值 。
HEX2OCT( 值)
HEX2OCT ("a") 返回 "12"
HEX2OCT ("37") 返回 "67"
HEX2BIN () 函数返回二进制格式的值 。
HEX2BIN( 值)
HEX2BIN ("a") 返回 "1010"
HEX2BIN ("37") 返回 "110111"
实部系数
虚部系数
COMPLEX( 实部, 虚部) 函数返回 x+yi 形式的复数 。
COMPLEX( 实部, 虚部)
COMPLEX( 1. 2; 3. 4) 返回 "1. 2+3. 4i"
COMPLEX( 0; - 1) 返回 "- i"
复数
IMAGINARY( 字符串) 函数返回复数的虚部系数 。
IMAGINARY( 字符串)
IMAGINARY ("1. 2+3. 4i") 返回 3. 4
IMAGINARY ("1. 2") 返回 0
IMREAL( 字符串) 函数返回复数的实部系数 。
IMREAL( 字符串)
IMREAL ("1. 2+3. 4i") 返回 1. 2
IMREAL ("1. 2i") 返回 0
IMCOS( 字符串) 函数返回复数的余弦 。
IMCOS( 字符串)
IMCOS ("1+i") 返回 "0. 83373- 0. 988898i"
IMCOS ("12i") 返回 81 377. 4
IMCOS( 字符串) 函数返回复数的余弦 。
IMCOSH( 字符串)
IMCOSH ("1+i") 返回 "0. 83373+0. 988898i"
IMCOSH ("12i") 返回 0. 84358
IMSIN( 字符串) 函数返回复数的正弦 。
IMSIN( 字符串)
IMSIN ("1+i") 返回 "1. 29846+0. 634964i"
IMSIN ("1. 2") 返回 - 0. 536573
IMSIN( 字符串) 函数返回复数的正弦 。
IMSINH( 字符串)
IMSINH ("1+i") 返回 "0. 63496+1. 29846i"
IMSINH ("1. 2") 返回 1. 50946
IMSIN( 字符串) 函数返回复数的正弦 。
IMTAN( 字符串)
IMTAN ("1+i") 返回 "0. 27175+1. 08392i"
IMTAN ("1. 2") 返回 2. 57215
IMSIN( 字符串) 函数返回复数的正弦 。
IMTANH( 字符串)
IMTANH ("1+i") 返回 "1. 08392+0. 27175i"
IMTANH ("1. 2") 返回 0. 83365
IMEXP( 字符串) 函数返回复数的指数 。
IMEXP( 字符串)
IMEXP ("2- i") 返回 "3. 99232- 6. 21768i"
IMEXP ("12i") 返回 "0. 843854- 0. 536573i"
IMLN( 字符串) 函数返回复数的自然对数 。
IMLN( 字符串)
IMLN ("3- i") 返回 "1. 15129- 0. 321751i"
IMLN ("12") 返回 2. 48491
IMLN( 字符串) 函数返回复数的自然对数 。
IMLOG2( 字符串)
IMLOG2 ("3+4i") 返回 "2. 321928+1. 337804i"
IMLN( 字符串) 函数返回复数的自然对数 。
IMLOG10( 字符串)
IMLOG10 ("3+4i") 返回 "0. 69897+0. 402719i"
IMSQRT( 字符串) 函数返回复数的平方根 。
IMSQRT( 字符串)
IMSQRT ("1+i") 返回 "1. 09868+0. 45509i"
IMSQRT ("1. 2i") 返回 "0. 774597+0. 774597i"
幂
IMPOWER( 字符串) 函数返回复数的幂 。
IMPOWER( 字符串)
IMPOWER ("4- i"; 2) 返回 "15- 8i"
IMPOWER ("1. 2"; 2) 返回 1. 44
IMSUM () 函数返回形如 x+yi 的若干复数的和 。
IMSUM( 值; 值;...)
IMSUM( 1. 2; "3. 4+5i") 返回 "4. 6+5i"
IMSUM( 1. 2; "1i") 返回 "1. 2+i"
IMDIV () 函数返回形如 x+yi 的若干复数的商 。
IMDIV( 值; 值;...)
IMDIV( 1. 2; "3. 4+5i") 返回 "0. 111597- 0. 164114i"
IMDIV ("12+i"; "12- i") 返回 "0. 986207+0. 16551i"
IMSUB () 函数返回形如 x+yi 的若干复数的差 。
IMSUB( 值; 值;...)
IMSUB( 1. 2; "3. 4+5i") 返回 "- 2. 2- 5i"
IMSUB( 1. 2; "1i") 返回 "1. 2- i"
IMPRODUCT () 函数返回形如 x+yi 的若干复数的积 。
IMPRODUCT( 值; 值;...)
IMPRODUCT( 1. 2; "3. 4+5i") 返回 "4. 08+6i"
IMPRODUCT( 1. 2; "1i") 返回 "+1. 2i"
IMCONJUGATE( 复数) 函数返回形如 x+yi 的复数的共轭值 。
IMCONJUGATE( 复数)
IMCONJUGATE ("1. 2+5i") 返回 "1. 2- 5i"
IMCONJUGATE ("- i") 返回 "i"
IMCONJUGATE ("12") 返回 "12"
IMARGUMENT( 复数) 函数返回形如 x+yi 的复数的辐角 。
IMARGUMENT( 复数)
IMARGUMENT ("1. 2+5i") 返回 0. 6072
IMARGUMENT ("- i") 返回 - 1. 57079633
IMARGUMENT ("12") 返回 "# Div/ 0"
IMABS( 复数) 函数返回形如 x+yi 的复数的模 。
IMABS( 复数)
IMABS ("1. 2+5i") 返回 5. 1419
IMABS ("- i") 返回 1
IMABS ("12") 返回 12
浮点数
如果x等于y， DELTA () 函数返回1， 否则返回0。 y默认为0 。
DELTA( x; y)
DELTA( 1. 2; 3. 4) 返回 0
DELTA( 3; 3) 返回 1
DELTA( 1; TRUE) 返回 1
如果x大于或等于y， GESTEP () 函数返回1， 否则返回0。 y默认为0 。
GESTEP( x; y)
GESTEP( 1. 2; 3. 4) 返回 0
GESTEP( 3; 3) 返回 1
GESTEP( 0. 4; TRUE) 返回 0
GESTEP( 4; 3) 返回 1
金融
发放日期
首期利息日
结算日
债券的年利率
平均价值
每年支付次数
日期计算基准
ACCRINT 函数返回某周期利息债券的累积利息。 接受的时间频度为： 1 - 每年， 2 - 每半年或 4 - 每季度。 基准是您想使用的时间计算方式： 0： 美式 30/ 360( 默认) ， 1： 实际天数， 2： 实际天数/ 360， 3： 实际天数/ 365 或 4： 欧式 30/ 365 。
ACCRINT( 发放日; 首期利息日; 结算日; 利率; 平均价值; 频度; 基准)
ACCRINT ("2/ 28/ 2001"; "8/ 31/ 2001"; "5/ 1/ 2001"; 0. 1; 1000; 2; 0) 返回 16, 944
ACCRINTM 函数返回某到期支付利息的债券的累积利息。 基准是您想使用的时间计算方式： 0： 美式 30/ 360( 默认) ， 1： 实际天数， 2： 实际天数/ 360， 3： 实际天数/ 365 或 4： 欧式 30/ 365 。
ACCRINTM( 发放日; 结算日; 利率; 平均价值; 基准)
ACCRINTM ("2/ 28/ 2001"; "8/ 31/ 2001"; 0. 1; 100) 返回 5. 0278
成本
下午
F
VARP () 函数根据整个总体计算方差 。
AMORDEGRC (1000; "2006- 02- 01"; "2006- 12- 31"; 10; 0; 0. 1; 1) 返回 228
下午
VARP () 函数根据整个总体计算方差 。
AMORLINC (1000; "2004- 02- 01"; "2004- 12- 31"; 10; 0; 0. 1; 1) 返回 91. 256831
本金
利率
每年期数
年数
给定本金、 额定的利率、 按复利核算的频率和时间， COMPOUND () 函数返回一个投资值。 例如： $5000以12% 的利率每季度核算， 为期5年， 将变成 COMPOUND( 5000; 0. 12; 4; 5) 或$9030. 56 。
COMPOUND( 本金; 利率; 期数; 每年期数)
COMPOUND( 5000; 0. 12; 4; 5) 等于 9030. 56
CONTINUOUS () 函数计算连续复利回报， 只要给出本金、 额定的利率和年数。 例如： $1000 获利 10% ， 1年后成为 CONTINUOUS( 1000;. 1; 1) 或$1105. 17 。
CONTINOUS( 本金; 利率; 年数)
CONTINUOUS( 1000; 0. 1; 1) 等于 1105. 17
毛里求斯
频率
COUPNUM 函数返回在结算日与到期日之间支付的票息数量。 基准是您想使用的时间计算方式： 0： 美式 30/ 360( 默认) ， 1： 实际天数， 2： 实际天数/ 360， 3： 实际天数/ 365 或 4： 欧式 30/ 365 。
COUPNUM( 结算日; 到期日; 频率; 基准)
COUPNUM ("2/ 28/ 2001"; "8/ 31/ 2001"; 2; 0) 返回 1
日期
周期
值
开始
结束
类型
CUMIPMT (0. 06/ 12; 5* 12; 100000; 5; 12; 0) 等于 - 3562, 187023
CUMPRINC (0. 06/ 12; 5* 12; 100000; 5; 12; 0) 等于 - 11904. 054201
剩余价值
寿命
周期
DB () 函数使用固定降序平衡法计算资产在给定期间的折旧。 月份数是可选的， 如果省略它则假定为12 。
DB( 成本; 剩余价值; 寿命; 期间 [; 月份])
DB( 8000; 400; 6; 3) 等于 1158. 40
DB( 8000; 400; 6; 3; 2) 等于 1783. 41
因子
DDB () 函数使用算术降序法计算资产在给定期间的折旧。 因子是可选的， 如果省略则假定为 2。 所有参数都必须大于零 。
DDB( 成本; 剩余价值; 寿命; 期间 [; 因子])
DDB( 75000; 1; 60; 12; 2) 返回 1721. 81
每 $100 票面价值的价格
更少选项
DISC 函数返回某债券的贴现率。 基准是您想使用的时间计算方式： 0： 美式 30/ 360( 默认) ， 1： 实际天数， 2： 实际天数/ 360， 3： 实际天数/ 365 或 4： 欧式 30/ 365 。
DISC( 结算日; 到期日; 平均价值; 清偿; 基准)
DISC ("2/ 28/ 2001"; "8/ 31/ 2001"; 12; 14) 返回 0. 2841
分数美元
DOLLARDE () 函数将分数美元价格转换为十进制小数表示。 分数美元是要转换的数字， 分母是该分数的分母 。
DOLLARDE( 分数美元; 分母)
DOLLARDE( 1. 02; 16) - 表示 1 又 2/ 16 - 返回 1. 125
小数美元
DOLLARFR () 返回一个分数表示的美元价格。 小数美元是要转换的数， 分母是要转换成的分数的分母 。
DOLLARFR( 分数美元; 分母)
DOLLARFR( 1. 125; 16) 返回 1. 02. (1 + 2/ 16)
比率
当前价值( PV)
将来价值( FV)
返回某项投资要达到期望的价值需要的周期数 。
DURATION( 利率; pv; fv)
DURATION( 0. 1; 1000; 2000) 返回 7. 27
Count
瑞尔
基准
COUPNUM( 结算日; 到期日; 频率; 基准)
DURATION_ ADD ("1998- 01- 01"; "2006- 01- 01"; 0. 08; 0. 09; 2; 1) 返回 5. 9937749555
名义利率
周期
EFFECT () 函数根据名义利率计算实际收益率( 年利率或年百分率) 。 例如： 以8% 利息每月核算将获得一个实际收益率effective (. 08; 12) 或8. 3% 。
EFFECT( 名义利率; 核算期数)
EFFECT( 0. 08; 12) 等于 0. 083
EFFECTIVE () 函数根据名义利率计算实际收益率( 年利率或年百分率) 。 此函数与 EFFECT 函数相同 。
EFFECTIVE( 名义利率; 核算期数)
EURO () 函数把欧元转换为欧洲货币联盟给定国家的货币。 货币为以下之一： ATS( 奥地利) 、 BEF( 比利时) 、 DEM( 德国) 、 ESP( 西班牙) 、 FIM( 芬兰) 、 FRF( 法国) 、 GRD( 希腊) 、 IEP( 爱尔兰) 、 ITL( 意大利) 、 LUF( 卢森堡) 、 NLG( 荷兰) 、 或 PTE( 葡萄牙) 。
EURO( 货币)
EURO ("DEM") 等于 1. 95583
来源货币
目标货币
EURO () 函数把欧元转换为欧洲货币联盟给定国家的货币。 货币为以下之一： ATS( 奥地利) 、 BEF( 比利时) 、 DEM( 德国) 、 ESP( 西班牙) 、 FIM( 芬兰) 、 FRF( 法国) 、 GRD( 希腊) 、 IEP( 爱尔兰) 、 ITL( 意大利) 、 LUF( 卢森堡) 、 NLG( 荷兰) 、 或 PTE( 葡萄牙) 。
EUROCONVERT( 1; "EUR"; "DEM") 等于 1. 95583
当前价值
给定收益率和时间长度， FV () 函数返回一个投资的将来价值。 如果您的银行户头中有 $1000， 并获 8% 利息， 两年以后您将有FV( 1000; 0. 08; 2) 或 $1166. 40 。
FV( 当前值; 收益率; 周期)
FV( 1000; 0. 08; 2) 等于 1166. 40
每期付款
FV_ ANNUITY () 函数返回一个支付流的将来值， 只要给出支付额、 利率和期数。 例如： 如果您每年接收$500， 共20年， 并以利率8% 投资， 20年以后的总数将成为FV_ annuity( 500; 0. 08; 20) 或$22, 880. 98。 此函数假定支付是在每个周期的终点完成 。
FV_ ANNUITY( 支付额; 利率; 期数)
FV_ ANNUITY( 1000; 0. 05; 5) 等于 5525. 63
投资
INTRATE 函数返回全额投资债券的利率。 基准是您想使用的时间计算方式： 0： 美式 30/ 360( 默认) ， 1： 实际天数， 2： 实际天数/ 360， 3： 实际天数/ 365 或 4： 欧式 30/ 365 。
INTRATE( 结算日; 到期日; 投资; 清偿; 基准)
INTRATE ("2/ 28/ 2001"; "8/ 31/ 2001"; 1000000; 2000000; 1) 返回 1. 98
周期数
当前价值
将来价值( 可选的)
类型( 可选的)
IPMT 计算投资每期的付款数额 。
利率为分期利率 。
期数是分期付款期数， 1 是首期， NPER 是末期 。
NPER 是付款的总期数 。
PV 是连续付款的当前价值 。
FV( 可选的) 是期望( 将来) 价值， 默认为0 。
类型( 可选的) 定义到期日期。 1 是在每期开始时付款， 0( 默认) 是每期结束前付款 。
示例计算了三年期贷款的最后一年所支付的利息。 利率是百分之十 。
IPMT( 利率; 期数; NPer; PV; FV; 类型)
IPMT( 0. 1; 3; 3; 8000) 等于 - 292. 45
当前价值( PV)
计算投资在某段时期支付的利息 。
期数是分期付款期数， 1 是首期， NPer 是末期 。
NPer 是付款的总期数 。
ISPMT( 利率; 期数; NPer; PV)
ISPMT( 0. 1; 1; 3; 8000000) 等于 - 533333
票面价值
息票利率
每年息票
市场利率
LEVEL_ COUPON () 函数计算等级息票债券值。 例如： 如果利率是10% ， 一个4年期的具有13% 利率半年度息券的$1000债券， 价值LEVEL_ COUPON( 1000; 13; 2; 4;. 1) 或$1096. 95 。
LEVEL_ COUPON( 票面价值; 利率; 年限)
LEVEL_ COUPON( 1000;. 13; 2; 4;. 1) 等于 1096. 95
COUPNUM( 结算日; 到期日; 频率; 基准)
MDURATION ("2004- 02- 01"; "2004- 05- 31"; 0. 08; 0. 09; 2; 0) 返回 0. 316321106
数值( V)
投资
计算投资在某段时期支付的利息 。
MIRR ({100; 200; - 50; 300; - 200}, 5%, 6%) 等于 34. 2823387842%
实际利率
NOMINAL () 函数根据给定时间间隔的实际( 年) 利率计算名义( 月) 利率。 例如： 为了在每月核算的账户上获利8% ， 您需要的回报率为nominal (. 08; 12) 或7. 72% 。
NOMINAL( 实际利率; 期数)
NOMINAL( 0. 08; 12) 等于 0. 0772
支付
将来价值( FV - 可选的)
返回投资的周期数
NPER( 利率; 支付; pv; fv; 类型)
NPER( 0. 1; - 100; 1000) 等于 11
NPER( 0. 06; 0; - 10000; 20000; 0) 返回 11. 906
值 (数组)
DEVSQ () 函数计算偏差的平方和 。
POW( 数值; 数值)
NPV( 100%; 4; 5; 7) = 4. 125
列表
瑞尔
AVEDEV () 函数计算数据集相对其均值的绝对偏差的平均值 。
DISC( 结算日; 到期日; 平均价值; 清偿; 基准)
ODDLPRICE( DATE( 1990; 6; 1); DATE( 1995; 12; 31); DATE( 1990; 1; 1); 3%; 5%; 100; 2) 返回 90. 991042345
图片( P)
AVEDEV () 函数计算数据集相对其均值的绝对偏差的平均值 。
DISC( 结算日; 到期日; 平均价值; 清偿; 基准)
ODDLYIELD( DATE( 1990; 6; 1); DATE( 1995; 12; 31); DATE( 1990; 1; 1); 3%; 91; 100; 2) 返回 4. 997775351
周期数( NPer)
PMT 返回在固定利率下， 投资或贷款的等额分期偿还额 。
PMT( 利率; nper; pv; fv; 类型)
PMT( 0. 1; 4; 10000) 等于 - 3154. 71
PPMT 计算投资每期的付款数额 。
PPMT( 利率; 期数; NPer; PV; FV; 类型)
PPMT( 0. 0875; 1; 36; 5000; 8000; 1) 等于 - 18. 48
发放日期
贴现率
AVEDEV () 函数计算数据集相对其均值的绝对偏差的平均值 。
计算方式
INTRATE( 结算日; 到期日; 投资; 清偿; 基准)
PRICEMAT( DATE( 1990; 6; 1); DATE( 1995; 12; 31); DATE( 1990; 1; 1); 6%; 5%) 返回 103. 819218241
将来价值
给定利率或通货膨胀率， PV () 函数返回一个投资的当前值 - 相当于将来钱数总和的当前值。 例如， 如果您需要$1166. 40购买您的新计算机并且您想在两年后购买， 同时利息为8% ， 您需要投资PV( 1166. 4; 0. 08; 2) 或$1000 。
PV( 将来值; 利率; 周期)
PV( 1166. 4; 0. 08; 2) 等于 1000
PV_ ANNUITY () 函数返回年金或支付流的当前值。 例如 ： “ 百万美圆” 奖券每年支付$50, 000， 共20年, 利率5% ， 实际相当于PV_ annuity( 50000; 0. 05; 20) 或$623 111。 此函数假定支付是在每个周期的终点完成 。
PV_ ANNUITY( 支付额; 利率; 期数)
PV_ ANNUITY( 1000; 0. 05; 5) 等于 4329. 48
RECEIVED 函数返回投资债券在到期日收到的总额。 基准是您想使用的日期计算模型： 0： 美式 30/ 360 (默认) ， 1： 实际天数， 2： 实际天数/ 360， 3： 实际天数/ 365， 或 4： 欧式 30/ 365。 结算日期必须在到期日之前 。
RECEIVED( 结算日; 到期日; 投资; 贴现率; 基准)
RECEIVED ("2/ 28/ 2001"; "8/ 31/ 2001"; 1000; 0. 05; 0) 返回 1, 025. 787
计算投资在某段时期支付的利息 。
RRI( 1; 100; 200) 返回 1
SLN () 函数会决定在某段时期资产的直线折旧。 成本是您为资产付出的数额。 剩余价值是资产在期间结束时的价值。 寿命是资产贬值的期间数。 SLN 将成本均匀分布到资产的生命期上 。
SLN( 成本; 剩余价值; 生命期)
SLN( 10000; 700; 10) 等于 930
SYD () 函数会根据资产的成本、 剩余价值、 预期寿命和特定期间计算年数合计法折旧。 整个方法加速折旧率， 使较早时期的折旧耗费比较晚时期要高。 可折旧成本是实际成本减去剩余价值。 有用的寿命是资产折旧的期间数( 通常为年数) 。
SYD( 成本; 剩余价值; 寿命; 期间数)
SYD( 5000; 200; 5; 2) 等于 1280
TBILLEQ 函数返回与国库券等值的抵押证券。 到期日期必须在结算日期之后 365 天之内 。
TBILLEQ( 结算日; 到期日; 贴现率)
TBILLEQ ("2/ 28/ 2001"; "8/ 31/ 2001"; 0. 1) 返回 0. 1068
TBILLPRICE 函数返回价值 $100 的国库券的价格。 到期日必须在结算日之后 365 天之内。 贴现率必须是正数 。
TBILLPRICE( 结算日; 到期日; 贴现率)
TBILLPRICE ("2/ 28/ 2001"; "8/ 31/ 2001"; 0. 05) 返回 97. 4444
TBILLYIELD 函数返回国库券收益。 到期日必须在结算日之后 365 天之内。 价格必须是正数 。
TBILLYIELD( 结算日; 到期日; 价格)
TBILLYIELD ("2/ 28/ 2001"; "8/ 31/ 2001"; 600) 返回 - 1. 63
VDB( 10000; 600; 10; 0; 0. 875; 1. 5) 返回 1312. 5
日期
DEVSQ () 函数计算偏差的平方和 。
XIRR( B1: B4; C1: C4) Suppose B1: B4 contains - 20000, 4000, 12000, 8000 while C1: C4 contains "=DATE( 2000; 1; 1)", "=DATE( 2000; 6; 1)", "=DATE( 2000; 12; 30)", "=DATE( 2001; 3; 1)" 返回 0. 2115964
DEVSQ () 函数计算偏差的平方和 。
POW( 数值; 数值)
XNPV( 5%; B1: B4; C1: C4) suppose B1: B4 contains - 20000, 4000, 12000, 8000 while C1: C4 contains "=DATE( 2000; 1; 1)", "=DATE( 2000; 6; 1)", "=DATE( 2000; 12; 30)", "=DATE( 2001; 3; 1)" 返回 2907. 83187
DISC( 结算日; 到期日; 平均价值; 清偿; 基准)
YIELDDISC( DATE( 1990; 6; 1); DATE( 1990; 12; 31); 941. 66667; 1000) 返回 0. 106194684
AVEDEV () 函数计算数据集相对其均值的绝对偏差的平均值 。
RECEIVED( 结算日; 到期日; 投资; 贴现率; 基准)
YIELDMAT( DATE( 1990; 6; 1); DATE( 1995; 12; 31); DATE( 1990; 1; 1); 6%; 103. 819218241) 返回 0. 050000000
ZERO_ COUPON () 函数计算零息券( 纯折扣) 债券值。 例如： 如果利率是10% ， 一个20年期的$1000债券价值ZERO_ COUPON( 1000;. 1; 20) 或$148. 64 。
ZERO_ COUPON( 票面价值; 利率; 年限)
ZERO_ COUPON( 1000;. 1; 20) 等于 148. 64
信息
错误
ERRORTYPE( 值)
ERRORTYPE( NA ()) 返回 7
ERRORTYPE( 0) 返回一个错误
N () 函数将值转换为数字。 如果值是一个数字或者所指的是数字， 此函数返回该数。 如果值是 True， 此函数返回 1。 如果值是日期， 此函数返回该日期的序列数字。 任何其它值会使函数返回0 。
N( 值)
N( 3. 14) 返回 3. 14
N ("7") 返回 0 (因为 "7" 是文字)
信息类型
INFO () 函数返回当前操作环境的信息。 参数类型指定了您需要它返回的信息类型。 可以是下列之一 ： “ directory” 返回当前目录的路径 ， “ numfile” 返回活动的文档个数 ， “ release” 返回 KSpread 的版本字符串 ， “ recalc” 返回当前的重新计算模式 ： “ 自动” 或“ 手动 ” ， “ system” 返回操作环境的名称 ， “ osversion” 返回当前操作系统 。
INFO( 类型)
任意值
ISLOGICAL () 函数返回 True， 如果参数是布尔值。 否则它返回 False 。
ISLOGICAL( x)
ISLOGICAL( A1 > A2) 返回 True
ISLOGICAL( 12) 返回 False
ISBLANK () 函数返回 True， 如果参数为空值。 否则它返回 False 。
ISBLANK( x)
ISBLANK( A1) 返回 True， 如果 A1 为空
ISBLANK( A1) 返回 False 如果 A1 含有一个值
ISNUMBER () 函数返回 True， 如果参数是数值。 否则它返回 False。 此函数与 ISNUM 相同 。
ISNUMBER( x)
ISNUMBER( 12) 返回 True
ISNUMBER( hello) 返回 False
ISNUM () 函数返回 True， 如果参数是数值。 否则它返回 False。 此函数与 ISNUMBER 相同 。
ISNUM( x)
ISNUM( 12) 返回 True
ISNUM( hello) 返回 False
ISTIME () 函数返回 True， 如果参数是时间值。 否则它返回 False 。
ISTIME( x)
ISTIME ("12: 05") 返回 True
ISTIME ("hello") 返回 False
ISDATE () 函数返回 True， 如果参数是日期值。 否则它返回 False 。
ISDATE( x)
ISDATE ("2000- 2- 2") 返回 True
ISDATE ("hello") 返回 False
ISREF () 函数返回 True， 如果参数所指的是一个引用。 否则它返回 False
ISREF( x)
ISREF( A12) 返回 True
ISREF ("hello") 返回 false
ISTEXT () 函数返回 True， 如果参数是字符串 。 否则它返回 False
ISTEXT( x)
ISTEXT( 12) 返回 False
ISTEXT ("hello") 返回 True
ISNONTEXT () 函数返回 True， 如果参数不是一个字符串。 否则它返回 False。 此函数与 ISNOTTEXT 相同 。
ISNONTEXT( x)
ISNOTTEXT( 12) 返回 True
ISNOTTEXT ("hello") 返回 False
ISNOTTEXT () 函数返回 True， 如果参数不是一个字符串。 否则它返回 False。 此函数与 ISNONTEXT 相同 。
ISNOTTEXT( x)
ISNOTTEXT( 12) 返回 True
ISNOTTEXT ("hello") 返回 False
ISODD () 函数返回 True， 如果数字是奇数。 否则它返回 False 。
ISODD( x)
ISODD( 12) 返回 False
ISODD (- 7) 返回 True
ISEVEN () 函数返回 True， 如果数字是偶数。 否则返回 False 。
ISEVEN( x)
ISEVEN( 12) 返回 True
ISEVEN (- 7) 返回 False
ISERR () 函数返回 True， 如果其参数是不同于 N/ A 的错误。 否则它返回 False。 如果您想要同时包括 N/ A 错误， 请使用 ISERROR () 。
ISERR( x)
ISERROR () 函数返回 True， 如果其参数是任何类型的错误。 否则它返回 False 。
ISERROR( x)
ISNA () 函数返回 True， 如果其参数是 N/ A 错误。 否则它返回 False 。
ISNA( x)
FALSE () 函数返回布尔值 False 。
NA ()
如果值是一个数字， TYPE () 函数返回 1； 如果是文本， 返回 2； 如果是逻辑值， 返回 4； 如果是错误值， 返回 16； 如果是数组， 返回 64。 如果该值所指的单元格含有一个公式， 您将得到该公式的返回类型 。
TYPE( x)
TYPE( A1) 返回 2， 如果 A1 含有 "Text"
TYPE (- 7) 返回 1
TYPE( A2) 返回 1， 如果 A2 含有 "=CURRENTDATE ()"
返回当前文件名。 如果当前文档没有保存过， 返回一个空字符串 。
FILENAME ()
逻辑
FALSE () 函数返回布尔值 False 。
FALSE ()
FALSE () 返回 False
TRUE () 函数返回布尔值 True 。
TRUE ()
TRUE () 返回 True
布尔值
AND () 函数返回 True， 如果所有的值都是真。 否则它返回 False 。
AND( 值; 值;...)
AND( true; true; true) 返回 True
AND( true; false) 返回 False
OR () 函数返回 True， 如果至少一个值是真。 否则它返回 False 。
OR( 值; 值;...)
OR( false; false; false) 返回 False
OR( true; false) 返回 True
NAND () 函数返回 True， 如果至少一个值不是真。 否则它返回 False 。
NAND( 值; 值;...)
NAND( true; false; false) 返回 True
NAND( true; true) 返回 False
NOR () 函数返回 True， 如果所有作为参数值都是布尔类型并且值均为假。 否则它返回假 。
NOR( 值; 值;...)
NOR( true; false; false) 返回 False
NOR( false; false) 返回 True
XOR () 函数返回 True， 如果为真的数值有奇数个。 否则它返回 False 。
XOR( 值; 值;...)
XOR( false; false; false) 返回 False
XOR( true; false) 返回 True
布尔值
NOT () 函数返回 True， 如果值是假。 如果值是真则返回 False 。
NOT( 布尔值)
NOT( false) 返回 True
NOT( true) 返回 False
条件
如果真
如果假
IF () 函数是条件函数。 如果条件是真此函数返回第二参数。 否则它返回第三参数 。
IF( 条件; 如果真; 如果假)
A1=4; A2=6; IF( A1 > A2; 5; 3) 返回 3
数学
函数
SUBTOTAL () 函数返回给定参数序列的分类汇总值， 它忽略序列中的其它小计结果。 函数可用下列数字代表： 1 - Average， 2 - Count， 3 - CountA， 4 - Max， 5 - Min， 6 - Product， 7 - StDev， 8 - StDevP， 9 - Sum， 10 - Var， 11 - VarP 。
SUBTOTAL( 函数; 值)
如果 A1: A5 含有 7, 24, 23, 56 和 9 ：
SUBTOTAL( 1; A1: A5) 返回 23. 8
SUBTOTAL( 4; A1: A5) 返回 56
SUBTOTAL( 9; A1: A5) 返回 119
SUBTOTAL( 11; A1: A5) 返回 307. 76
SIN () 函数返回x的正弦值， x以弧度值给出 。
SERIESSUM( 2; 0; 2; {1; 2}) 返回 9
LCM () 函数返回两个或多个浮点数的最小公倍数 。
LCM( 数值; 数值)
LCM( 6; 4) 返回 12
LCM( 1. 5; 2. 25) 返回 4. 5
LCM( 2; 3; 4) 返回 12
第三个数
GCD () 函数返回两个或多个整数值的最大公约数 。
GCD( 数值; 数值)
GCD( 6; 4) 返回 2
GCD( 10; 20) 返回 10
GCD( 20; 15; 10) 返回 5
EPS () 函数返回机器的 epsilon 值： 它是 1 和下一个比它大点数之间的差值。 由于计算机使用有限位数的数字， 舍入误差在所有计算中都是不可避免的( 尽管通常不太严重) 。
EPS ()
在大多数系统里， 它返回 2^- 52=2. 2204460492503131e- 16
0. 5* EPS () 返回“ 基本舍入单位 ” ： 这个值很有趣， 因为( 由于舍入误差) 它是满足条件 (1+x) - 1=0 的最大数值 。
EPS () 如此之小， 以致 KSpread 只能将 1+eps () 显示为 1
在 0 和 EPS () 之间任取一个数 x， 通过 (1+x) - 1 的结果能看出， 1+x 中 x 舍入到 0 或者 EPS () 。
POW( x, y) 函数返回x的y次幂的值 。
POW( 数值; 数值)
POWER( 1. 2; 3. 4) 等于 1. 8572
POWER( 2; 3) 等于 8
POW( x; y) 函数返回x的y次幂的值。 此函数与 POWER 相同 。
POW( 数值; 数值)
POW( 1. 2; 3. 4) 等于 1. 8572
POW( 2; 3) 等于 8
EVEN () 函数返回大于或等于参数值的最小偶数 。
EVEN( 数值)
EVEN( 1. 2) 返回 2
EVEN( 2) 返回 2
精度
TRUNC () 函数将数值截断到指定精度。 如果忽略精度则默认为 0 。
TRUNC( 数值; 精度)
TRUNC( 1. 2) 返回 1
TRUNC( 213. 232; 2) 返回 213. 23
ODD () 函数返回大于等于参数值的最小奇数 。
ODD( 数值)
ODD( 1. 2) 返回 3
ODD( 2) 返回 3
ODD (- 2) 返回 - 3
GAMMADIST () 函数返回Γ分布 。
GAMMA( 值)
GAMMA( 1) 返回 1
MOD () 函数返回相除以后的余数。 如果第二个参数是空的函数返回# DIV/ 0 。
MOD( 数值; 数值)
MOD( 12; 5) 返回 2
MOD( 5; 5) 返回 0
如果数值是负的此函数返回 - 1, 如果数值是空的返回 0， 如果数值是正的返回 1 。
SIGN( 数值)
SIGN( 5) 等于 1
SIGN( 0) 等于 0
SIGN (- 5) 等于 - 1
此函数对每个数值乘以- 1 。
INV( 数值)
INV (- 5) 等于 5
INV( 5) 等于 - 5
INV( 0) 等于 0
这个函数返回所给定的参数中整数或浮点数的个数。 您可以对一段范围计数： COUNT( A1: B5) ， 或者使用数值序列的， 比如 COUNT( 12; 5; 12. 5) 。
COUNT( 值; 值; 值;...)
COUNT (- 5; "KSpread"; 2) 返回 2
COUNT( 5) 返回 1
这个函数返回所给定的参数中所有非空参数的个数。 您可以对一段范围计数： COUNTA( A1: B5) ， 或者使用数值序列的， 比如 COUNTA( 12; 5; 12. 5) 。
COUNTA( 值; 值; 值;...)
COUNTA (- 5; "KSpread"; 2) 返回 3
COUNTA( 5) 返回 1
单元格范围
此函数返回某范围内所有空单元格的个数 。
COUNTBLANK( 范围)
COUNTBLANK( A1: B5)
范围
规则
COUNTIF () 函数返回给定范围内满足给定规则的单元格个数 。
COUNTIF( 范围; 规则)
COUNTIF( A2: A3; "14") 返回 1， 如果 A1 是 - 4 而且 A2 是 14
一个浮点数值
FACT () 函数计算参数的阶乘。 数学表达式是 (值)! 。
FACT( 整数值)
FACT( 10) 返回 3628800
FACT( 0) 返回 1
FACTDOUBLE () 函数计算一个整数的双阶乘， 即： x!! 。
FACTDOUBLE( 数值)
FACTDOUBLE( 6) 返回 48
FACTDOUBLE( 7) 返回 105
SUM () 函数计算所有给定参数的和。 您可以计算一个范围， 如 SUM( A1: B5) ， 或一个数值序列的和， 如 SUM( 12; 5; 12. 5) 。
SUM( 数值; 数值;...)
SUM( 12; 5; 7) 等于 24
SUM( 12. 5; 2) 等于 14. 5
SUMA () 函数计算所有给定参数的和。 您可以计算一个范围， 如 SUMA( A1: B5) ， 或一个数值序列的和， 如SUMA( 12; 5; 12. 5) 。 如果某个参数含有文本或者布尔值 FALSE， 它会被算作 0， 如果某个参数值为 TRUE， 它会被算作 1 。
SUMA( 12; 5; 7) 等于 24
SUMA( 12. 5; 2; TRUE) 等于 15. 5
检查范围
求和范围
SUMIF () 函数计算参数给定参数中符合条件的所有值的总和。 求和范围是可选的， 如果不提供的话， 将会对检查范围中的值求和。 检查范围的长度应该等于或小于求和范围的长度 。
SUMIF( 检查范围; 条件; 求和范围)
SUMIF( A1: A4; "> 1") 将对范围 A1: A4 中所有大于1的值求和
SUMIF( A1: A4; "=0"; B1: B4) 将对 B1: B4 中的全部值进行求和， 如果 A1: A4 中相应单元格的值等于0
PRODUCT () 函数计算所有给定参数的乘积。 您可以计算一个范围， 如 PRODUCT( A1: B5) ， 或一个数值序列的乘积， 如 PRODUCT( 12; 5; 12. 5) 。 如果参数中没有找到任何数值则返回 0 。
PRODUCT( 值; 值;...)
PRODUCT( 3; 5; 7) 等于 105
PRODUCT( 12. 5; 2) 等于 25
KPRODUCT () 函数计算所有给定参数的乘积。 您可以计算一个范围， 如 KPRODUCT( A1: B5) ， 或一个数值序列的乘积， 如 KPRODUCT( 12; 5; 12. 5) 。 如果参数中没有找到任何数值则返回 1 。
KPRODUCT( 值; 值;...)
KPRODUCT( 3; 5; 7) 等于 105
KPRODUCT( 12. 5; 2) 等于 25
G_ PRODUCT( 值; 值;...)
DIV () 函数将依次用第二个及以后的参数去除第一个值 。
DIV( 值; 值;...)
DIV( 20; 2; 2) 返回 5
DIV( 25; 2. 5) 返回 10
SUMSQ () 函数计算所有给定参数的平方和。 您可以计算一个范围， 如 SUMSQ( A1: B5) ， 或一个数值序列的平方和， 如 SUMSQ( 12; 5; 12. 5) 。
SUMSQ( 值; 值;...)
SUMSQ( 12; 5; 7) 等于 218
SUMSQ( 12. 5; 2) 等于 173
MAX () 函数返回给定参数中的最大值。 字符串和逻辑值将被忽略 。
MAX( 值; 值;...)
MAX( 12; 5; 7) 返回 12
MAX( 12. 5; 2) 返回 12. 5
MAX( 0. 5; 0. 4; TRUE; 0. 2) 返回 0. 5
MAXA () 函数返回给定参数中的最大值， 且不忽略布尔值。 TRUE 算作 1， FALSE算作 0。 字符串值将被忽略 。
MAXA( 值; 值;...)
MAXA( 12; 5; 7) 返回 12
MAXA( 12. 5; 2) 返回 12. 5
MAXA( 0. 5; 0. 4; TRUE; 0. 2) 返回 1
MIN () 函数返回给定参数中的最小值。 字符串和逻辑值将被忽略 。
MIN( 值; 值;...)
MIN( 12; 5; 7) 返回 5
MIN( 12. 5; 2) 返回 2
MIN( 0. 4; 2; FALSE; 0. 7) 返回 0. 4
MINA () 函数返回给定参数中的最小值， 且不忽略布尔值： TRUE 算作 1， FALSE 算作 0。 字符串值将被忽略 。
MINA( 值; 值;...)
MINA( 12; 5; 7) 返回 5
MINA( 12. 5; 2) 返回 2
MINA( 0. 4; 2; FALSE; 0. 7) 返回 0
MULTIPLY () 函数把在参数中给出的所有数值相乘。 您可以把一个范围， 如 MULTIPLY( A1: B5) ， 或一个数值序列， 如 MULTIPLY( 12; 5; 12. 5) 给出的值相乘。 此函数与 PRODUCT 相同 。
MULTIPLY( 值; 值;...)
MULTIPLY( 12; 5; 7) 等于 420
MULTIPLY( 12. 5; 2) 等于 25
MULTINOMIAL () 函数返回参数中各数值的多项排列值。 它使用下面的公式计算 MULTINOMIAL( a, b, c) ：
(a+b+c)! / a! b! c!
MULTINOMIAL( 值; 值;...)
MULTINOMIAL( 3; 4; 5) 等于 27720
SQRT () 函数返回x的非负平方根。 如果x是负的， 则返回“ NaN ” 。
SQRT( x)
SQRT( 9) 等于 3
SQRT (- 9) 是一个错误
SQRT () 函数返回x的非负平方根。 如果x是负的， 则返回“ NaN ” 。
SQRTPI( x)
SQRTPI( 2) 等于 2. 506628
LN () 函数返回x的自然对数值 。
LN( x)
LN( 0. 8) 等于 - 0. 22314355
LN( 0) 等于负无穷 - inf
LOGn () 函数返回以n为底数的x的对数 。
LOGn( 数值; 底数)
LOGn( 12; 10) 等于 1. 07918125
LOGn( 12; 2) 等于 3. 5849625
ROOTN () 函数返回x的非负n次幂根 。
ROOTN( x; n)
ROOTN( 9; 2) 等于 3
CUR () 函数返回x的非负立方根 。
CUR( x)
CUR( 27) 等于 3
一个浮点数值( 大于0)
LOG () 函数返回以10为底数的x的对数值 。
LOG( x)
LOG( 0. 8) 等于 - 0. 09691001
LOG( 0) 是一个错误 。
一个正浮点数值
LOG10 () 函数返回以10为底数的x的对数值 。
LOG10( x)
LOG10( 10) 等于 1 。
LOG10( 0) 是一个错误 。
LOG2 () 函数返回以2为底数的x的对数值 。
LOG2( x)
LOG2( 0. 8) 等于 - 0. 32192809
LOG2( 0) 等于负无穷 - inf 。
EXP () 函数返回e( 自然对数的底数) 的x次幂值 。
EXP( x)
EXP( 9) 等于 8 103. 08392758
EXP (- 9) 等于 0. 00012341
CEIL () 函数返回比x大的最小整数， 以双精度数返回该值 。
CEIL( x)
CEIL( 12. 5) 等于 13
CEIL (- 12. 5) 等于 - 12
显著因子( 可选的)
CEILING( x)
CEILING( 12. 5) 等于 13
CEILING( 6. 43; 4) 等于 8
CEILING (- 6. 43; - 4) 等于 - 8
方法( 可选的)
CEILING () 函数返回比x大且是显著因子的倍数的最小整数， 以双精度数返回该值 。
FLOOR( x)
FLOOR( 12. 5) 等于 12
FLOOR (- 12. 5) 等于 - 13
FLOOR( 5; 2) 等于 4
FLOOR( 5; 2. 2) 等于 4. 4
ABS () 函数返回浮点数x的绝对值 。
ABS( x)
ABS( 12. 5) 等于 12. 5
ABS (- 12. 5) 等于 12. 5
INT () 函数返回数值的整数部分 。
INT( x)
INT( 12. 55) 等于 12
INT( 15) 等于 15
RAND () 函数返回介于0和1之间的伪随机数 。
RAND ()
例如： RAND () 可能返回 0. 78309922...
一个浮点数值( 大于0)
RANDEXP () 函数返回指数分布的伪随机数 。
RANDEXP( x)
RANDEXP( 0. 88)
RANDPOISSON () 函数返回泊松( Poisson) 分布的伪随机数 。
RANDPOISSON( x)
RANDPOISSON( 4)
一个浮点数值( 介于0和1之间)
试验次数( 大于 0)
RANDBINOM () 函数返回二项分布的伪随机数 。
RANDBINOM( x)
RANDBINOM( 4)
失败次数( 大于0)
RANDNEGBINOM () 返回负二项分布的伪随机数 。
RANDNEGBINOM( x)
RANDNEGBINOM( 4)
RANDBERNOULLI () 函数返回贝努利( Bernoulli) 分布的伪装随机数 。
RANDBERNOULLI( x)
RANDBERNOULLI( 0. 45)
正态分布的均值
正态分布的离差
RANDNORM () 函数返回正态( 高斯) 分布的伪随机数 。
RANDNORM( mu; sigma)
RANDNORM( 0; 1)
底值
顶值
RANDBETWEEN () 函数返回介于底值和顶值之间的伪随机数。 如果底值 > 顶值则返回错误 。
RANDBETWEEN( 底值; 顶值)
例如： RANDBETWEEN( 12; 78) 可能返回 61. 0811...
倍数
MROUND () 函数返回舍入到指定倍数的值。 该数值和倍数必须有相同的符号 。
MROUND( 数值; 倍数)
MROUND( 1. 252; 0. 5) 等于 1. 5
MROUND (- 1. 252; - 0. 5) 等于 - 1. 5
位数
ROUND( 数值; [位数]) 函数返回四舍五入的值。 位数是您想要舍入到数值的小数位数。 如果位数是零或省略, 数值将四舍五入到的最接近的整数。 如果位数小于零， 该数值相应的整数部分也被四舍五入 。
ROUND( 数值; [位数])
ROUND( 1. 252; 2) 等于 1. 25
ROUND (- 1. 252; 2) 等于 - 1. 25
ROUND( 1. 258; 2) 等于 1. 26
ROUND (- 12. 25; - 1) 等于 - 10
ROUND (- 1. 252; 0) 等于 - 1
ROUNDUP( 数值; [位数]) 函数返回向上舍入的值。 位数是您想要舍入到数值的小数位数。 如果位数是零或省略, 数值将向上舍入到的最接近的整数 。
ROUNDUP( 数值; [位数])
ROUNDUP( 1. 252; 2) 等于 1. 26
ROUNDUP (- 1. 252; 2) 等于 - 1. 25
ROUNDUP (- 1. 252) 等于 - 1
ROUNDDOWN( 数值; [位数]) 函数返回向下舍入的值。 位数是您想要舍入到数值的小数位数。 如果位数是零或省略, 值是向下舍入到的最接近的整数 。
ROUNDDOWN( 数值; [位数])
ROUNDDOWN( 1. 252; 2) 等于 1. 25
ROUNDDOWN (- 1. 252; 2) 等于 - 1. 26
ROUNDDOWN (- 1. 252) 等于 - 2
第N项
FIB () 函数计算菲波那契( Fibonacci) 数列( 1, 1, 2, 3, 5, 8, 13, 21) 的第N项。 该数列从第三项开始， 每项都等于前面紧挨着的两项之和。 FIB( 0) 定义为 0 。
FIB( n)
FIB( 9) 返回 34
FIB( 26) 返回 121393
分子
分母
QUOTIENT 函数返回分子/ 分母的整数部分 。
QUOTIENT( 分子; 分母)
QUOTIENT( 21; 4) 返回 5
MDETERM 返回给定矩阵的行列式。 矩阵必须是 n x n 方阵 。
MDETERM( 矩阵)
MDETERM( A1: C3)
第一个矩阵
第二个矩阵
MMULT 函数将两个矩阵相乘。 第一个矩阵的列数必须与第二个矩阵的行数相同。 结果仍为一个矩阵 。
MMULT( 矩阵1; 矩阵2)
MMULT( A1: C3)
矩阵
计算矩阵转置 。
MINVERSE( 矩阵)
MINVERSE( A1: C3)
相除
相除
TRANSPOSE( 矩阵)
TRANSPOSE( A1: C3)
查阅和引用
行号
列号
绝对编号( 可选的)
A1 样式( 可选的)
工作表名称
ADDRESS 创建单元格地址。 参数中， 行是行的编号， 列是列的编号 。
绝对编号指定引用的类型： 1 或忽略： 绝对， 2 绝对行; 相对列， 3 相对行; 绝对列， 4 相对 。
A1 样式指定返回地址的样式。 如果 A1 设为 TRUE( 默认) 地址以 A1 样式返回， 如果它设为 FALSE 则使用 R1C1 样式 。
工作表名是指定工作表名称的文字 。
ADDRESS( 行; 列; 绝对; 样式; 工作表名)
ADDRESS( 6; 4) 返回 $D$6
ADDRESS( 6; 4; 2) 返回 D$6
ADDRESS( 6; 4; 2; FALSE; "Sheet1") 返回 Sheet1! R6C[ 4]
ADDRESS( 6; 4; 1; FALSE; "Sheet1") 返回 Sheet1! R6C4
ADDRESS( 6; 4; 4; TRUE; "Sheet1") 返回 Sheet1! D6
引用
返回引用字符串里的区域个数。 一个区域可以是一个或者一组单元格 。
AREAS( 引用)
AREAS( A1) 返回 1
AREAS ((A1; A2: A4)) 返回 2
索引
参数
返回索引指定的参数 。
CHOOSE( 索引; 参数1; 参数2;...)
CHOOSE( 1; "1st"; "2nd") 返回 "1st"
CHOOSE( 2; 3; 2; 4) 返回 2
COLUMN 函数返回给定单元格引用的列号。 如果未指定参数， 则返回当前单元格的列号 。
COLUMN( 引用)
COLUMN( A1) 返回 1
COLUMN( D2) 返回 4
COLUMNS 函数返回给定引用中的列数 。
COLUMNS( 引用)
COLUMNS( A1: C3) 返回 3
COLUMNS( D2) 返回 1
行
列
INDEX( 单元格; 行; 列)
INDEX( 范围; 行; 列)
INDEX( A1: C3; 2; 2) 返回 B2 的内容
INDEX( A1; 2; 2) 当 A1 是数组计算的结果时， 返回其 (2, 2) 元素 。
返回引用字串指定的单元格内容。 第二个参数是可选的 。
INDIRECT( 引用字串, A1样式)
INDIRECT( A1) ， A1 含有 "B1" ， B1 是 1 = > 返回 1
INDIRECT ("A1"), 返回 A1 的内容
ROW 函数返回给定单元格引用的行号。 如果未指定参数， 则返回当前单元格的行号 。
ROW( 引用)
ROW( A1) 返回 1
ROW( D2) 返回 2
ROWS 函数返回给定引用里的行数 。
ROWS( 引用)
ROWS( A1: C3) 返回 3
ROWS( D2) 返回 1
查阅值
查阅向量
结果向量
LOOKUP( 值; 查阅向量; 结果向量)
LOOKUP( 1. 232; A1: A6; B1: B6) 当 A1=1， A2=2 时返回 B1 的值 。
数据来源
方法( 可选的)
公式
删除单元格
替换
方法( 可选的)
绝对编号( 可选的)
统计学
浮点数值
AVEDEV () 函数计算数据集相对其均值的绝对偏差的平均值 。
AVEDEV( 值; 值;...)
AVEDEV( 11. 4; 17. 3; 21. 3; 25. 9; 40. 1) 返回 7. 84
AVEDEV( A1: A5)...
AVERAGE () 函数计算所有给出参数值的平均数。 您可以计算一个范围， 如 AVERAGE( A1: B5) ， 或一个数值序列的平均数， 如 AVERAGE( 12; 5; 12. 5) 。
AVERAGE( 值; 值;...)
AVERAGE( 12; 5; 7) 等于 8
AVERAGE( 12. 5; 2) 等于 7. 25
字符串值
AVERAGEA () 函数计算给定参数的平均值。 数字、 文本和逻辑值都包含在计算中。 如果单元格含有文本或参数值为 False， 则被算作零值( 0) 。 如果参数值为 True ， 则被算作一( 1) 。 注意空单元格不算在内 。
AVERAGEA( 值; 值;...)
AVERAGEA( 11. 4; 17. 3; "sometext"; 25. 9; 40. 1) 等于 18. 94
Alpha 参数
Beta 参数
开始
结束
累积标志
BETADIST () 函数返回β分布累积概率密度函数 。
后两个参数是可选的。 它们给出下界和上界， 如果省略则分别默认为 0. 0 和 1. 0 。
BETADIST( 数; alpha; beta; 开始; 结束)
BETADIST( 0. 2859; 0. 2606; 0. 8105) 等于 0. 675444
BETADIST( 0. 2859; 0. 2606; 0. 8105; 0. 2; 0. 9) 等于 0. 537856
ACOT () 函数返回数值的反余切值 。
后两个参数是可选的。 它们给出下界和上界， 如果省略则分别默认为 0. 0 和 1. 0 。
BETADIST( 数; alpha; beta; 开始; 结束)
BETADIST( BETAINV( 0. 1; 3; 4); 3; 4) 等于 0. 1
BETADIST( BETAINV( 0. 3; 3; 4); 3; 4) 等于 0. 3
自由度
CHIDIST () 返回来自假设确认的λ方指示的概率值 。
CHIDIST 比较随机样本的λ方值和λ方分布理论值， 从这个误差概率来决定假设检验的结果。 随机样本的λ方值是对于所有样本数值计算( 观察值 - 期望值) ^2/ 期望值， 然后求和得到的 。
CHIDIST( 数值; 自由度)
CHIDIST( 13. 27; 5) 返回 0. 021
元素总数
要选择的元素数
COMBIN () 函数计算所有可能组合的数目。 第一参数是元素的总数。 第二参数是要选择的元素数。 两参数应该是正的， 并且第一参数不应小于第二参数。 否则此函数返回错误 。
COMBIN( 元素总数; 选择的元素数)
COMBIN( 12; 5) 返回 792
COMBIN( 5; 5) 返回 1
COMBIN () 函数计算所有可能组合的数目。 第一参数是元素的总数。 第二参数是要选择的元素数。 两参数应该是正的， 并且第一参数不应小于第二参数。 否则此函数返回错误 。
置信区间的置信度
整个总体的标准差
整个总体的大小
CONFIDENCE () 函数返回总体均值的置信区间 。
alpha 参数必须介于( 但不包括) 0 和 1， stdev 必须为正数并且大小必须大于或等于 1 。
CONFIDENCE( alpha; stddev; 大小)
CONFIDENCE( 0. 05; 1. 5; 100) 等于 0. 294059
单元格范围
第二个单元格范围
CORREL () 函数计算两个单元格范围的互相关系数 。
CORREL( 范围1; 范围2)
CORREL( A1: A3; B1: B3)
COVAR () 函数计算两个单元格范围的协方差 。
COVAR( 范围1; 范围2)
COVAR( A1: A3; B1: B3)
DEVSQ () 函数计算偏差的平方和 。
DEVSQ( 值; 值;...)
DEVSQ( A1: A5)
DEVSQ( 21; 33; 54; 23) 返回 684. 75
Lambda 参数
0 = 密度函数, 1 = 分布函数
EXPONDIST () 函数返回指数分布 。
lambda 参数必须是正数 。
累积标志 = 0 时计算密度函数； 累积标志 = 1 时计算分布 。
EXPONDIST( 数值; lambda; 累积标志)
EXPONDIST( 3; 0. 5; 0) 等于 0. 111565
EXPONDIST( 3; 0. 5; 1) 等于 0. 776870
自由度 1
自由度 2
FDIST () 函数返回 f- 分布 。
FDIST( 数值; 自由度_ 1; 自由度_ 2)
FDIST( 0. 8; 8; 12) 等于 0. 61
数字 r1
数字 r2
ROOTN () 函数返回x的非负n次幂根 。
FISHERINV( 数值)
FDIST( FINV( 0. 1; 3; 4); 3; 4) 等于 0. 1
FISHER () 函数返回 x 的费舍尔( Fisher) 变换， 并建立一个接近正态分布的函数 。
FISHER( 数值)
FISHER( 0. 2859) 等于 0. 294096
FISHER( 0. 8105) 等于 1. 128485
FISHERINV () 函数返回 x 的费舍尔( Fisher) 反变换， 并建立一个接近正态分布的函数 。
FISHERINV( 数值)
FISHERINV( 0. 2859) 等于 0. 278357
FISHERINV( 0. 8105) 等于 0. 669866
浮点数或数值范围
浮点数或数值范围
累积标志
GAMMADIST () 函数返回Γ分布 。
如果最后一个参数( 累积标志) 为 0， 则计算概率密度函数； 如果为 1， 则返回分布函数 。
前三个参数必须是正数 。
GAMMADIST( 数; alpha; beta; 累积标志)
GAMMADIST( 0. 758; 0. 1; 0. 35; 1) 等于 0. 995450
GAMMADIST( 0. 758; 0. 1; 0. 35; 0) 等于 0. 017179
ROOTN () 函数返回x的非负n次幂根 。
GAMMADIST( 数; alpha; beta; 累积标志)
GAMMADIST( GAMMAINV( 0. 1; 3; 4); 3; 4) 等于 0. 1
GAMMADIST( GAMMAINV( 0. 3; 3; 4); 3; 4) 等于 0. 3
要对它计算标准正态分布积分的数
GAUSS () 函数返回标准正态分布的积分 。
GAUSS( 数值)
GAUSS( 0. 25) 等于 0. 098706
GEOMEAN () 返回给定参数的几何平均值。 它等于各项乘积的 N 次方根 。
GEOMEAN( 值; 值;...)
GEOMEAN( A1: A5)
GEOMEAN( 21; 33; 54; 23) 返回 30. 45886
HARMEAN () 函数计算 N 个数据点的调合平均值( N除以各数据点倒数的和) 。
HARMEAN( 值; 值;...)
HARMEAN( A1: A5)
HARMEAN( 21; 33; 54; 23) 返回 28. 588
样本成功次数
周期数
成功试验总数
总体大小
HYPGEOMDIST () 函数返回超几何分布 。
HYPGEOMDIST( x; n; M; N)
HYPGEOMDIST( 2; 5; 6; 20) 返回 0. 3522
y 值( 数组)
x 值( 数组)
ASINH () 函数计算x的反双曲正弦值； 即此值的双曲正弦值是x 。
INTERCEPT( y; x)
KURT () 函数计算数据集的峰度系数的无偏估计。 您需要给出至少 4 个数值， 否则将返回错误 。
KURT( 值; 值;...)
KURT( A1: A5)
KURT( 21; 33; 54; 23) 返回 1. 344239
KURTP () 函数计算数据集的总体峰度系数。 您需要给出至少 4 个数值， 否则将返回错误 。
KURTP( 值; 值;...)
KURTP( A1: A5)
KURTP( 21; 33; 54; 23) 返回 - 1. 021
位置( 从最大的开始)
LARGE () 函数返回数据集中第 k 个最大的数值 。
LARGE( 范围; k)
A1: 3, A2: 1, A3: 5 = > LARGE( A1: A3; 2) 返回 3
FDIST () 函数返回 f- 分布 。
FDIST( 数值; 自由度_ 1; 自由度_ 2)
FDIST( 0. 8; 8; 12) 等于 0. 61
概率
标准对数分布的均值
标准对数分布的标准差
LOGINV () 函数返回累计对数正态分布的反函数 。
LOGINV( p; 均值; 标准差)
LOGINV( 0. 1; 0; 1) 等于 0. 2776
要计算的标准对数分布的概率值
LOGNORMDIST () 函数返回累积对数正态分布 。
LOGNORMDIST( 数值; MV; STD)
LOGNORMDIST( 0. 1; 0; 1) 等于 0. 01
浮点数或数值范围
浮点数或数值范围
MEDIAN () 函数计算给定参数的中值。 您可以计算一个范围， 如 MEDIAN( A1: B5) ， 或一个数值序列的中值， 如 MEDIAN( 12; 5; 12. 5) 。 空单元格将被看做零， 文本单元格将被忽略 。
MEDIAN( 值; 值;...)
MEDIAN( 12; 5; 5. 5) 等于 5. 5
MEDIAN( 12; 7; 8; 2) 等于 7. 5
浮点
MODE () 函数返回数据集里出现最频繁的值 。
MODE( 数; 数2;...)
MODE( 范围)
MODE( 12; 14; 12; 15) 返回 12
失败次数
成功试验数
成功概率
NEGBINOMDIST () 函数返回负二项分布 。
NEGBINOMDIST( 失败次数; 成功次数; 成功概率)
NEGBINOMDIST( 2; 5; 0. 55) 返回 0. 152872629
分布的线性中心
分布的标准差
NORMDIST () 函数返回正态累积分布 。
数值就是要计算正态分布的分布值 。
MV 是分布的线性中心 。
STD 是分布的标准差 。
K = 0 时计算密度函数； K = 1 时计算分布 。
NORMDIST( 数值; MV; STD; K)
NORMDIST( 0. 859; 0. 6; 0. 258; 0) 等于 0. 934236
NORMDIST( 0. 859; 0. 6; 0. 258; 1) 等于 0. 842281
正态分布的中间值
正态分布的标准差
NORMINV () 函数返回正态累积分布的反函数。 数值必须介于( 但不包括) 0 和 1， STD 必须为正数 。
NORMINV( 数值; MV; STD)
NORMINV( 0. 9; 63; 5) 等于 69. 41
要计算的标准正态分布的数值
NORMSDIST () 函数返回标准正态分布 。
NORMSDIST( 数值)
NORMSDIST( 1) 等于 0. 84
NORMSINV () 函数返回标准正态累积分布的反函数。 数值必须介于( 但不包括) 0 和 1 。
NORMSINV( 数值)
NORMSINV( 0. 908789) 返回 1. 3333
PEARSON () 函数计算两个单元格范围的相关系数。 此函数与 CORREL 函数相同 。
PEARSON( 范围1; 范围2)
PEARSON( A1: A3; B1: B3)
要排列的元素数
PERMUT () 函数返回排列数目。 第一参数是元素的总数, 第二参数是用于排列的元素数 。
PERMUT( 元素总数; 排列的元素数)
PERMUT( 8; 5) 等于 6720
PERMUT( 1; 1) 等于 1
要对它计算标准正态分布的数
PHI () 函数返回标准正态分布函数的值 。
PHI( 值)
PHI( 0. 25) 等于 0. 386668
Lambda 参数( 中间数值)
POISSON () 函数返回泊松分布 。
lambda 和数值参数必须是正数 。
POISSON( 数值; lambda; 累积标志)
POISSON( 60; 50; 0) 等于 0. 020105
POISSON( 60; 50; 1) 等于 0. 927840
数据( 数组)
顺序
ACOT () 函数返回数值的反余切值 。
RANK (2; {1; 2; 3}) 等于 2
值 (数组)
值 (数组)
SKEW () 函数返回一个分布的偏度系数估计值
SKEW( 数; 数2;...)
SKEW( 范围)
SKEW( 11, 4; 17, 3; 21, 3; 25, 9; 40. 1) 返回 0, 9768
SKEWP () 函数返回分布总体的偏度系数 。
SKEWP( 数; 数2;...)
SKEWP( 范围)
SKEWP( 11, 4; 17, 3; 21, 3; 25, 9; 40. 1) 返回 0, 6552
COVAR () 函数计算两个单元格范围的协方差 。
SLOPE( y; x)
位置( 从最小的开始)
SMALL () 函数返回数据集里的第 k 个最小的数值 。
SMALL( 范围; k)
A1: 3, A2: 1, A3: 5 = > SMALL( A1: A3; 1) 返回 1
要归一化的数
分布的均值
标准差
STANDARDIZE () 函数计算规格化的数值 。
STANDARDIZE( x; 均值, stdev)
STANDARDIZE( 4; 3; 7) 返回 0. 1429
STDEV () 函数返回根据样本估计的标准差。 标准差是用来衡量数值散布在均值周围多广的范围的一个参量 。
STDEV( 值; 值;...)
STDEV( 6; 7; 8) 等于 1
STDEVA () 函数返回根据样本估计的标准差。 标准差是用来衡量数值散布在均值周围多广的范围的一个参量。 如果被引用的单元格含有文本或者布尔值 FALSE， 它被算作 0， 如果该布尔值为 TRUE 则被算作 1 。
STDEVA( 值; 值;...)
STDEVA( 6; 7; A1; 8) 等于 1， 如果 A1 为空 。
STDEVA( 6; 7; A1; 8) 等于 3. 109， 如果 A1 为 TRUE
STDEVP () 函数根据整个总体返回标准差 。
STDEVP( 值; 值;...)
STDEVP( 6; 7; 8) 等于 0. 816497...
STDEVPA () 函数返回根据整个总体的标准差。 如果被引用的单元格含有文本或者布尔值 False， 它被算作 0， 如果该布尔值为真则被算作 1 。
STDEVPA( 值; 值;...)
STDEVPA( 6; 7; A1; 8) 等于 0. 816497... ， 如果 A1 为空
STDEVPA( 6; 7; A1; 8) 等于 2. 69... ， 如果 A1 为 TRUE
STDEVPA( 6; 7; A1; 8) 等于 3. 11... ， 如果 A1为 FALSE
FACT () 函数计算参数的阶乘。 数学表达式是 (值)! 。
值 (数组)
SUMPRODUCT () 函数 (SUM( X* Y)) 返回这些值乘积的累加和。 两个数组中的值的数量应该相等。 否则此函数返回错误 。
SUMPRODUCT( 数组1; 数组2)
SUMPRODUCT( A1: A2; B1: B2) 若 A1=2 A2=5 B1=3 B2=5 则返回 31
SUMX2PY2 () 函数 (SUM( X^2+Y^2)) 返回这些值平方的累加和。 在两个数组中值的数量应该相等。 否则此函数返回错误 。
SUMX2PY2( 数组1; 数组2)
SUMX2PY2( A1: A2; B1: B2) 若 A1=2 A2=5 B1=3 B2=5 则返回 63
SUMX2MY2 () 函数 (SUM( X^2- Y^2)) 返回这些值平方的差的累加和。 在两个数组中值的数量应该相等。 否则此函数返回错误 。
SUMX2MY2( 数组1; 数组2)
SUMX2MY2( A1: A2; B1: B2) 若 A1=2 A2=5 B1=3 B2=5 则返回 - 5
t- 分布的自由度
模式( 1 或 2)
TDIST () 函数返回 t- 分布 。
模式 = 1 时返回单端检验， 模式 = 2 时返回双端检验 。
TDIST( 数值; 自由度; 模式)
TDIST( 12; 5; 1) 返回 0. 000035
下
下
ASINH () 函数计算x的反双曲正弦值； 即此值的双曲正弦值是x 。
数据集
分数
DEVSQ () 函数计算偏差的平方和 。
x (数组)
y (数组)
模式
DEVSQ () 函数计算偏差的平方和 。
TTEST( x; y; 类型; 模式)
VAR () 函数根据样本计算方差的估计值 。
VAR( 值; 值;...)
VAR( 12; 5; 7) 等于 13
VAR( 15; 80; 3) 等于 1716. 333...
VAR( 6; 7; 8) 等于 1
VARA () 函数根据样本计算方差 。
VARA( 值; 值;...)
VARA( 12; 5; 7) 等于 13
VARA( 15; 80; 3) 等于 1716. 333...
VARA( 6; 7; 8) 等于 1
VARIANCE () 函数根据样本计算方差的估计值。 此函数与 VAR 函数相同 。
VARIANCE( 值; 值;...)
VARIANCE( 12; 5; 7) 等于 13
VARIANCE( 15; 80; 3) 等于 1716. 333...
VARIANCE( 6; 7; 8) 等于 1
VARP () 函数根据整个总体计算方差 。
VARP( 值; 值;...)
VARP( 12; 5; 7) 等于 8. 666...
VARP( 15; 80; 3) 等于 1144. 22...
VARP( 6; 7; 8) 等于 0. 6666667...
VARPA () 函数根据整个总体计算方差。 文本或值为 False 的布尔值被算作 0， 值为 True 的布尔参数则被算作 1 。
VARPA( 值; 值;...)
VARPA( 12; 5; 7) 等于 8. 666...
VARPA( 15; 80; 3) 等于 1144. 22...
VARPA( 6; 7; 8) 等于 0. 6666667...
WEIBULL () 函数返回 Weibull 分布 。
alpha 和 beta 参数必须是正数， 数值( 第一个参数) 必须非负 。
WEIBULL( 数值; alpha; beta; 累积标志)
WEIBULL( 2; 1; 1; 0) 等于 0. 135335
WEIBULL( 2; 1; 1; 1) 等于 0. 864665
均值
标准差
VARP () 函数根据整个总体计算方差 。
标准差
BINO () 函数返回二项分布 。
第一参数是试验数， 第二参数是成功数， 第三参数是成功概率。 试验数应该大于成功数并且概率应该小于或等于 1 。
BINO( 试验次数; 成功次数; 成功概率)
BINO( 12; 9; 0. 8) 返回 0. 236223201
SUM2XMY () 函数 (SUM ((X- Y) ^2)) 返回这些值差的平方的累加和。 在两个数组中值的数量应该相等。 否则此函数返回错误 。
SUMXMY2( 数组1; 数组2)
SUM2XMY( A1: A2; B1: B2) 若A1=2 A2=5 B1=3 B2=5 则返回 1
失败概率
INVBINO () 函数返回负的二项式分布。 第一参数是试验次数， 第二参数是失败次数， 第三参数是失败概率。 试验数应该大于失败数， 并且概率应该小于或等于 1 。
INVBINO( 试验数; 失败数; 失败概率)
INVBINO( 12; 3; 0. 2) 返回 0. 236223201
GAMMALN () 函数返回 gamma 函数 G( x) 的自然对数。 数值参数必须为正数 。
GAMMALN( 数值)
GAMMALN( 2) 返回 0
小数位数
DOLLAR () 用货币格式将数字转换为文本串， 小数点四舍五入到指定的位数。 虽然名字是 DOLLAR， 此函数会按照当前的地区设置进行转换 。
DOLLAR( 数; 小数位数)
DOLLAR( 1403. 77) 返回 "$1, 403. 77"
DOLLAR (- 0. 123; 4) 返回 "$- 0. 1230"
无逗号
FIXED () 函数将给定的数四舍五入到指定的位数， 按十进制数格式转换为文本串。 如果位数是负数， 该数被保留到小数点左边指定位数。 如果您忽略位数， 它默认为 2。 如果可选的参数“ 无逗号” 为真， 则每隔三位数不会加逗号分隔 。
FIXED( 数; 小数位数; 无逗号)
FIXED( 1234. 567; 1) 返回 "1, 234. 6"
FIXED( 1234. 567; 1; FALSE) 返回 "1234. 6"
FIXED( 44. 332) 返回 "44. 33"
您要替换成的文字
您要替换掉的文字部分
替换后的新的文字
要替换哪次出现
SUBSTITUTE () 函数在文本串中用新文本替换旧文本。 如果指定替换次数， 只进行这么多次替换， 否则每一处旧文本都被替换为新文本。 如果您需要替换指定的文本， 请用这个 SUBSTITUTE () ， 如果您想要替换指定位置的任何文本， 请用 REPLACE () 。
SUBSTITUTE( 文本串; 旧文本; 新文本; 替换次数)
SUBSTITUTE ("Cost Data"; "Cost"; "Sales") 返回 "Sales Data"
SUBSTITUTE ("Qtr 1, 2001"; "1"; "3"; 1) 返回 "Qtr 3, 2001"
SUBSTITUTE ("Qtr 1, 2001"; "1"; "3"; 4) 返回 "Qtr 3, 2003"
您要查找的文本
可能包含要 find_ text 的文本
指定开始查找的索引
SEARCH () 函数在一个文本( within_ text) 里查找另一文本( find_ text) ， 并返回从 within_ text 的最左边字符算起的 find_ text 的开始位置 。
您可以使用通配字符问号 (?) 和星号 (*) 。 问号匹配任何单个字符， 星号匹配任意字符序列 。
参数 start_ num 指定开始搜索的字符位置。 第一个字符序号为 1。 如果省略 start_ num， 默认它为 1。 SEARCH 不区分大写和小写字母 。
SEARCH( find_ text; within_ text; start_ num)
SEARCH ("e"; "Statements"; 6) 返回 7
SEARCH ("margin"; "Profit Margin") 返回 8
T () 函数返回参数 value 所指向的文本。 如果参数 value 本身是文本或者指向文本， T 返回该文本值， 如果参数不指向文本则返回空文本 。
T( value)
T ("KOffice") 返回 "KOffice"
T( 1. 2) 返回 ""(空文本)
TEXT () 函数将值转换为文本 。
TEXT( 值)
TEXT( 1234. 56) 返回 "1234. 56"
TEXT ("KSpread") 返回 "KSpread"
字符串
PROPER () 函数将每个词的首字母转换为大写， 其它字母变为小写 。
PROPER( 字符串)
PROPER ("this is a title") 返回 "This Is A Title"
第一个字符串
要比较的字符串
比较是否区分大小写 (true/ false)
COMPARE () 函数如果两个字符串相等则返回 0； 如果第一个字符串比第二个小则返回 - 1； 其它情况返回 1 。
COMPARE( 字符串1; 字符串2; true|false)
COMPARE ("KOffice"; "KOffice"; true) 返回 0
COMPARE ("koffice"; "KOffice"; true) 返回 1
COMPARE ("kspread"; "KOffice"; false) 返回 1
EXACT () 函数如果两个字符串相等返回真， 否则返回假 。
EXACT( 字符串1; 字符串2)
EXACT ("KOffice"; "KOffice") 返回 True
EXACT ("KSpread"; "KOffice") 返回 False
您要在其中替换一些字符的文本
要替换的字符的位置
要替换的字符数
用于替换旧字符的新文本
REPLACE () 用其它文本串替换文本的某一部分 。
REPLACE( 文本; 位置; 长度; 新文本)
REPLACE ("abcdefghijk"; 6; 5; "-") 返回 "abcde- k"
REPLACE ("2002"; 3; 2; "03") 返回 "2003"
指定开始查找的索引
FIND () 函数在一个文本( within_ text) 里查找另一文本( find_ text) ， 并返回从 within_ text 的最左边字符算起的 find_ text 的开始位置 。
参数 start_ num 指定开始搜索的字符位置。 第一个字符序号为 1。 如果省略 start_ num， 默认它为 1 。
您也可以使用 SEARCH 函数。 和 SEARCH 不同的是， FIND 是区分大小写的， 而且不允许使用通配符 。
FIND( find_ text; within_ text; start_ num)
FIND ("KOf"; "KOffice") 返回 1
FIND ("i"; "KOffice") 返回 5
FIND ("K"; "KSpread in KOffice"; 4) 返回 12
源字符串
位置
长度
MID () 函数返回一个从“ 位置” 序号开始的、 包含“ 长度” 个字符的子字符串 。
MID( 字符串; 位置; 长度)
MID( 字符串; 位置)
MID ("KOffice"; 2; 3) 返回 "Off"
MID ("KOffice"; 2) 返回 "Office"
LEN () 函数返回字符串的长度 。
LEN( 字符串)
LEN ("hello") 返回 5
LEN ("KSpread") 返回 7
TRIM () 函数返回单词间只间隔一个空格的文本 。
TRIM( 字符串)
TRIM ("hello KSpread") 返回 "hello KSpread"
CONCATENATE () 函数返回一个由参数字符串拼接起来的字符串 。
CONCATENATE( 字符串; 字符串;...)
CONCATENATE ("KSpread"; "KOffice"; "KDE") 返回 "KSpreadKOfficeKDE"
字符数
RIGHT () 函数返回字符串最右边“ 长度” 个字符构成的子字符串。 如果“ 长度” 超过字符串总长度， 则返回整个字符串 。
RIGHT( 字符串; 长度)
RIGHT ("hello"; 2) 返回 "lo"
RIGHT ("KSpread"; 10) 返回 "KSpread"
RIGHT ("KSpread") 返回 "d"
LEFT () 函数返回包含字符串最左边“ 长度” 个字符构成的子字符串。 如果“ 长度” 超过字符串总长度， 则返回整个字符串 。
LEFT( 字符串; 长度)
LEFT ("hello"; 2) 返回 "he"
LEFT ("KSpread"; 10) 返回 "KSpread"
LEFT ("KSpread") 返回 "K"
重复次数
REPT( 字符串; 次数)
REPT ("KSpread"; 3) 返回 "KSpreadKSpreadKSpread"
REPT ("KSpread"; 0) 返回 ""
ROT () 函数旋转加密字符串， 每个字符用字母表里13个位置之后的字符替换， 如果13个位置之后超出了字母 Z， 则从 A 开始继续数( 旋转) 。
对结果文本再使用一次这个加密函数， 就可解密该文本 。
ROT( 文本)
ROT ("KSpread") 返回 "XFcernq"
ROT ("XFcernq") 返回 "KSpread"
TOGGLE () 将小写字母改为大写， 大写字母改为小写 。
TOGGLE( 文本)
TOGGLE ("hello") 返回 "HELLO"
TOGGLE ("HELLO") 返回 "hello"
TOGGLE ("HeLlO") 返回 "hElLo"
CLEAN () 函数删除字符串中的任何不可打印字符 。
CLEAN( 文本)
CLEAN( AsciiToChar( 7) + "HELLO") 返回 "HELLO"
SLEEK () 函数删除字符串中的所有空格 。
SLEEK( 文本)
SLEEK ("This is some text") 返回 "Thisissometext"
UPPER () 函数将字符串转换成大写 。
UPPER( 文本)
UPPER ("hello") 返回 "HELLO"
UPPER ("HELLO") 返回 "HELLO"
LOWER () 函数将字符串转换成小写 。
LOWER( 文本)
LOWER ("hello") 返回 "hello"
LOWER ("HELLO") 返回 "hello"
字符码
CHAR () 函数返回用数字指定的字符 。
CHAR( 代码)
CHAR( 65) 返回 "A"
CODE () 函数返回文本字符串第一个字符的数字代码 。
CODE( 文本)
CODE ("KDE") 返回 75
将表示数字的文本字符串转换为真正的数值 。
VALUE( 文本)
VALUE ("14. 03") 返回 14. 03
搜索的文字
正则表达式
默认值( 可选)
回退引用( 可选)
返回匹配正则表达式的字符串的一部分。 如果字符串不与给定的正则表达式相匹配， 则返回指定的默认值 。
如果提供了回退引用， 则返回回退引用的值 。
如果没有给出默认值， 则假定为空字符串。 如果没有给出回退引用， 则假定为0( 这样将返回整个匹配的部分) 。
REGEXP( 文本; 正则表达式; 默认值; 回退引用)
REGEXP ("Number is 15."; "[0- 9] +") = "15"
REGEXP ("15, 20, 26, 41"; "([0- 9] +), * [0- 9] +$"; ""; 1) = "26"
替换
将正则表达式的全部匹配替换为指定文本
REGEXPRE( 文本; 正则表达式; 替换)
REGEXPRE ("14 and 15 and 16"; "[0- 9] +"; "num") 返回 "num and num and num"
UNICODE () 函数返回文本字符串第一个字符的 Unicode 代码点 。
UNICODE( 文本)
UNICODE ("KDE") 返回 75
UNICHAR () 函数返回用 Unicode 代码点指定的字符 。
UNICHAR( 代码)
UNICHAR( 65) 返回 "A"
全角字符
ASC () 函数返回与全角字符参数对应的半角字符 。
ASC( 文本)
半角字符
JIS () 函数返回与半角字符对应的全角字符 。
JIS( 文本)
TEXT () 函数将值转换为文本 。
FACT( 整数值)
三角学
COS () 函数返回x的余弦值， x以弧度值给出 。
COS( 浮点数)
COS( 0) 等于 1. 0
COS( PI () / 2) 等于 0
ACOT () 函数返回数值的反余切值 。
ACOT( 浮点数)
ACOT( 0) 等于 1. 57079633
SIN () 函数返回x的正弦值， x以弧度值给出 。
SIN( 浮点数)
SIN( 0) 等于 0
SIN( PI () / 2) 等于 1
TAN () 函数返回x的正切值， x以弧度值给出 。
TAN( 浮点数)
TAN( 0. 7) 等于 0. 84228838
TAN( 0) 等于 0
ACOS () 函数返回以弧度计的反余弦值， 按数学定义， 其范围是 0 到 π (包括端点在内) 。
ACOS( 浮点数)
ACOS( 0. 8) 等于 0. 6435011
ACOS( 0) 等于 1. 57079633
ASIN () 函数返回以弧度计的反正弦值， 按数学定义， 其范围为 - π/ 2 到 π/ 2 (包括端点在内) 。
ASIN( 浮点数)
ASIN( 0. 8) 等于 0. 92729522
ASIN( 0) 等于 0
ATAN () 函数返回以弧度计的反正切值， 按数学定义， 其范围为 - π/ 2 到 π/ 2 (包括端点在内) 。
ATAN( 浮点数)
ATAN( 0. 8) 等于 0. 67474094
ATAN( 0) 等于 0
COSH () 函数返回x的双曲余弦值， 数学中定义为( exp( x) + exp (- x)) / 2 。
COSH( 浮点数)
COSH( 0. 8) 等于 1. 33743495
COSH( 0) 等于
SINH () 函数返回x的双曲正弦值， 数学中定义为 (exp( x) - exp (- x)) / 2 。
SINH( 浮点数)
SINH( 0. 8) 等于 0. 88810598
SINH( 0) 等于 0
TANH () 函数返回x的双曲正切值， 数学中定义为sinh( x) / cosh( x) 。
TANH( 浮点数)
TANH( 0. 8) 等于 0. 66403677
TANH( 0) 等于 0
ACOSH () 函数计算x的反双曲余弦值。 即此值的双曲余弦值是x。 如果x小于1. 0， acosh () 返回“ 不是一个数字 ” (NaN) 且设置错误代号 errno 。
ACOSH( 浮点数)
ACOSH( 5) 等于 2. 29243167
ACOSH( 0) 等于 NaN
ASINH () 函数计算x的反双曲正弦值； 即此值的双曲正弦值是x 。
ASINH( 浮点数)
ASINH( 0. 8) 等于 0. 73266826
ASINH( 0) 等于 0
ATANH () 函数计算x的反双曲正切值； 即此值的双曲正切值是x。 如果x的绝对值大于1， atanh () 返回“ 不是一个数字 ” (NaN) 。
ATANH( 浮点数)
ATANH( 0. 8) 等于 1. 09861229
ATANH( 0) 等于 0
此函数计算两个变量x和y的反正切值。 它和计算y/ x的反正切值是类似的， 只是使用两个变量的符号决定结果的象限 。
ATAN2( 浮点数; 浮点数)
ATAN2( 0. 5; 1. 0) 等于 1. 107149
ATAN2 (- 0. 5; 2. 0) 等于 1. 815775
这个函数把弧度值转换为角度值 。
DEGREES( 浮点数)
DEGREES( 0. 78) 等于 44. 69
DEGREES( 1) 等于 57. 29
角 (角度)
这个函数把角度值转换为弧度值 。
RADIANS( 浮点数)
RADIANS( 75) 等于 1. 308
RADIANS( 90) 等于 1. 5707
PI () 函数返回 π 值 。
PI ()
PI () 等于 3. 141592654...
应用过滤
一月
二月
三月
四月
五月
六月
七月
八月
九月
十月
十一月
十二月
正月
二月
三月
四月May short
六月
七月
八月
九月
十月
十一月
腊月
星期一
星期二
星期三
星期四
星期五
星期六
星期日
周一
周二
周三
周四
周五
周六
周日
自动填充
自动过滤
自动套用格式
更改边框颜色
删除注释
添加注释
删除条件单元格格式
添加条件单元格格式
更改值
插入一个数列
填充选择
更改大小写
插入单元格
删除单元格
增加缩进
减少缩进
删除链接
设定链接
水平合并单元格
垂直合并单元格
分离单元格
不支持行或列合并 。
添加命名区域
删除命名区域
增加精度
减少精度
调整列宽
调整行高
调整行列
调整列
调整行
插入列
删除列
插入行
删除行
重命名工作表
隐藏工作表% 1
隐藏工作表
显示工作表% 1
显示工作表
添加工作表
复制工作表
删除工作表
更改工作表属性
排序数据
您想要在下一张工作表中检查拼写吗 ？
更正拼错的词
重置样式
更改样式
隐藏行
隐藏列
显示行
显示列
设置纸张布局
更改格式
更改角度
排序
拖放
更改大小
更改文本
插入单元格
删除单元格
条件样式
粘贴
粘贴并插入
单元格样式
从数据库插入数据
删除有效性检查
添加有效性检查
全部
空
非空
输入区域名称 ：
名为 “% 1” 的区域已存在 。 您想要替换它吗 ？
替换命名区域
角度 ：
工作表样式
选择要应用样式的工作表 ：
找不到图像% 1 。
无法装入图片% 1 。
找不到表格样式 XML 文件 “% 1 ” 。
分析表格样式 XML 文件% 1 出错 。
单元格注释
<\\ xE6\\ x97\\ xA0 >
等于
大于
小于
大于等于
小于等于
介于
不介于
不同于
条件一
条件二
条件三
单元格须
单元格样式
不介于
如果第一个值是数值， 那么第二个值也必须是数值 。
如果第一个值是字符串， 那么第二个值也必须是字符串 。
合并计算
函数( F) ：
Sum
Average
Count
Max
Min
乘积
标准差
方差
引用( F) ：
输入的引用( E) ：
描述在行( D)
描述在列( S)
复制数据( P)
添加( A)
删除( R)
范围% 1 太小
范围% 1 太大
范围% 1 和% 2 大小不同
源表格与目标表格交叉
范围% 1 格式不正确
从剪贴板粘贴
剪贴板中没有数据 。
剪贴板中没有可用的数据 。
插入文本文件
文本转为列
无法打开输入文件 。
类型 ：
用户名 ： (如果需要)
主机 ：
端口 ： (如果需要)
数据库名称 ：
密码 ： (如果需要)
选择表格 ：
表格
选择列 ：
表格
符合下面所有条件( AND)
符合下面任一条件( OR)
等于
不等于
属于
不属于
类似
大于
小于
大于或等于
小于或等于
排序按照
升序
降序
彼此不同
查询选项
SQL 查询 ：
在区域内插入
开始于单元格
您不能在这里指定一个表格 。
您必须指定一个可用的区域 。
您必须指定一个可用的单元格 。
您不能更改数据库里的数据 。
查询执行失败 。
此查询未返回任何结果 。
端口必须是数字
正在连接数据库...
已连接， 正在获取表格信息...
这个数据库中没有表格
无法载入驱动程序
正在获取表格的摘要数据...
您必须选择至少一个表格 。
您必须选择至少一列 。
无
“ * ” 或 “? ” 不是正确的 SQL 通配符。 合适的替代符号是 “% ” 或 “ _ ” 。 您要替换它们吗 ？
文档设置
区域设置
文档区域设置
使用系统区域设置( U)
语言 ：% 1
默认数字格式 ：% 1
长日期格式 ：% 1
短日期格式 ：% 1
时间格式 ：% 1
货币格式 ：% 1
更多选项
搜索整个工作表
搜索于 ：
单元格值
注释
搜索方向 ：
先向右再向下
先向下再向右
更少选项
插入函数
帮助
该函数没有参数 。
描述不可用 。
规划求解
目标单元格 ：
目标值 ：
可变单元格 ：
开始( S)
当前值 ：
新的值 ：
无效的单元格引用 。
无效的目标值 。
源单元格必须是数字值 。
目标单元格必须是公式 。
确定( O)
开始...
迭代次数 ：
用单元格% 1进行目标求值的结果 ：
用单元格% 1进行目标求值无解 。
转到单元格
输入单元格 ：
插入
向右移动
向下移动
插入行
插入列
删除
向左移动
向上移动
删除行
删除列
样式
名称 ：
继承样式 ：
已经存在同名样式 。
样式名称不能为空 。
样式不能自行继承 。
样式无法继承自 “% 1 ” ， 因为将导致循环引用 。
单元格格式
常规( G)
数据格式( D)
字体( F)
位置( P)
边框( B)
背景( G)
单元格保护( C)
科学
自定义
可变
自动
一半 1/ 2
四分之一 1/ 4
八分之一 1/ 8
十六分之一 1/ 16
十分之一 1/ 10
百分之一 1/ 100
一位数 5/ 9
两位数 15/ 22
三位数 153/ 652
系统 ：
(=[ mm]: ss)
(=[ hh]: mm: ss)
(=[ hh]: mm)
AaBbCc 文字范例
默认宽度 (% 1% 2)
默认高度 (% 1% 2)
边框
预选
图案
自定义
背景色 ：
无色
插入链接
Internet
链接到 Internet 地址
要显示的文字 ：
Internet 地址 ：
邮件
链接到邮件地址
电子邮件 ：
主题 ：
文件
链接到文件
文件位置 ：
最近的文件 ：
无
单元格
链接到单元格
单元格或命名区域 ：
Internet 地址为空
邮件地址为空
文件名为空
目标单元格为空
自定义列表
列表 ：
项目 ：
添加
取消
新建
修改
复制
您真的要删除这个列表吗 ？
删除列表
项目区域不为空 。 您要继续吗 ？
选择( S)
编辑( E)...
新建( N)...
命名区域
区域 ：% 1
新建命名区域
编辑命名区域
您真的要删除这个区域名称吗 ？
单元格 ：
工作表 ：
区域名称 ：
插入粘贴单元格
序列
插入值
从上到下垂直插入序列
从左到右水平插入序列
类型
等差数列 (2, 4, 6,...)
按照给定的“ 公差” 生成一个从“ 首项” 到“ 末项” 的数列。 这样建立的数列中， 每两个相邻的数项之间都相差一个公差 。
等比数列 (2, 4, 8,...)
按照给定的“ 公比” 生成一个从“ 首项” 到“ 末项” 的数列。 公比为 5 生成的数列就象 5、 25、 125、 625， 因为 5 乘 5 等于 25， 25 乘 5 等于 125， 125 乘以同样的步长 5 等于 625 。
首项 ：
末项 ：
公差/ 公比 ：
首项与末项必须为正数 。
末项必须比首项大或者公比必须比“ 1” 小 。
首项、 末项或公差/ 公比都不得为零 。
公比值必须不是1
公差为负数 。
公差必须大于0， 否则等差数列将无限增长 。
如果首项比末项大， 公差必须小于0 。
如果公差为负数， 末项必须比首项大 。
选择要显示的隐藏列 ：
选择要显示的隐藏行 ：
列 ：% 1
行 ：% 1
选择要显示的隐藏工作表 ：
排序
布局
排序行( R)
排序列( C)
按
然后按
排序规则
第一键值
使用自定义列表( U)
复制单元格格式( 边框、 颜色、 文本样式) (F)
区分大小写排序
(列% 1)
列% 1
(行% 1)
行% 1
第一行包含列标题( F)
第一行包含列标题( F)
选择性粘贴
修改( M)...
删除( D)...
样式管理器
所有样式
自定义样式
分级显示
样式% 1
分类汇总
全部删除
您必须选择至少一列作分类汇总 。
分类汇总
列 “% 1 ”
CountA
标准差( StDev)
总体标准差( StDevP)
方差( Var)
总体方差( VarP)
有效性
全部清除( A)
条件( C)
允许 ：
整数
文本长度
列表
允许空白
数据 ：
最小 ：
最大 ：
日期 ：
最小日期 ：
最大日期 ：
时间 ：
最小时间 ：
最大时间 ：
数字 ：
项数 ：
错误警告( E)
输入无效值时显示错误消息
动作 ：
停止
警告
标题 ：
消息 ：
输入帮助
选中单元格时显示输入帮助
这不是合法的数值 。
这不是合法的时间 。
这不是合法的日期 。
数位操作函数
转换函数
数据库函数
日期时间函数
工程函数
金融函数
信息函数
函数
数学函数
引用函数
统计函数
文本函数
三角函数
KOffice 电子表格程序
KSpread
(c) 1998- 2008， KSpread 团队
Torben Weis
原作者
维护者
Laurent Montel
John Dailey
Philipp Müller
Ariya Hidayat
Norbert Andres
Shaheed Haque
导入/ 导出过滤器开发者
Werner Trobin
Nikolas Zimmermann
David Faure
Helge Deller
Percy Leonhart
Eva Brucherseifer
Phillip Ezolt
Enno Bartels
Graham Short
Lukáš Tinkl
Tomas Mecir
Raphael Langerhorst
John Tapsell
Robert Knight
Stefan Nikolaus
Sascha Pfau
开发者( 函数)
Sebastian Sauer
脚本插件
Brad Hards
整合， 复核以及测试多个函数
注释 ：
定义打印范围
定义当前工作表中的打印范围
链接% 1 已激活
此链接指向程序或脚本 “% 1 ” 。 恶意程序可能对您的计算机造成伤害。 您确定想要运行此程序吗 ？
打开链接 ？
单元格工具
无效的 OASIS OpenDocument 文档。 没有 office: body 。
无效的 OASIS OpenDocument 文档。 没有 office: body 。
此文档不是电子表格， 而是% 1。 请使用相应的应用程序打开此文件 。
无效的文档。 需要的 MIME 类型为 application/ x- kspread 或者 application/ vnd. kde. kspread， 却得到% 1
这个文档是用较新版本的 KSpread (语法版本 ：% 1) 创建的 。 当您用这个版本的 KSpread 打开时， 有些信息可能会丢失 。
文件格式不匹配
无法载入样式 。
无效的文档。 没有映射标签 。
区域太大 。
高度 ：% 1% 2
隐藏行
宽度 ：% 1% 2
隐藏列
要打开的文件
在启动后执行脚本文件 。
未找到工作表% 1 进行打印
工作表% 1 没有可打印的内容 。
工作表属性
修改当前工作表的属性
工作表
插入工作表
插入一张新工作表
复制选中的工作表
删除活动的工作表
重命名工作表...
重命名活动的工作表
显示工作表...
显示已隐藏的工作表
隐藏活动的工作表
纸张布局...
指定工作表打印时的布局
重置打印范围
定义当前工作表中的打印范围
页面边框
在工作表上显示页面边界
重新计算工作表
重新计算
重新计算当前工作工作表中每个单元格的值
重新计算文档
重新计算所有工作工作表中每个单元格的值
保护工作表( S)...
保护工作表免于修改
保护文档( D)...
保护文档免于修改
从文档建立模板( C)...
锚
页
切换形状锚
下一个工作表
下一个
转到下一个工作表
上一个工作表
上一个
转到上一个工作表
第一个工作表
第一个
转到第一个工作表
最后一个工作表
转到最后一个工作表
列标题
显示列标题
行标题
显示行标题
水平滚动条
显示水平滚动条
垂直滚动条
显示垂直滚动条
状态栏
显示状态栏
标签栏
显示标签栏
设定各种 KSpread 选项
不计算
使用总和计算
使用最小值计算
使用最大值计算
使用平均值计算
使用计数值计算
使用 countA 计算
工具
更改文本颜色
更改背景颜色
更改边框
您不能更改保护的工作表 。
您不能隐藏最后一张可见工作表 。
输入密码 。
保护文档
输入密码 。
取消保护文档
密码不正确 。
保护工作表
取消保护工作表
您不能删除唯一的工作表 。
您将要删除活动的工作表 。 您要继续吗 ？
删除( D)
输入名称 ：
工作表名称不能为空 。
更改工作表名称
这个名称已经被使用 。
总计 ：
均值 ：
最小值 ：
最大值 ：
计数 ：
CountA ：
% 1%
无限制
配置 KSpread
界面
下
上
下， 第一列
打开/ 保存
函数模块
插件
拼写
拼写检查行为
撤消/ 重做限制 ：
自动补齐模式( C) ：
手工
弹出菜单
半自动
工作表
单元格格式...
设置单元格格式
重置为默认格式
编辑并组织单元格样式
对选中单元格应用预先定义的样式
根据单元格创建样式...
单元格样式
根据当前选中的单元格创建新样式
删除线
选择字体...
选择字体大小
字体大小
字体增大
字体缩小
文字颜色
左对齐
靠左对齐单元格内容
居中对齐
居中对齐单元格内容
右对齐
靠右对齐单元格内容
顶部对齐
单元格内容沿单元格顶部对齐
中间对齐
单元格内容对齐在单元格中间
底部对齐
单元格内容沿单元格底部对齐
左边框
设置所选区域的左边框
右边框
设置所选区域的右边框
上边框
设置所选区域的上边框
下边框
设置所选区域的下边框
全部边框
设置所选区域内所有单元格的边框
无边框
删除所选区域的所有边框
外围边框
外围
设置所选区域外围的边框
边框颜色
选择新的边框颜色
文字换行
换行
让单元格文本能折成多行
垂直文字
垂直显示单元格内容
增加缩进
增加缩进
减少缩进
减少缩进
更改角度...
角度
更改单元格内容显示的角度
百分数格式
设置单元格格式以便看起来象百分数
货币格式
设置单元格格式使其看起来象您的本地货币
增加屏幕上显示的小数精度
减少屏幕上显示的小数精度
大写
大写
将所有字母转换为大写
小写
小写
将所有字母转换为小写
首字母转换为大写
首字母大写
首字母大写
背景颜色
设置背景颜色
合并选中的区域
水平合并选中的区域
垂直合并选中的区域
取消选中区域的合并
调整列宽...
更改列的宽度
在工作表中插入新的一列
从工作表中删除一列
隐藏一列不显示
显示列...
显示隐藏的列
设置各列等宽
将所选的各列更改为同样宽度
显示所选区域中隐藏的列
调整行高...
更改行的高度
行
插入新的一行到工作表中
从工作表中删除一行
隐藏一行不显示
显示行...
显示隐藏的行
设置各行等高
将所选的各行更改为同样高度
显示所选区域中隐藏的行
调整行列
调整行/ 列的大小使单元格内容能放得下
单元格...
插入单元格...
在工作表中插入一个空白单元格
删除单元格...
从工作表中删除当前单元格
全部清除
删除当前单元格的所有内容和格式信息
内容
清除内容
删除当前单元格的内容
注释...
编辑此单元格的注释
删除此单元格的注释
条件样式...
按照特定条件设置单元格样式
删除条件样式
删除条件单元格样式
链接( L)...
插入一个 Internet 超链接
链接
删除链接
有效性...
设置测试以确认单元格数据是有效的
删除有效性
删除此单元格上的有效性测试
排序( S)...
对一组单元格进行排序
降序排序( D)
按降序( 从最后到最前) 对一组单元格进行排序
升序排序( I)
按升序( 从最前到最后) 对一组单元格进行排序
自动过滤( A)
向单元格范围添加自动过滤
左( L)
右( R)
上( U)
下( D)
自动求和
插入“ sum” 函数
数列( S)...
插入一个数列
函数( F)...
插入数学表达式
特殊字符( P)...
插入在键盘上找不到的一个或多个符号或字母
从数据库( D)...
从 SQL 数据库插入数据
从文本文件( T)...
文本文件
从文本文件插入数据到当前光标位置或选择区
从剪切板( C)...
剪切板
从剪贴板插入 CSV 数据到当前光标位置或选择区
文本转换为列( T)...
将单元格内容扩展到多个列
自定义列表...
创建自定义的列表用于排序或自动填充
合并计算( C)...
从一组类似区域创建一个汇总数据区域
规划求解( G)...
重复计算以寻找指定的数值
分类汇总( S)...
创建不同类型的分类汇总， 保存到列表或数据库中
区域名称...
为工作表中的区域设置名称
命名区域...
显示一块已命名的区域
公式选择
插入一个函数
其它...
修改单元格
编辑加亮显示的单元格
将单元格里的对象移到剪贴板上
将单元格对象拷贝到剪贴板
在光标处粘贴剪贴板的内容
选择性粘贴...
使用特殊的选项粘贴剪贴板上的内容
粘贴并插入
从剪贴板插入一个单元格到工作表中
重新计算当前工作工作表中每个单元格的值
转到单元格...
转到
转到某个特定的单元格
检查拼写
运行检视器...
显示工作表...
自动套用格式...
设定工作表的格式
文档设置...
显示文档设置对话框
公式
应用
应用更改
丢弃更改
根据单元格创建样式
样式名称不能为空 。
更改字体
更改水平对齐
更改垂直对齐
格式化百分数
格式化货币
切换为大写
切换为小写
首字母转换为大写
清除文本
编辑链接
您必须选择多个单元格 。
没有可用的数据库驱动。 您需要重新编译 Qt 3 包含必要的驱动程序 。
替换
数字格式
货币格式
百分数格式
时间格式
日期格式
科学记数法格式
调整列
选择列
调整行
删除行
可选项列表...
特殊字符( P)...
用于替换旧字符的新文本
选中单个单元格
选择多个单元格
日期格式
时间格式
数据类型