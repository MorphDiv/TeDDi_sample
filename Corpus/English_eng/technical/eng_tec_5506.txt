# language_name_wals:	English
# language_name_glotto:	English
# ISO_6393:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Chapter 32.
Accepting Arguments
Next
You might run into a situation in which you need write access to a parameter that' s retrieved with zend_get_parameters_ex() but not passed by reference.
For this case, you can use the macro SEPARATE_ZVAL, which does a zval separation on the provided container.
The newly generated zval is detached from internal data and has only a local scope, meaning that it can be changed or destroyed without implying global changes in the script context:
zval **parameter; / * retrieve parameter * / zend_get_parameters_ex(1, parameter); / * at this stage, parameter still is connected * / / * to Zend's internal data buffers * / / * make parameter write-safe * / SEPARATE_ZVAL(parameter); / * now we can safely modify parameter * / / * without implying global changes * /
Note:
As you can easily work around the lack of write access in the "traditional" API (with zend_get_parameters() and so on), this API seems to be obsolete, and is not discussed further in this chapter.
Prev
Home
Next
Dealing with Arguments Passed by Reference
Up
Creating Variables