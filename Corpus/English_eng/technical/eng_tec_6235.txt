# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	KDE4
# source:	https://object.pouta.csc.fi/OPUS-KDE4/v2/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/KDE4.php
# copyright_long:	http://opus.nlpl.eu/KDE4.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

(no caller)
%1 via %2
(no callee)
(unknown)
(global)
(not found)
Recalculating Function Cycles...
%1 from %2
Instruction Fetch
Data Read Access
Data Write Access
L1 Instr. Fetch Miss
L1 Data Read Miss
L1 Data Write Miss
L2 Instr. Fetch Miss
L2 Data Read Miss
L2 Data Write Miss
Samples
System Time
User Time
L1 Miss Sum
L2 Miss Sum
Cycle Estimation
Invalid Context
Unknown Context
Part Source Line
Source Line
Part Line Call
Line Call
Part Jump
Jump
Part Instruction
Instruction
Part Instruction Jump
Instruction Jump
Part Instruction Call
Instruction Call
Part Call
Call
Part Function
Function Source File
Function
Function Cycle
Part Class
Class
Part Source File
Source File
Part ELF Object
ELF Object
Profile Part
Program Trace
Import filter for Cachegrind/ Callgrind generated profile data files
Active call to '%1 '
Jump %1 of %2 times to 0x%3
Jump %1 times to 0x%2
(cycle)
Stack Selection
Cost
Cost2
Calls
Parts Overview
Name
(no trace parts)
The Parts Overview A trace consists of multiple trace parts when there are several profile data files from one profile run. The Trace Part Overview dockable shows these, horizontally ordered in execution time; the rectangle sizes are proportional to the total cost spent in the parts. You can select one or several parts to constrain all costs shown to these parts only. The parts are further subdivided: there is a partitioning and an callee split mode: Partitioning: You see the partitioning into groups for a trace part, according to the group type selected. E. g. if ELF object groups are selected, you see colored rectangles for each used ELF object (shared library or executable), sized according to the cost spent therein. Callee: A rectangle showing the inclusive cost of the current selected function in the trace part is shown. This is split up into smaller rectangles to show the costs of its callees.
Profile Part Overview: Current is '%1 '
Deselect '%1 '
Select '%1 '
Select All Parts
Visible Parts
Hide Selected Parts
Show Hidden Parts
Go to '%1 '
Visualization
Partitioning Mode
Zoom Function
Show Direct Calls
Increment Shown Call Levels
Diagram Mode
Draw Names
Draw Costs
Ignore Proportions
Allow Rotation
Draw Frames
Hide Info
Show Info
(no trace loaded)
Jump %1 of %2 times to %3
Jump %1 times to %2
No description available
#
Cost 2
Hex
Assembly Instructions
Source Position
Annotated Machine Code The annotated machine code list shows the assembly instructions of the current selected function together with (self) cost spent while executing an instruction. If this is a call instruction, lines with details on the call happening are inserted into the source: the cost spent inside of the call, the number of calls happening, and the call destination. The machine code shown is generated with the'objdump 'utility from the'binutils' package. Select a line with call information to make the destination function of this call current.
Go to Address %1
Hex Code
There is no instruction info in the profile data file.
Tip: For Callgrind, rerun with option
--dump-instr=yes
To see (conditional) jumps, additionally specify
--trace-jump=yes
For annotated machine code, the following object file is needed:
This file can not be found.
There is an error trying to execute the command
Check that you have installed'objdump '.
This utility can be found in the'binutils' package.
(No Instruction)
This happens because the code of
does not seem to match the profile data file.
Are you using an old profile data file or is the above mentioned
ELF object from an updated installation/ another machine?
There seems to be an error trying to execute the command
Check that the ELF object used in the command exists.
Call(s) from %1
Call(s) to %1
(unknown call)
Call Graph around active Function Depending on configuration, this view shows the call graph environment of the active function. Note: the shown cost is only the cost which is spent while the active function was actually running; i. e. the cost shown for main() - if it is visible - should be the same as the cost of the active function, as that is the part of inclusive cost of main() spent while the active function was running. For cycles, blue call arrows indicate that this is an artificial call added for correct drawing which actually never happened. If the graph is larger than the widget area, an overview panner is shown in one edge. There are similar visualization options to the Call Treemap; the selected function is highlighted.
Warning: a long lasting graph layouting is in progress. Reduce node/ edge limits for speedup.
Layouting stopped.
The call graph has %1 nodes and %2 edges.
No graph available because the layouting process failed.
Trying to run the following command did not work: '%1 '
Please check that'dot 'is installed (package GraphViz).
No item activated for which to draw the call graph.
No call graph can be drawn for the active item.
Error running the graph layouting tool.
There is no call graph available for function '%1 'because it has no cost of the selected event type.
Caller Depth
Unlimited
Depth 0
max. 2
max. 5
max. 10
max. 15
Callee Depth
Min. Node Cost
No Minimum
50%
20%
10%
5%
2%
1%
Min. Call Cost
Same as Node
50% of Node
20% of Node
10% of Node
Birds-eye View
Top Left
Top Right
Bottom Left
Bottom Right
Automatic
Hide
Layout
Top to Down
Left to Right
Circular
Stop Layouting
Export Graph
As DOT file...
As Image...
Graph
Arrows for Skipped Calls
Inner-cycle Calls
Cluster Groups
Compact
Normal
Tall
Export Graph As DOT file
Graphviz (*. dot)
Export Graph As Image
Images (*. png *. jpg)
Move to Top
Top
Move to Right
Right
Move to Bottom
Bottom
Move to Bottom Left
Move Area To
Hide This Tab
Hide Area
Show Hidden On
(No profile data file loaded)
Types
Callers
All Callers
Callee Map
Source Code
Parts
Callees
Call Graph
All Callees
Caller Map
Machine Code
Information Tabs This widget shows information for the currently selected function in different tabs: The Costs tab shows a list of available event types and the inclusive and self-costs related to these types. The Parts tab shows a list of trace parts if the trace consists of more than one part (otherwise, this tab is hidden). The cost of the selected function spent in the different parts together with the calls happening is shown. The Call Lists tab shows direct callers and callees of the function in more detail. The Coverage tab shows the same as the Call Lists tab, but also shows indirect callers and callees, not just direct ones. The Call Graph tab shows a graphical visualization of the calls made by this function. The Source Code tab presents annotated source code if debugging information and the source file are available. The Machine Code tab presents annotated assembly instructions if profile information at instruction level is available. For more information, see the What's This? help of the corresponding tab widget.
(No function selected)
Source (unknown)
Annotated Source The annotated source list shows the source lines of the current selected function together with (self) cost spent while executing the code of this source line. If there was a call in a source line, lines with details on the call happening are inserted into the source: the cost spent inside of the call, the number of calls happening, and the call destination. Select a inserted call information line to make the destination function current.
Go to Line %1
(No Source)
There is no cost of current selected type associated
with any source line of this function in file
Thus, no annotated source can be shown.
Source ('%1 ')
--- Inlined from '%1 '---
--- Inlined from unknown source ---
There is no source available for the following function:
This is because no debug information is present.
Recompile source and redo the profile run.
The function is located in this ELF object:
This is because its source file cannot be found:
Add the folder of this file to the source folder list.
The list can be found in the configuration dialog.
(Thread %1)
(none)
(active)
Unknown Type
Function Profile
& Search:
Self
Group
Incl.
Called
Location
(No Grouping)
The Flat Profile The flat profile contains a group and a function selection list. The group list contains all groups where costs are spent in, depending on the chosen group type. The group list is hidden when group type'Function 'is selected. The function list contains the functions of the selected group (or all for'Function' group type), ordered by the costs spent therein. Functions with costs less than 1% are hidden on default.
Grouping
No Grouping
Distance
Caller
Calling
Callee
List of all Callers This list shows all functions calling the current selected one, either directly or with several functions in-between on the stack; the number of functions in-between plus one is called the Distance (e. g. for function A, B, C there exists a call from A to C when A calls B and B calls C, i. e. A = > B = > C. The distance here is 2). Absolute cost shown is the cost spent in the selected function while a listed function is active; relative cost is the percentage of all cost spent in the selected function while the listed one is active. The cost graphic shows logarithmic percentage with a different color for each distance. As there can be many calls from the same function, the distance column sometimes shows the range of distances for all calls happening; then, in parentheses, there is the medium distance, i. e. the distance where most of the call costs happened. Selecting a function makes it the current selected one of this information panel. If there are two panels (Split mode), the function of the other panel is changed instead.
List of all Callees This list shows all functions called by the current selected one, either directly or with several function in-between on the stack; the number of function in-between plus one is called the Distance (e. g. for function A, B, C there exists a call from A to C when A calls B and B calls C, i. e. A = > B = > C. The distance here is 2). Absolute cost shown is the cost spent in the listed function while the selected is active; relative cost is the percentage of all cost spent in the listed function while the selected one is active. The cost graphic always shows logarithmic percentage with a different color for each distance. As there can be many calls to the same function, the distance column sometimes shows the range of distances for all calls happening; then, in parentheses, there is the medium distance, i. e. the distance where most of the call costs happened. Selecting a function makes it the current selected one of this information panel. If there are two panels (Split mode), the function of the other panel is changed instead.
Text %1
Recursive Bisection
Columns
Rows
Always Best
Best
Alternate (V)
Alternate (H)
Horizontal
Vertical
A thing's name
Caller Map This graph shows the nested hierarchy of all callers of the current activated function. Each colored rectangle represents a function; its size tries to be proportional to the cost spent therein while the active function is running (however, there are drawing constraints).
Call Map This graph shows the nested hierarchy of all callees of the current activated function. Each colored rectangle represents a function; its size tries to be proportional to the cost spent therein while the active function is running (however, there are drawing constraints).
Appearance options can be found in the in the context menu. To get exact size proportions, choose'Hide incorrect borders'. As this mode can be very time consuming, you may want to limit the maximum drawn nesting level before. 'Best 'determinates the split direction for children from the aspect ratio of the parent. 'Always Best' decides on remaining space for each sibling. 'Ignore Proportions' takes space for function name drawing before drawing children. Note that size proportions can get heavily wrong. This is a TreeMap widget. Keyboard navigation is available with the left/ right arrow keys for traversing siblings, and up/ down arrow keys to go a nesting level up/ down. Return activates the current item.
Go To
Stop at Depth
No Depth Limit
Depth 10
Depth 15
Depth 20
Depth of '%1 '(%2)
Decrement Depth (to %1)
Increment Depth (to %1)
Stop at Function
No Function Limit
Stop at Area
No Area Limit
100 Pixels
200 Pixels
500 Pixels
1000 Pixels
Area of '%1 '(%2)
Double Area Limit (to %1)
Half Area Limit (to %1)
Split Direction
Skip Incorrect Borders
Border Width
Border 0
Border 1
Border 2
Border 3
Draw Symbol Names
Draw Cost
Draw Location
Draw Calls
Shading
Call Map: Current is '%1 '
(no function)
(no call)
Event Type
Short
Formula
Cost Types List This list shows all cost types available and what the self/ inclusive cost of the current selected function is for that cost type. By choosing a cost type from the list, you change the cost type of costs shown all over KCachegrind to be the selected one.
Set as Secondary Event Type
Hide Secondary Event Type
Edit Long Name
Edit Short Name
Edit Formula
Remove
New Event Type...
New%1
New Event Type %1
Count
List of direct Callers This list shows all functions calling the current selected one directly, together with a call count and the cost spent in the current selected function while being called from the function from the list. An icon instead of an inclusive cost specifies that this is a call inside of a recursive cycle. An inclusive cost makes no sense here. Selecting a function makes it the current selected one of this information panel. If there are two panels (Split mode), the function of the other panel is changed instead.
List of direct Callees This list shows all functions called by the current selected one directly, together with a call count and the cost spent in this function while being called from the selected function. Selecting a function makes it the current selected one of this information panel. If there are two panels (Split mode), the function of the other panel is changed instead.
Profile Part %1
(no trace)
(no part)
Comment
Trace Part List This list shows all trace parts of the loaded trace. For each part, the self/ inclusive cost of the current selected function, spent in the part, is shown; percentage costs are always relative to the total cost of the part (not to the whole trace as in the Trace Part Overview). Also shown are the calls happening to/ from the current function inside of the trace part. By choosing one or more trace parts from the list, the costs shown all over KCachegrind will only be the ones spent in the selected part(s). If no list selection is shown, in fact all trace parts are selected implicitly. This is a multi-selection list. You can select ranges by dragging the mouse or use SHIFT/ CTRL modifiers. Selection/ Deselection of trace parts can also be done by using the Trace Part Overview Dockable. This one also supports multiple selection. Note that the list is hidden if only one trace part is loaded.
Show on Top
Show on Right
Show on Bottom
Show on Bottom Left
Show All Items
Nesting
Border
Correct Borders Only
Width %1
Visible
Take Space From Children
Top Center
Bottom Center
No %1 Limit
Halve Area Limit (to %1)
Depth %1
Decrement (to %1)
Increment (to %1)
50 Pixels
Remove Secondary Event Type
Hide '%1 '
Hide Selected
Show All
As PostScript
Save Image