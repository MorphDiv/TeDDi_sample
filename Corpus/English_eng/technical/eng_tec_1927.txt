# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	OpenOffice
# source:	https://object.pouta.csc.fi/OPUS-OpenOffice/v3/raw/en_GB.zip
# copyright_short:	http://opus.nlpl.eu/OpenOffice.php
# copyright_long:	http://opus.nlpl.eu/OpenOffice.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

CreateUnoValue Function [Run-time]
/text/sbasic/shared/03132300.xhp
Sun Microsystems, Inc.
converted from old format - fpe
CreateUnoValue function
CreateUnoValue Function [Run-time]
Returns an object that represents a strictly typed value referring to the Uno type system.
This object is automatically converted to an Any of the corresponding type when passed to Uno.
The type must be specified by its fully qualified Uno type name.
The $[officename] API frequently uses the Any type.
It is the counterpart of the Variant type known from other environments.
The Any type holds one arbitrary Uno type and is used in generic Uno interfaces.
Syntax:
oUnoValue = CreateUnoValue( &quot; []byte &quot; , MyBasicValue ) to get a byte sequence.
If CreateUnoValue cannot be converted to the specified Uno type and error occurs.
For the conversion, the TypeConverter service is used.
This function is intended for use in situations where the default Basic to Uno type converting mechanism is insufficient.
This can happen when you try to access generic Any based interfaces, such as XPropertySet::setPropertyValue( Name, Value ) or X???Container::insertBy???( ???, Value ), from $[officename] Basic.
The Basic run-time does not recognise these types as they are only defined in the corresponding service.
In this type of situation, $[officename] Basic chooses the best matching type for the Basic type that you want to convert.
However, if the wrong type is selected, an error occurs.
You there use the CreateUnoValue() function to create a value for the unknown Uno type.
You can also use this function to pass non-Any values, but this is not recommend.
If Basic already knows the target type, using the CreateUnoValue() function will only lead to additional converting operations that slow down the Basic execution.