# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Next
These functions allow you to store records stored in a dbm-style database.
This type of database (supported by the Berkeley DB, GDBM, and some system libraries, as well as a built-in flatfile library) stores key / value pairs (as opposed to the full-blown records supported by relational databases).
Note:
However, dbm support is deprecated and you are encourged to use the Database (dbm-style) abstraction layer functions instead.
To use this functions you have to compile PHP with support for an underlying database.
See the list of supported Databases.
In order to use these functions, you must compile PHP with dbm support by using the --with-db option.
In addition you must ensure support for an underlying database or you can use some sytem libraries.
This extension has no configuration directives defined in php.ini.
The function dbmopen() returns an database identifier which is used by the other dbm-functions.
This extension has no constants defined.
Example 1.
DBM example
$dbm = dbmopen ("lastseen", "w"); if (dbmexists ($dbm, $userid)) {$last_seen = dbmfetch ($dbm, $userid);} else {dbminsert ($dbm, $userid, time());} do_stuff(); dbmreplace ($dbm, $userid, time()); dbmclose ($dbm);
Prev
Home
Next
dbase_replace_record
Up
dblist