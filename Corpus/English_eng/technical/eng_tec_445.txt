# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	OpenOffice
# source:	https://object.pouta.csc.fi/OPUS-OpenOffice/v3/raw/en_GB.zip
# copyright_short:	http://opus.nlpl.eu/OpenOffice.php
# copyright_long:	http://opus.nlpl.eu/OpenOffice.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

List of Regular Expressions
/text/shared/01/02100001.xhp
regular expressions; list of
lists;regular expressions
replacing;tab stops (regular expressions)
tab stops;regular expressions
concatenation, see ampersand symbol
ampersand symbol, see also operators
mw added &quot; replacing; &quot; and &quot; tab stops; &quot;
List of Regular Expressions
Character
Result/Use
Any character
Represents any single character unless otherwise specified.
.
Represents any single character except for a line break or paragraph break.
For example, the search term &quot; sh.rt &quot; returns both &quot; shirt &quot; and &quot; short &quot; .
^
Only finds the search term if the term is at the beginning of a paragraph.
Special objects such as empty fields or character-anchored frames, at the beginning of a paragraph are ignored.
Example: &quot; ^Peter &quot; .
$
Only finds the search term if the term appears at the end of a paragraph.
Special objects such as empty fields or character-anchored frames at the end of a paragraph are ignored.
Example: &quot; Peter$ &quot; .
*
Finds zero or more of the characters in front of the &quot; * &quot; .
For example, &quot; Ab*c &quot; finds &quot; Ac &quot; , &quot; Abc &quot; , &quot; Abbc &quot; , &quot; Abbbc &quot; , and so on.
+
Finds one or more of the characters in front of the &quot; + &quot; .
For example, &quot; AX.+4 &quot; finds &quot; AXx4 &quot; , but not &quot; AX4 &quot; .
The longest possible string that matches this search pattern in a paragraph is always found.
If the paragraph contains the string &quot; AX 4 AX4 &quot; , the entire passage is highlighted.
?
Finds zero or one of the characters in front of the &quot; ? &quot; .
For example, &quot; Texts? &quot; finds &quot; Text &quot; and &quot; Texts &quot; and &quot; x(ab|c)?y &quot; finds &quot; xy &quot; , &quot; xaby &quot; , or &quot; xcy &quot; .
\
Search interprets the special character that follows the &quot; \ &quot; as a normal character and not as a regular expression (except for the combinations \n, , \ > , and \ < ).
For example, &quot; tree\. &quot; finds &quot; tree. &quot; , not &quot; treed &quot; or &quot; trees &quot; .
\n
\n
in the
Search for
and
Replace with
boxes, and then perform a search and replace.
Search for
text box stands for a line break that was inserted with the Shift+Enter key combination.
Replace with
text box stands for a paragraph break that can be entered with the Enter or Return key.
 
Replace with
box.
\ >
Only finds the search term if it appears at the end of a word.
For example, &quot; book\ > &quot; finds &quot; chequebook &quot; , but not &quot; bookmark &quot; .
\ <
Only finds the search term if it appears at the beginning of a word.
For example, &quot; \ < book &quot; finds &quot; bookmark &quot; , but not &quot; chequebook &quot; .
^$
Finds an empty paragraph.
^.
Finds the first character of a paragraph.
& or $0
Search for
box to the term in the
Replace with
box when you make a replacement.
Search for
box and &quot; & frame &quot; in the
Replace with
box, the word &quot; window &quot; is replaced with &quot; windowframe &quot; .
Replace with
box to modify the
Attributes
or the
Format
of the string found by the search criteria.
[abc123]
Represents one of the characters that are between the square brackets.
[a-e]
Represents any of the characters in the range a to e (inclusive).
[a-eh-x]
Represents any of the characters in the ranges a to e and h to x (inclusive).
[^a-s]
Represents any character that is not in the range a to s.
\xXXXX
Represents a special character based on its four-digit hexadecimal code (XXXX).
Insert - Special Character
.
|
Finds the terms that occur before or after the &quot; | &quot; .
For example, &quot; this|that &quot; finds &quot; this &quot; and &quot; that &quot; .
{2}
Defines the number of times that the character in front of the opening bracket occurs.
For example, &quot; tre{2} &quot; finds &quot; tree &quot; .
{1,2}
Defines the number of times that the character in front of the opening bracket can occur.
For example, &quot; tre{1,2} &quot; finds both &quot; tree &quot; and &quot; treated &quot; .
{1,}
Defines the minimum number of times that the character in front of the opening bracket can occur.
For example, &quot; tre{2,} &quot; finds &quot; tree &quot; , &quot; treee &quot; , and &quot; treeeee &quot; .
( )
Search for
box:
Defines the characters inside the parentheses (round brackets) as a reference.
You can then refer to the first reference in the current expression with &quot; \1 &quot; , to the second reference with &quot; \2 &quot; , and so on.
For example, if your text contains the number 13487889 and you search using the regular expression (8)7\1\1, &quot; 8788 &quot; is found.
You can also use () to group terms, for example, &quot; a(bc)?d &quot; finds &quot; ad &quot; or &quot; abcd &quot; .
Replace with
box:
Use $ (dollar) instead of \ (backslash) to replace references.
Use $0 to replace the whole found string.
[:alpha:]
Represents an alphabetic character.
Use [:alpha:]+ to find one of them.
[:digit:]
Represents a decimal digit.
Use [:digit:]+ to find one of them.
[:alnum:]
Represents an alphanumeric character ([:alpha:] and [:digit:]).
[:space:]
Represents a space character (but not other whitespace characters).
[:print:]
Represents a printable character.
[:cntrl:]
Represents a non-printing character.
[:lower:]
Match case
is selected in
Options
.
[:upper:]
Match case
is selected in
Options.
Examples:
You can combine the search terms to form complex searches.
To find three-digit numbers alone in a paragraph
^[:digit:]{3}$
^ means the match must be at the start of a paragraph,
[:digit:] matches any decimal digit,
{3} means there must be exactly 3 copies of &quot; digit &quot; ,
$ means the match must end a paragraph.
Wiki page about regular expressions in Writer
Wiki page about regular expressions in Calc