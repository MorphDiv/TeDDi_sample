# language_name_wals:	English
# language_name_glotto:	English
# ISO_6393:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Next
This section holds common questions about relation between PHP and databases.
Yes, PHP can access virtually any database available today.
1.
I heard it 's possible to access Microsoft SQL Server from PHP.
How?
On Windows machines, you can simply use the included ODBC support and the correct ODBC driver.
On Unix machines, you can use the Sybase-CT driver to access Microsoft SQL Servers because they are (at least mostly) protocol-compatible.
Sybase has made a free version of the necessary libraries for Linux systems.
For other Unix operating systems, you need to contact Sybase for the correct libraries.
Also see the answer to the next question.
2.
Can I access Microsoft Access databases?
Yes.
You already have all the tools you need if you are running entirely under Windows 9x / Me, or NT / 2000, where you can use ODBC and Microsoft 's ODBC drivers for Microsoft Access databases.
If you are running PHP on a Unix box and want to talk to MS Access on a Windows box you will need Unix ODBC drivers.
OpenLink Software has Unix-based ODBC drivers that can do this.
There is a free pilot program where you can download an evaluation copy that doesn 't expire and prices start at $675 for the commercial supported version.
Another alternative is to use an SQL server that has Windows ODBC drivers and use that to store the data, which you can then access from Microsoft Access (using ODBC) and PHP (using the built in drivers), or to use an intermediary file format that Access and PHP both understand, such as flat files or dBase databases.
On this point Tim Hayes from OpenLink software writes:
Using another database as an intermediary is not a good idea, when you can use ODBC from PHP straight to your database - i.e. with OpenLink 's drivers.
If you do need to use an intermediary file format, OpenLink have now released Virtuoso (a virtual database engine) for NT, Linux and other unix platforms.
Please visit our website for a free download.
One option that has proven successful is to use MySQL and its MyODBC drivers on Windows and synchronizing the databases.
Steve Lawrence writes:
Install MySQL on your platform according to instructions with MySQL.
Latest available from www.mysql.com (get it from your mirror!).
No special configuration required except when you set up a database, and configure the user account, you should put% in the host field, or the host name of the Windows computer you wish to access MySQL with.
Make a note of your server name, username, and password.
Download the MyODBC for Windows driver from the MySQL site.
Latest release is myodbc-2_50_19-win95.zip (NT available too, as well as source code).
Install it on your Windows machine.
You can test the operation with the utilities included with this program.
Create a user or system dsn in your ODBC administrator, located in the control panel.
Make up a dsn name, enter your hostname, user name, password, port, etc for you MySQL database configured in step 1.
Install Access with a full install, this makes sure you get the proper add-ins.. at the least you will need ODBC support and the linked table manager.
Now the fun part!
Create a new access database.
In the table window right click and select Link Tables, or under the file menu option, select Get External Data and then Link Tables.
When the file browser box comes up, select files of type:
ODBC.
Select System dsn and the name of your dsn created in step 3.
Select the table to link, press OK, and presto!
You can now open the table and add / delete / edit data on your MySQL server!
You can also build queries, import / export tables to MySQL, build forms and reports, etc.
Tips and Tricks:
You can construct your tables in Access and export them to MySQL, then link them back in.
That makes table creation quick.
When creating tables in Access, you must have a primary key defined in order to have write access to the table in access.
Make sure you create a primary key in MySQL before linking in access
If you change a table in MySQL, you have to re-link it in Access.
Go to tools add-ins linked table manager, cruise to your ODBC DSN, and select the table to re-link from there. you can also move your dsn source around there, just hit the always prompt for new location checkbox before pressing OK.
3.
I upgraded to PHP 4, and now mysql keeps telling me "Warning:
MySQL:
Unable to save result set in... ".
What 's up?
Most likely what has happened is, PHP 4 was compiled with the '--with-mysql' option, without specifying the path to MySQL.
This means PHP is using its built-in MySQL client library.
If your system is running applications, such as PHP 3 as a concurrent Apache module, or auth-mysql, that use other versions of MySQL clients, then there is a conflict between the two differing versions of those clients.
Recompiling PHP 4, and adding the path to MySQL to the flag, '--with-mysql= / your / path / to / mysql' usually solves the problem.
4.
After installing shared MySQL support, Apache dumps core as soon as libphp4.so is loaded.
Can this be fixed?
If your MySQL libs are linked against pthreads this will happen.
Check using ldd.
If they are, grab the MySQL tarball and compile from source, or recompile from the source rpm and remove the switch in the spec file that turns on the threaded client code.
Either of these suggestions will fix this.
Then recompile PHP with the new MySQL libs.
5.
Why do I get an error that looks something like this: "Warning:
0 is not a MySQL result index in file on line x "or "Warning:
Supplied argument is not a valid MySQL result resource in file on line x?
You are trying to use a result identifier that is 0.
The 0 indicates that your query failed for some reason.
You need to check for errors after submitting a query and before you attempt to use the returned result identifier.
The proper way to do this is with code similar to the following:
$result = mysql_query( "SELECT * FROM tables_priv"); if (!$result) {echo mysql_error(); exit;}
$result = mysql_query( "SELECT * FROM tables_priv") or die("Bad query: ".mysql_error());
Prev
Home
Next
Obtaining PHP
Up
Installation