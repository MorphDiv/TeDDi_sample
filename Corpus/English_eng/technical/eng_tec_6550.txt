# language_name_wals:	English
# language_name_glotto:	English
# ISO_6393:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	GNOME
# source:	https://object.pouta.csc.fi/OPUS-GNOME/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/GNOME.php
# copyright_long:	http://opus.nlpl.eu/GNOME.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

@@image: 'figures/validator_report.png'; md5=a21bc11a8fc1f8d7976d7ea8a3dc80d2
3. Validator Default Plugin
Testing an application for accessibility
Eitan Isaacson
eitan@ascender.com
Peter Parente
pparent@us.ibm.com
Aline Bessa
alibezz@gmail.com
Creative Commons Share Alike 3.0
AT-SPI Validator Plugin
The AT-SPI Validator Plugin generates a report with accessibility issues related to a target application. For each error, the report includes the severity level and a brief description.
The AT-SPI Validator Plugin generates useful reports for verifying the accessibility of a target application.
Running the AT-SPI Validator Plugin
To run the AT-SPI Validator Plugin, select an item in the Application Tree View. The validator will generate the report with respect to the selected item and all of its descendant widgets in the tree hierarchy.
After selecting an item, choose a validation schema in the combobox and press the
The generated report is interactive. Therefore, you can double-click any error found to check which of the target application widgets is causing it. The corresponding widget will then appear selected in the
If you want to save the generated report in your system, just click the
To get more information about an error in the generated report, make sure the corresponding item is selected and press the
5. Quick Select Plugin
Locating the object you need
Quick Select Plugin
The Quick Select Plugin does not provide a visible interface like the other default
The Quick Select Plugin provides two global hotkeys. Pressing
@@image: 'figures/accerciser_preferences.png'; md5=35df6feb4a5dfc905331b45390783ad5
@@image: 'figures/plugins.png'; md5=aa997acc25c59cf82a788bb8a97f8654
@@image: 'figures/global-hotkeys.png'; md5=e624ecfca646f771d03ea3feed4a5dcb
@@image: 'figures/highlighting.png'; md5=a7eeb359d726fecba85b13b92a41b919
4. Preferences
Customizing
Configuring
To configure plugins, hotkeys, and highlighting, do either


Configuring plugins
After opening the Preferences Dialog, you will find a list of all available plugins, with corresponding checkboxes, under the "Plugins" tab. To enable or disable a plugin, toggle its checkbox. Only active plugins can be accessed via
Right-clicking on any given plugin allows you to choose its location: "Top Panel", "Bottom Panel", and "New View". Selecting "New View" creates a new window for the plugin.
Configuring plugins' preferences

You may bypass the Preferences dialog by using drag and drop to move a plugin from a location to another.
Configuring global hotkeys
Some elements in
Configuring global hotkeys' preferences


Configuring widget's highlighting
Some of
Configuring highlighting preferences

@@image: 'figures/IPython_plugin.png'; md5=4e25a8b12536302b54f4ea31e2d142c9
2. IPython Plugin
When all else fails
IPython Console Plugin
The IPython Console Plugin allows real-time interaction with a selected item in the
Make sure you have the standalone package IPython installed in your system. Otherwise, the IPython Console Plugin will not work properly.
Running the IPython Console Plugin
To run the IPython Console Plugin, select one of the accessible items listed in the Application Tree View - either an application or a widget. In the plugin, the selected item will correspond to the variable 'acc'.
Pressing
Investigating selected items with the IPython Console Plugin
The IPython Console Plugin lets you investigate methods, constants, and properties related to a selected item in the Application Tree View.
Typing
@@image: 'figures/accerciser-view.png'; md5=fe4edcab1458ebe903cc46878c53ee64
1. What is Accerciser?
An interactive accessibility explorer
What is

By default,
Make sure that accessibility suport is enabled in your desktop - otherwise,
Accerciser











More about Accessibility
Accessibility is a core value that should touch all aspects of a Desktop Environment. To help achieve it in GNOME, some libraries were developed, such as ATK and AT-SPI. Though originated in GNOME, these libraries are now also used in other Desktop Environments. To learn more about Accessibility Libraries for GNU/UNIX systems, you can consult:





@@image: 'figures/interface_viewer_plugin.png'; md5=c83c4113369ff2adc756dfd8614a48ed
2. Interface Viewer Plugin
Examining your accessibility implementation
Interface Viewer Plugin
The Interface Viewer Plugin shows the information and controls provided by the AT-SPI interfaces present in each accessible item from the
Examining a Menu with the Interface Viewer Plugin
Given a selected item in the Application Tree View, all of its AT-SPI interfaces will be shown as sensitive in the Interface Viewer Plugin. Those unsupported will appear grayed out, such as the Application and Collection interfaces in the figure above.
Running the Interface Viewer Plugin
The first step to run the Interface Viewer Plugin is to select an item in the
Accessible - This interface shows the selected item's child count (number of child widgets), description, states, relations, and attributes.
Action - This interface shows all the actions that can be performed by the selected item. For each interface, you will see its name, such as "press" or "click", followed by a description and a key binding, if there are any. If you select an action, a "Perform action" button will become sensitive. Press this button to see the item performing the selected action.
Application - This interface can be implemented by items with role "application". It is worth to point out that items with role "application" not necessarily implement this interface. If the selected item implements it, the interface will show its ID and, if there are any, its toolkit and version.
Component - This interface shows the selected item's absolute position (with respect to the desktop coordinate system), relative position (with respect to the window coordinate system), size, layer type, MDI-Z-order (a short integer indicating the stacking order of the component in the MDI layer), and alpha (if alpha blending is used).
Document - This interface shows the selected item's document attributes and locale description, if there is one.
Hypertext - This interface shows a list with all the selected item's hypertext hyperlinks. For each hyperlink, the interface provides its name, URI, start (the index in the hypertext at which the hyperlink begins) and end (the index in the hypertext at which this hyperlink ends).
Image - This interface shows the selected item's description (or "no description" if unspecified), size, position (with respect to the desktop coordinate system), and locale, if there is one.
Selection - This interface shows all selectable child items of the selected item. If the selected item is a menu bar with options "File", "Edit", "View", and "Help", and all of them are selectable, then they will be listed in this interface. If you click a listed option - "File", for example - and want to clear it, just press the "Clear" button below the list.
Streamable Content - This interface shows the selected item's content types and their corresponding URIs.
Table - This interface shows the selected item's caption and summary, rows (number of rows), columns (number of columns), selected rows (number of selected rows), and selected columns (number of selected columns). For a selected cell, the interface shows its row's and column's header and extents.
Text - This interface shows the selected item's text content, that can be editable, and its attributes. The basic attributes are offset (the number of characters the text has) and justification. To see possible CSS attributes, click the "Include defaults" check box.
Value - This interface shows the selected item's current value, minimum allowed value, maximum allowed value, and the minimum increment by which the value may be changed (or zero if this value cannot be determined). The current value can be manually changed via a spin button.
@@image: 'figures/accerciser-logo.png'; md5=ccb260de40944187394405ae163757cf
Introduction to

Before You Begin
Read the
Getting Started
Examining the Accessibility of an Application
Advanced Topics
3. Writing New Plugins
Extending
Writing Plugins for
Extending

Base plugins - These plugins are derived from the Plugin base class. They do not provide a visible interface, but could provide additional functionality to
Console plugins - These plugins provide simple console output into a text area in a plugin tab. Not to be confused with the packaged
Viewport plugins - The majority of
Creating a Base Plugin
We will create a simplified version of the
First off, the import lines we will use are:
from accerciser.plugin import Plugin
 import gtk
 import pyatspi
Next we will derive a new class from the Plugin base class, and assign some mandatory class attributes:
class FocusSelect(Plugin):
 plugin_name = 'Focus Select'
 plugin_description = 'Allows selecting last focused accessible.'
We will now override the init method, in which we will set a global key action for selecting the last focused accessible item, register an event listener for the "focus" event, and set the
def init(self):
 pyatspi.Registry.registerEventListener(self.accEventFocusChanged, 'focus')
 self.global_hotkeys = [('Inspect last focused accessible',
 self.inspectLastFocused,
 gtk.keysyms.e,
 gtk.gdk.CONTROL_MASK | gtk.gdk.MOD1_MASK)]
 self.last_focused = None
Notice that the
In the "focus" event callback, we assign the
def accEventFocusChanged(self, event):
 if not self.isMyApp(event.source):
 self.last_focused = event.source
In the hotkey action callback, we update the application wide node with the last focused accessible item, if we have recorded it:
def inspectLastFocused(self):
 if self.last_focused:
 self.node.update(self.last_focused)
Creating a Console Plugin
We will create a console plugin to display focus changes emitted by an accessible item with a "push button" role - remember that it is easy to check what is the role of any item with
The needed import lines are:
from accerciser.plugin import ConsolePlugin
 import pyatspi
Then we add a class definition, with a plugin name and description:
class PushButtonFocus(ConsolePlugin):
 plugin_name = 'Push Button Focus'
 plugin_description = 'Print event when pushbutton get\\'s focus.'
We override the init method adding a register listener:
def init(self):
 pyatspi.Registry.registerEventListener(self.accEventFocusChanged, 'focus')
In the callback method, all push button events are printed.
def accEventFocusChanged(self, event):
 if event.source.getRole() == pyatspi.ROLE_PUSH_BUTTON:
 self.appendText(str(event)+'\
')
Creating a Viewport Plugin
We will create a viewport plugin that allows quick testing of the "click" action in accessible items that support the AT-SPI Action interface and have an action named "click". It will be a simple button that, once clicked, does the "click" action in the accessible.
First off, some mandatory import lines:
import gtk
 from accerciser.plugin import ViewportPlugin
Next, a class definition, with a name and description:
class Clicker(ViewportPlugin):
 plugin_name = 'Clicker'
 plugin_description = 'Test the "click" action in relevant accessibles.'
We override the init method with some UI building, and connecting a callback to a signal for the button. We use the alignment container to allow the button to be centered in the plugin tab, and not monstrously take up the entire plugin space. Notice that the
def init(self):
 alignment = gtk.Alignment(0.5,0.5,0,0)
 self.click_button = gtk.Button('Click me!')
 alignment.add(self.click_button)
 self.plugin_area.add(alignment)

 self.click_button.connect('clicked', self.onClick)

 self.show_all()
We also created a convenience method that returns a list of supported actions of the currently selected accessible item - if it does not support the Action interface, it returns an empty list:
def accSupportedActions(self):
 try:
 ai = self.node.acc.queryAction()
 except NotImplementedError:
 action_names = []
 else:
 action_names = [ai.getName(i) for i in xrange(ai.nActions)]
 return action_names
The base plugin class has a method call onAccChanged that is called everytime the target application's selected accessible item changes. We will override it setting the button to be sensitive only when the current accessible item has the "click" action:
def onAccChanged(self, acc):
 has_click = 'click' in self.accSupportedActions()
 self.click_button.set_sensitive(has_click)
The callback method for button "clicked" performs the "click" action on the accessible item. Since this callback could only be called when the button is sensitive, we don't need to worry about checking if the current accessible has the "click" action?
def onClick(self, button):
 ai = self.node.acc.queryAction()
 action_names = [ai.getName(i) for i in xrange(ai.nActions)]
 ai.doAction(action_names.index('click'))
2. How to install and run
Setting up
Installing and running
Check if your distribution has
Installing
To install
If you are not using GNOME 3, you may find that
After getting
cd accerciser
./autogen.sh # or ./configure for first time installation
make
sudo make install # or make install as root
If you find any problems installing
Running
To start
After that, you can use
@@image: 'figures/event_monitor_plugin.png'; md5=1ee2a1d281deefa5b401244b49ed9654
4. Event Monitor Plugin
Monitoring accessible events as they occur
Event Monitor Plugin
The Event Monitor Plugin allows you to view
The Event Monitor Plugin allows you to view AT-SPI events and match them with accessible widgets.
Running the Event Monitor Plugin
When you open the Event Monitor Plugin, you see a list of checkboxes representing all the different AT-SPI event classes covered by the plugin:
document
focus
mouse
object
terminal
window
If you check a class, all of its event types will be monitored by the plugin. The classes are exposed as tree structures; therefore, you can refine your selection by expanding them and checking only the event types you really care about.
If you want to monitor all possible types of AT-SPI events, press the
Selecting only a few event types per monitoring gives you a clearer output.
Another way to refine event monitoring is by the event source. By default, the Source option
After selecting event types and specifying a Source option, the Event Monitor Plugin starts monitoring AT-SPI events automatically, because the
For each incoming event, the Event Monitor Plugin indicates the source and the application. Activating the link for either of these items will cause it to become selected in the Application Tree View.
If you want to save the output generated by the Event Monitor Plugin, just press the
@@image: 'figures/tree_view_accerciser.png'; md5=08296541e21b96951e1f1b4d99ca130b
1. Application Tree View
Exploring the accessible hierarchy of the desktop
Application Tree View


The first node of each application represented in this tree view is the application itself. When you expand a node, you can see all of its child widgets, which allows a hierarchical view of the application's interface. For each node,
Be aware that nodes with many children take a long time to expand.
Bookmarking items in the Application Tree View

Bookmarks to accessible items in
@@image: 'figures/api_browser.png'; md5=47cae67d29c708139b9740d06fd2521e
1. API Browser Plugin
Verifying interfaces, methods, and properties
API Browser Plugin
Given an accessible widget selected in the
The API Browser Plugin allows you to verify interfaces, methods, and properties of a target accessible widget in an application.
Running the API Browser Plugin
To run the API Browser Plugin, select an accessible widget in the Application Tree View. Double-clicking a widget highlights it in the application's interface, so you can be sure whether a certain widget were the one you were looking for.
After that, select one of the widget's interfaces in the combobox. All public methods of the selected interface will be listed in the plugin's leftmost column. All public properties, with their corresponding values, will be listed in the plugin's rightmost column.
By default, the API Browser Plugin hides private methods and properties. To see them listed, unselect the checkbox
translator-credits