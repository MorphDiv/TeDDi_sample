# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Next
(PHP 4)
This function implements a sort algorithm that orders alphanumeric strings in the way a human being would.
This is described as a "natural ordering".
An example of the difference between this algorithm and the regular computer string sorting algorithms (used in sort()) can be seen below:
Example 1. natsort() example
?php $array1 = $array2 = array ("img12.png", "img10.png", "img2.png", "img1.png"); sort($array1); echo "Standard sorting\n"; print_r($array1); natsort($array2); echo "\nNatural order sorting\n"; print_r($array2);?
The code above will generate the following output:
Standard sorting Array ([0] = img1.png [1] = img10.png [2] = img12.png [3] = img2.png) Natural order sorting Array ([3] = img1.png [2] = img2.png [1] = img10.png [0] = img12.png)
Note:
If you' re wanting to maintain index / value associations, consider using usort($arr, 'strnatcmp').
See also natcasesort(), strnatcmp(), and strnatcasecmp().
Prev
Home
Next
natcasesort
Up
next