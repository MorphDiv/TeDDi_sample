# language_name_wals:	English
# language_name_glotto:	English
# ISO_6393:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	OpenOffice
# source:	https://object.pouta.csc.fi/OPUS-OpenOffice/v3/raw/en_GB.zip
# copyright_short:	http://opus.nlpl.eu/OpenOffice.php
# copyright_long:	http://opus.nlpl.eu/OpenOffice.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Using Procedures and Functions
/text/sbasic/shared/01020300.xhp
procedures
functions;using
variables;passing to procedures and functions
parameters;for procedures and functions
parameters;passing by reference or value
variables;scope
scope of variables
GLOBAL variables
PUBLIC variables
PRIVATE variables
functions;return value type
return value type of functions
Using Procedures and Functions
The following describes the basic use of procedures and functions in $[officename] Basic.
When you create a new module, $[officename] Basic automatically inserts a SUB called &quot; Main &quot; .
This default name has nothing to do with the order or the starting point of a $[officename] Basic project.
You can also safely rename this SUB.
Procedures (SUBS) and functions (FUNCTIONS) help you maintain a structured overview by separating a program into logical pieces.
One benefit of procedures and functions is that, once you have developed a program containing task components, you can use this code in another project.
Passing Variables to Procedures (SUB) and Functions (FUNCTION)
Variables can be passed to both procedures and functions.
The SUB or FUNCTION must be declared to expect parameters:
Parameter1 As Type, Parameter2 As Type,...
)
Program code
END SUB
The SUB is called using the following syntax:
SubName(Value1, Value2,...)
The parameters passed to a SUB must fit to those specified in the SUB declaration.
The same process applies to FUNCTIONS.
In addition, functions always return a function result.
The result of a function is defined by assigning the return value to the function name:
FUNCTION FunctionName(Parameter1 As Type, Parameter2 As Type,...) As Type
Program code
FunctionName=Result
End Function
The FUNCTION is called using the following syntax:
Variable=FunctionName(Parameter1, Parameter2,...)
Library.Module.Macro()
For example, to call the Autotext macro from the Gimmicks library, use the following command:
Gimmicks.AutoText.Main()
Passing Variables by Value or Reference
Parameters can be passed to a SUB or a FUNCTION either by reference or by value.
Unless otherwise specified, a parameter is always passed by reference.
That means that a SUB or a FUNCTION gets the parameter and can read and modify its value.
If you want to pass a parameter by value insert the key word &quot; ByVal &quot; in front of the parameter when you call a SUB or FUNCTION, for example:
ByVal
Parameter)
In this case, the original content of the parameter will not be modified by the FUNCTION since it only gets the value and not the parameter itself.
Scope of Variables
A variable defined within a SUB or FUNCTION, only remains valid until the procedure is exited.
This is known as a &quot; local &quot; variable.
In many cases, you need a variable to be valid in all procedures, in every module of all libraries, or after a SUB or FUNCTION is exited.
Declaring Variables Outside a SUB or FUNCTION
GLOBAL VarName As TYPENAME
The variable is valid as long as the $[officename] session lasts.
PUBLIC VarName As TYPENAME
The variable is valid in all modules.
PRIVATE VarName As TYPENAME
The variable is only valid in this module.
DIM VarName As TYPENAME
The variable is only valid in this module.
Example for private variables
Enforce private variables to be private across modules by setting CompatibilityMode(true).
from i17948, see i54894
REM ***** Module1 *****
Private myText As String
Sub initMyText
myText = &quot; Hello &quot;
print &quot; in module1 : &quot; , myText
End Sub
REM ***** Module2 *****
'Option Explicit
Sub demoBug
CompatibilityMode( true )
initMyText
' Now returns empty string
' (or rises error for Option Explicit)
print &quot; Now in module2 : &quot; , myText
End Sub
Saving Variable Content after Exiting a SUB or FUNCTION
STATIC VarName As TYPENAME
The variable retains its value until the next time the FUNCTION or SUB is entered.
The declaration must exist inside a SUB or a FUNCTION.
Specifying the Return Value Type of a FUNCTION
As with variables, include a type-declaration character after the function name, or the type indicated by &quot; As &quot; and the corresponding key word at the end of the parameter list to define the type of the function's return value, for example:
as Integer