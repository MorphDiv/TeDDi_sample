# language_name_wals:	English
# language_name_glotto:	English
# ISO_6393:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns the current key and value pair from the array array and advances the array cursor.
This pair is returned in a four-element array, with the keys 0, 1, key, and value.
Elements 0 and key contain the key name of the array element, and 1 and value contain the data.
If the internal pointer for the array points past the end of the array contents, each() returns FALSE.
Example 1. each() examples
$foo = array ("bob", "fred", "jussi", "jouni", "egon", "marliese"); $bar = each ($foo);
$bar now contains the following key / value pairs:
$foo = array ("Robert "= "Bob", "Seppo" = "Sepi"); $bar = each ($foo);
$bar now contains the following key / value pairs:
each() is typically used in conjunction with list() to traverse an array; for instance, $_POST:
Example 2.
Traversing $_POST with each()
echo "Values submitted via POST method: br / \n"; reset ($_POST); while (list ($key, $val) = each ($_POST)) {echo "$key = $val br / \n";}
After each() has executed, the array cursor will be left on the next element of the array, or on the last element if it hits the end of the array.
You have to use reset() if you want to traverse the array again using each.
See also key(), list(), current(), reset(), next(), prev(), and foreach.
Prev
Home
Next
current
Up
end