# language_name_wals:	English
# language_name_glotto:	English
# ISO_6393:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Chapter 2.
A simple tutorial
Next
Let 's do something a bit more useful now.
We are going to check what sort of browser the person viewing the page is using.
In order to do that we check the user agent string that the browser sends as part of its HTTP request.
This information is stored in a variable.
Variables always start with a dollar-sign in PHP.
The variable we are interested in right now is $_SERVER[ "HTTP_USER_AGENT"].
It' s known as an Autoglobal (or Superglobal).
See the related manual page on Autoglobals for more information.
These special variables were introduced in PHP 4.1.0.
Before this time, we used the older $HTTP_*_VARS arrays instead, such as $HTTP_SERVER_VARS.
Although deprecated, these older variables still exist. (See also the note on old code.)
To display this variable, we can simply do:
Example 2-2.
Printing a variable (Array element)
?php echo $_SERVER[ "HTTP_USER_AGENT"];?
A sample output of this script may be:
Mozilla / 4.0 (compatible; MSIE 5.01; Windows NT 5.0)
There are many types There are many types of variables available in PHP.
In the above example we printed an Array In the above example we printed an Array element.
Arrays can be very useful.
$_SERVER is just one variable that 's automatically made available to you by PHP.
A list can be seen in the Reserved Variables section of the manual or you can get a complete list of them by creating a file that looks like this:
Example 2-3.
Show all predefined variables with phpinfo()
?php phpinfo();?
If you load up this file in your browser you will see a page full of information about PHP along with a list of all the variables available to you.
You can put multiple PHP statements inside a PHP tag and create little blocks of code that do more than just a single echo.
For example, if we wanted to check for Internet Explorer we could do something like this:
Example 2-4.
Example using control structures and functions
?php if (strstr($_SERVER["HTTP_USER_AGENT"], "MSIE")) {echo "You are using Internet Explorer br / ";}?
A sample output of this script may be:
You are using Internet Explorer br /
Here we introduce a couple of new concepts.
We have an if statement.
If you are familiar with the basic syntax used by the C language this should look logical to you.
If you don' t know enough C or some other language where the syntax used above is used, you should probably pick up any introductory PHP book and read the first couple of chapters, or read the Language Reference If you don't know enough C or some other language where the syntax used above is used, you should probably pick up any introductory PHP book and read the first couple of chapters, or read the Language Reference part of the manual.
You can find a list of PHP books at http: / /www.php.net / books.php.
The second concept we introduced was the strstr() function call. strstr() is a function built into PHP which searches a string for another string.
In this case we are looking for "MSIE" inside $_SERVER["HTTP_USER_AGENT"].
If the string is found, the function returns TRUE and if it isn 't, it returns FALSE.
If it returns TRUE, the if statement evaluates to TRUE If it returns TRUE, the if statement evaluates to TRUE and the code within its {braces} is executed.
Otherwise, it 's not.
Feel free to create similar examples, with if, else, and other functions such as strtoupper() and strlen().
Each related manual page contains examples too.
We can take this a step further and show how you can jump in and out of PHP mode even in the middle of a PHP block:
Example 2-5.
Mixing both HTML and PHP modes
?php if (strstr($_SERVER["HTTP_USER_AGENT"], "MSIE")) {? h3 strstr must have returned true / h3 center b You are using Internet Explorer / b / center ?php} else {? h3 strstr must have returned false / h3 center b You are not using Internet Explorer / b / center ?php}?
A sample output of this script may be:
h3 strstr must have returned true / h3 center b You are using Internet Explorer / b / center
Instead of using a PHP echo statement to output something, we jumped out of PHP mode and just sent straight HTML.
The important and powerful point to note here is that the logical flow of the script remains intact.
Only one of the HTML blocks will end up getting sent to the viewer depending on if strstr() returned TRUE or FALSE In other words, if the string MSIE was found or not.
Prev
Home
Next
Your first PHP-enabled page
Up
Dealing with Forms