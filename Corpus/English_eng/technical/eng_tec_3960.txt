# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Next
(PHP 3, PHP 4)
mysql_field_type() is similar to the mysql_field_name() function.
The arguments are identical, but the field type is returned instead.
The field type will be one of "int", "real", "string", "blob", and others as detailed in the MySQL documentation.
Example 1.
MySQL field types
?php mysql_connect( "localhost", "mysql_username", "mysql_password"); mysql_select_db("mysql"); $result = mysql_query("SELECT * FROM func"); $fields = mysql_num_fields($result); $rows = mysql_num_rows($result); $table = mysql_field_table($result, 0); echo "Your '".$table ." 'table has ".$fields. "fields and ".$rows." record(s)\n"; echo "The table has the following fields:\n"; for ($i=0; $i $fields; $i++) {$type = mysql_field_type($result, $i); $name = mysql_field_name($result, $i); $len = mysql_field_len($result, $i); $flags = mysql_field_flags($result, $i); echo $type. "".$name." ".$len. "".$flags ."\n";} mysql_free_result($result); mysql_close();?
The above example would produce the following output:
Your 'func' table has 4 fields and 1 record(s) The table has the following fields: string name 64 not_null primary_key binary int ret 1 not_null string dl 128 not_null string type 9 not_null enum
For downward compatibility mysql_fieldtype() can also be used.
This is deprecated, however.
Prev
Home
Next
mysql_field_table
Up
mysql_free_result