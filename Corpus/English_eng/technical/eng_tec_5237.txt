# language_name_wals:	English
# language_name_glotto:	English
# ISO_6393:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Chapter 14.
Classes and Objects
Next
You may find yourself writing code that refers to variables and functions in base classes.
This is particularly true if your derived class is a refinement or specialisation of code in your base class.
Instead of using the literal name of the base class in your code, you should be using the special name parent, which refers to the name of your base class as given in the extends Instead of using the literal name of the base class in your code, you should be using the special name parent, which refers to the name of your base class as given in the extends declaration of your class.
By doing this, you avoid using the name of your base class in more than one place.
Should your inheritance tree change during implementation, the change is easily made by simply changing the extends declaration of your class.
class A {function example() {echo "I am A::example() and provide basic functionality. br \n";}} class B extends A {function example() {echo "I am B::example() and provide additional functionality. br \n"; parent::example();}} $b = new B; / / This will call B::example(), which will in turn call A::example(). $b - example();
Prev
Home
Next
::
Up
Serializing objects - objects in sessions