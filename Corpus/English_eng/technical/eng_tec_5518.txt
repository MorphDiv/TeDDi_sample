# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Chapter 26.
Source Layout
Next
Resource management is a crucial issue, especially in server software.
One of the most valuable resources is memory, and memory management should be handled with extreme care.
Memory management has been partially abstracted in Zend, and you should stick to this abstraction for obvious reasons:
Due to the abstraction, Zend gets full control over all memory allocations.
Zend is able to determine whether a block is in use, automatically freeing unused blocks and blocks with lost references, and thus prevent memory leaks.
The functions to be used are described in the following table:
Function
Description
emalloc()
Serves as replacement for malloc().
efree()
Serves as replacement for free().
estrdup()
Serves as replacement for strdup().
estrndup()
Serves as replacement for strndup().
Faster than estrdup() and binary-safe.
This is the recommended function to use if you know the string length prior to duplicating it.
ecalloc()
Serves as replacement for calloc().
erealloc()
Serves as replacement for realloc().
Warning
To allocate resident memory that survives termination of the current script, you can use malloc() and free().
This should only be done with extreme care, however, and only in conjunction with demands of the Zend API; otherwise, you risk memory leaks.
Prev
Home
Next
Macros
Up
Directory and File Functions