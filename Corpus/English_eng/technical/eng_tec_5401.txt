# language_name_wals:	English
# language_name_glotto:	English
# ISO_6393:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Next
Note:
PHP also supports regular expressions using a Perl-compatible syntax using the PCRE functions.
Those functions support non-greedy matching, assertions, conditional subpatterns, and a number of other features not supported by the POSIX-extended regular expression syntax.
Warning
These regular expression functions are not binary-safe.
The PCRE functions are.
Regular expressions are used for complex string manipulation in PHP.
The functions that support regular expressions are:
ereg()
ereg_replace()
eregi()
eregi_replace()
split()
spliti()
No external libraries are needed to build this extension.
To enable regexp support configure PHP --with-regex[ =TYPE].
TYPE can be one of system, apache, php.
The default is to use php.
Note:
Do not change the TYPE unless you know what you are doing.
The windows version of PHP The windows version of PHP has built in support for this extension.
You do not need to load any additional extension in order to use these functions.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
This extension has no constants defined.
Example 1.
Regular Expression Examples
ereg ("abc", $string); / * Returns true if"abc "is found anywhere in $string. * / ereg ("^abc", $string); / * Returns true if "abc"; is found at the beginning of $string. * / ereg ("abc$", $string); / * Returns true if "abc" is found at the end of $string. * / eregi ("(ozilla .[23]|MSIE.3)", $HTTP_USER_AGENT); / * Returns true if client browser is Netscape 2, 3 or MSIE 3. * / ereg ("([[:alnum :]]+) ([[:alnum :]]+) ([[:alnum :]]+)", $string,$regs); / * Places three space separated words into $regs[1], $regs[2] and $regs[3]. * / $string = ereg_replace ("^", "br /", $string); / * Put a br / tag at the beginning of $string. * / $string = ereg_replace ("$", "br /", $string); / * Put a br /; tag at the end of $string. * / $string = ereg_replace ("\n", "", $string); / * Get rid of any newline characters in $string. * /
For regular expressions in Perl-compatible syntax have a look at the PCRE functions.
The simpler shell style wildcard pattern matching is provided by fnmatch().
Prev
Home
Next
qdom_tree
Up
ereg_replace