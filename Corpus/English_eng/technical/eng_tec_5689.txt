# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	KDE4
# source:	https://object.pouta.csc.fi/OPUS-KDE4/v2/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/KDE4.php
# copyright_long:	http://opus.nlpl.eu/KDE4.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Watches
Recent
Debugger stopped
Application interrupted
Process exited
Application is running
Application is paused
GDB exited abnormallyThis is likely a bug in GDB. Examine the gdb output window and then stop the debugger
GDB exited abnormally
Gdb command sent when debugger is not running The command was: %1
Internal error
Invalid debugger command %1
Invalid debugger command
Exited normally
Exited on signal %1
Program received signal %1 (%2)
Running program
GDB cannot use the tty* or pty* devices. Check the settings on / dev/ tty* and / dev/ pty* As root you may need to "chmod ug+rw" tty* and pty* devices and/ or add the user to the tty group using "usermod -G tty username".
Warning
Application does not existThe application you are trying to debug, %1 does not exist. Check that you have specified the right application in the debugger configuration.
Application does not exist
Could not run application '%1 '. The application does not have the executable bit set. Try rebuilding the project, or change permissions manually.
Could not run application
Debugger errorDebugger reported the following error: %1
Debugger error
Debugger state: %1
Current command class: '%1 'Current command text: '%2' Current command original text: '%3 '
Debugger status
You need gdb 7.0.0 or higher. You are using: %1
gdb error
Machine code displayA machine code view into your running executable with the current instruction highlighted. You can step instruction by instruction using the debuggers toolbar buttons of "step over" instruction and "step into" instruction.
Disassemble View
Address
Function
Offset
Instruction
Could not locate the debugging shell '%1 '.
Debugging Shell Not Found
The debugger component encountered internal error while processing reply from gdb. Please submit a bug report.
The exception is: %1 The MI response is: %2
Internal debugger error
Could not start debugger. Could not run '%1 '. Make sure that the path name is specified correctly.
Could not start debugger
GDB Output
GDB output Shows all gdb commands being executed. You can also issue any other gdb command while debugging.
& GDB cmd:
Pause execution of the app to enter gdb commands
Show Internal Commands
Controls if commands issued internally by KDevelop will be shown or not. This option will affect only future commands, it will not add or remove already issued commands from the view.
Copy All
Select Core File
Attach to a process
Debugger Configuration
Debugger executable:
Gdb executable
To run "gdb" binary from $PATH, leave this field empty. To run custom gdb, for example, for a different architecture, enter the executable name here. You can either run gdb from $PATH, but with a different name (say, "arm-gdb"), by typing the name here, or specify full path to the gdb executable.
Run gdb in a special shell (mainly for automake projects)
If you want gdb to be executed by a special shell or tool insert it here. The main use-case is for Automake based projects where the application is actually only a script and libtool is needed to get it to run inside gdb.
Debugging & shell:
If you want gdb to be executed by a special shell or tool insert it here. The main use-case is for Automake based projects where the application is actually only a script and libtool is needed to get it to run inside gdb.
Options
Displaying static members makes GDB slower in producing data within KDE and Qt. It may change the "signature" of the data which QString and friends rely on, but if you need to debug into these values then check this option.
Display static & members
When displaying the disassembled code you can select to see the methods' mangled names. However, non-mangled names are easier to read.
Display & demangled names
If GDB has not seen a library that will be loaded via "dlopen" then it will refuse to set a breakpoint in that code. With this option, GDB will stop on a library load and hence try to set the pending breakpoints. See the documentation for more details relating to this behavior. If you are not "dlopen"ing libs then leave this unchecked.
Try setting & breakpoints on library loading
Use the floating toolbar. This toolbar always stays on top of all windows so that if the app covers KDevelop you have control of the app through the small toolbar. It can also be docked into the panel. This toolbar is in addition to the toolbar in KDevelop.
Enable floating toolbar
This allows you to enter terminal input when your application contains terminal input code (e. g. cin, fgets, etc.). If you use terminal input in your application then check this option. Otherwise leave it unchecked.
Enable separate terminal for application & IO
This script is intended for the actual commands needed to connect to a remotely running executable. shell sleep 5 wait for remote program to start target remote... connect to the remote debugger continue [optional] run debugging to the first breakpoint
Remote Debugging
& Config gdb script:
Gdb configure script
This script is sourced by gdb when the debugging starts.
Run shell script:
Script to start remote application
This shell script is run after the Config gdb script has been sourced by gdb. When debugging remotely this script is intended to actually start the remote process. [It is expected that the debug executable can be reached on the target, maybe by downloading it as a final build step] 1) Find a way to execute a command remotely - rsh, ssh, telnet,... 2a) Execute "gdbserver... application" on target. or if your executable contains the gdb stub 2b) Execute "application" on target.
Run & gdb script:
Script to connect with remote application
This script is sourced by gdb after the two preceding scripts have been executed. This script is intended for the actual commands needed to connect to a remotely running executable. shell sleep 5 wait for remote program to start target remote... connect to the remote debugger continue [optional] run debugging to the first breakpoint.
Tracing Configuration
Enable tracing Tracing is a mechanism to automatically print values of the chosen expressions and continue execution when breakpoint is hit. You can think of it as printf debugging that does not require modifying the source.
Enable tracing
Cancel
Custom format string
OK
Custom format string Specify a C-style format string that will be used when printing the chosen expression. For example: Tracepoint 1: g = %d If custom format string is not enabled, names and values of all expressions will be printed, using "%d" as format specifier for all expressions.
Expressions to print:
Run
Debugger Toolbar
Executable:
Core File:
Your names
Your emails
Start
Amount
Memory view
Change memory range
Reload
Close this view
Special debugger views
GDB Configuration
GDB
Executes a Native application in GDB
No environment group specified, looks like a broken configuration, please check run configuration '%1 '. Using default environment group.
Old value: %1
New value: %1
GDB Support
Support for running apps in GDB
Disassemble
Debug views
Viewers
Debugger viewers
Debugger viewersVarious information about application being executed. There are 4 views available: MemoryDisassembleRegistersLibraries
Examine Core File...
Examine core file
Examine core file This loads a core file, which is typically created after the application has crashed, e. g. with a segmentation fault. The core file contains an image of the program memory at the time it crashed, allowing you to do a post-mortem analysis.
Attach to Process
Attach to process...
Attach to process Attaches the debugger to a running process.
KDevelop
Evaluate: %1
Evaluate expression Shows the value of the expression under the cursor.
Watch: %1
Watch expression Adds an expression under the cursor to the Variables/ Watch list.
Choose a core file to examine...
Examining core file %1
Choose a process to attach to...
Not attaching to process %1: cannot attach the debugger to itself.
Attaching to process %1
Debugger
kdevelop: Debug application console