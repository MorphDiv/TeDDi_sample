# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	KDE4
# source:	https://object.pouta.csc.fi/OPUS-KDE4/v2/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/KDE4.php
# copyright_long:	http://opus.nlpl.eu/KDE4.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Parsing of formula in cell %1 failed.
Australia
Dollar
Canada
Caribbean
New Zealand
United States
Austria
Euro
Belgium
Cyprus
Finland
France
Germany
Greece
Ireland
Italy
Luxembourg
Malta
Monaco
Netherlands
Portugal
San Marino
Slovakia
Slovenia
Spain
United Kingdom
Pound
Japan
Yen
Afghanistan
Afghani (old)
AFA
Afghani
AFN
Albania
Lek
Algeria
Algerian Dinar
DZD
American Samoa
US Dollar
USD
Andorra
EUR
Andorran Peseta
ADP
Angola
Kwanza
AOA
Anguilla
East Caribbean Dollar
XCD
Antigua And Barbuda
East Carribean Dollar
Argentina
Argentine Peso
ARS
Armenia
Armenian Dram
AMD
Aruba
Aruban Florin
AWG
Australian Dollar
AUD
Schilling
S
Azerbaijan
Azerbaijanian Manat
AZM
Bahamas
Bahamian Dollar
BSD
Bahrain
Bahraini Dinar
BHD
Bangladesh
Taka
BDT
Barbados
Barbados Dollar
BBD
Belarus
Belarusian Ruble
p.
Franc
BF
Belize
Belize Dollar
BZ$
Benin
CFA Franc BCEAO
XOF
Bermuda
Bermudian Dollar
BMD
Bhutan
Indian Rupee
INR
Ngultrum
BTN
Bolivia
Boliviano
Bs
Mvdol
BOV
Bosnia And Herzegovina
Convertible Marks
BAM
Botswana
Pula
BWP
Bouvet Island
Norwegian Krone
NOK
Brazil
Brazilian Real
R$
British Indian Ocean Territory
Brunei Darussalam
Brunei Dollar
BND
Bulgaria
Lev
BGL
Bulgarian Lev
BGN
Burkina Faso
Burundi
Burundi Franc
BIF
Cambodia
Riel
KHR
Cameroon
CFA Franc BEAC
XAF
Canadian Dollar
CAD
Cape Verde
Cape Verde Escudo
CVE
Cayman Islands
Cayman Islands Dollar
KYD
Central African Republic
Chad
Chile
Chilean Peso
Ch$
Unidades de fomento
CLF
China
Yuan Renminbi
CNY
Christmas Island
Cocos (Keeling) Islands
Colombia
Colombian Peso
C$
Comoros
Comoro Franc
KMF
Congo
Congo, The Democratic Republic Of
Franc Congolais
CDF
Cook Islands
New Zealand Dollar
NZD
Costa Rica
Costa Rican Colon
C
Cote D'Ivoire
Croatia
Croatian kuna
kn
Cuba
Cuban Peso
CUP
Cyprus Pound
CYP
Czech Republic
Czech Koruna
Kc
Denmark
Danish Krone
kr
Djibouti
Djibouti Franc
DJF
Dominica
RD$
Dominican Republic
Dominican Peso
DOP
East Timor
Timor Escudo
TPE
Ecuador
Egypt
Egyptian Pound
EGP
El Salvador
El Salvador Colon
Equatorial Guinea
Eritrea
Nakfa
ERN
Estonia
Kroon
Ethiopia
Ethiopian Birr
ETB
Falkland Island (Malvinas)
Falkland Islands Pound
FKP
Faeroe Islands
Fiji
Fiji Dollar
FJD
Markka
mk
F
French Guiana
French Polynesia
CFP Franc
XPF
Franc Southern Territories
Gabon
Gambia
Dalasi
GMD
Georgia
Lari
GEL
German Mark
DM
Ghana
Cedi
GHC
Gibraltar
Gibraltar Pound
GIP
Drachma
GRD
Greenland
DKK
Grenada
Guadeloupe
Guam
Guatemala
Quetzal
Q
Guinea
Guinea Franc
GNF
Guinea-Bissau
Guinea-Bissau Peso
GWP
Guyana
Guyana Dollar
GYD
Haiti
Gourde
HTG
Heard Island And McDonald Islands
Holy See (Vatican City State)
Honduras
Lempira
L
Hong Kong
Hong Kong Dollar
HKD
Hungary
Forint
Ft
Iceland
Iceland Krona
kr.
India
Indonesia
Rupiah
Rp
Iran, Islamic Republic Of
Iranian Rial
IRR
Iraq
Iraqi Dinar
IQD
Punt
IR----
Pence
IEX
Israel
New Israeli Sheqel
ILS
Lira
L.
Jamaica
Jamaican Dollar
J$
JPY
Jordan
Jordanian Dinar
JOD
Kazakhstan
Tenge
KZT
Kenya
Kenyan Shilling
KES
Kiribati
Korea, Democratic People's Republic Of
North Korean Won
KPW
Korea, Republic Of
Won
KRW
Kuwait
Kuwaiti Dinar
KWD
Kyrgyzstan
Som
KGS
Lao People's Democratic Republic
Kip
LAK
Latvia
Latvian Lats
Ls
Lebanon
Lebanese Pound
LBP
Lesotho
Rand
ZAR
Loti
LSL
Liberia
Liberian Dollar
LRD
Libyan Arab Jamahiriya
Lybian Dinar
LYD
Liechtenstein
Swiss Franc
CHF
Lithuania
Lithuanian Litus
Lt
Macao
Pataca
MOP
Macedonia, The Former Yugoslav Republic Of
Denar
MKD
Madagascar
Malagasy Franc
MGF
Malawi
Kwacha
MWK
Malaysia
Malaysian Ringgit
MYR
Maldives
Rufiyaa
MVR
Mali
EURO
Maltese Lira
MTL
Marshall Islands
Martinique
Mauritania
Ouguiya
MRO
Mauritius
Mauritius Rupee
MUR
Mayotte
Mexico
Mexican Peso
MXN
Mexican Unidad de Inversion (UDI)
MXV
Micronesia, Federated States Of
Moldova, Republic Of
Moldovan Leu
MDL
Mongolia
Tugrik
MNT
Montserrat
Morocco
Moroccan Dirham
MAD
Mozambique
Metical
MZM
Myanmar
Kyat
MMK
Namibia
Namibia Dollar
NAD
Nauru
Nepal
Nepalese Rupee
NPR
Guilder
fl
Netherlands Antilles
Netherlands Antillean Guilder
ANG
New Caledonia
Nicaragua
Cordoba Oro
NIO
Niger
Nigeria
Naira
NGN
Niue
Norfolk Islands
Northern Mariana Islands
Norway
Oman
Rial Omani
OMR
Pakistan
Pakistan Rupee
PKR
Palau
Panama
Balboa
PAB
Papua New Guinea
Kina
PGK
Paraguay
Guarani
G
Peru
Nuevo Sol
PEN
Philippines
Philippine Peso
PHP
Pitcairn
Poland
Zloty
zt
Escudo
Esc.
Puerto Rico
Qatar
Qatari Rial
QAR
Romania
Leu
LEI
Russian Federation
Russian Ruble
RUR
RUB
Rwanda
Rwanda Franc
RWF
Saint Helena
Saint Helena Pound
SHP
Saint Kitts And Nevis
Saint Lucia
Saint Pierre And Miquelon
Saint Vincent And The Grenadines
Samoa
Tala
WST
Sao Tome And Principe
Dobra
STD
Saudi Arabia
Saudi Riyal
SAR
Senegal
Seychelles
Seychelles Rupee
SCR
Sierra Leone
Leone
SLL
Singapore
Singapore Dollar
SGD
Slovak Koruna
Sk
Tolar
SIT
Solomon Islands
Solomon Islands Dollar
SBD
Somalia
Somali Shilling
SOS
South Africa
R
Peseta
Pts
Sri Lanka
Sri Lanka Rupee
LKR
Sudan
Sudanese Dinar
SDD
Suriname
Suriname Guilder
SRG
Svalbard And Jan Mayen
Swaziland
Lilangeni
SZL
Sweden
Swedish Krona
Switzerland
SFr.
Syrian Arab Republic
Syrian Pound
SYP
Taiwan, Province Of China
New Taiwan Dollar
TWD
Tajikistan
Somoni
TJS
Tanzania, United Republic Of
Tanzanian Shilling
TZS
Thailand
Baht
THB
Togo
Tokelau
Tonga
Pa'anga
TOP
Trinidad And Tobago
Trinidad and Tobago Dollar
TT$
Tunisia
Tunisian Dinar
TND
Turkey
Turkish Lira
TL
Turkmenistan
Manat
TMM
Turks And Caicos Islands
Tuvalu
Uganda
Uganda Shilling
UGX
Ukraine
Hryvnia
UAH
United Arab Emirates
UAE Dirham
AED
Pound Sterling
GBP
US Dollar (Next day)
USN
US Dollar (Same day)
USS
Uruguay
Peso Uruguayo
NU$
Uzbekistan
Uzbekistan Sum
UZS
Vanuatu
Vatu
VUV
Venezuela
Bolivar
Viet Nam
Dong
VND
Virgin Islands
Wallis And Futuna
Western Sahara
Yemen
Yemeni Rial
YER
Yugoslavia
Yugoslavian Dinar
YUM
Zambia
ZMK
Zimbabwe
Zimbabwe Dollar
ZWD
Text
Whole number (like 1, 132, 2344)
A truth value (TRUE or FALSE)
A floating point value (like 1.3, 0.343, 253)
Any kind of value
A range of strings
A range of whole numbers (like 1, 132, 2344)
A range of truth values (TRUE or FALSE)
A range of floating point values (like 1.3, 0.343, 253)
A range of any kind of values
Return type: %1
Syntax
Parameters
Comment: %1
Type: %1
Examples
Related Functions
Sheet%1
This document has no sheets (tables).
Navigate in the text by left/ right arrow keys in the cell editor.
If true, you can navigate by left/ right arrows in the cell editor. Otherwise, the editing mode will be left.
& File
& Edit
Fill
Clear
Delete
& View
& Insert
& External Data
Format
Merge Cells
& Row
& Column
& Sheet
& Print Range
& Data
Filter
& Tools
& Settings
Edit
Navigation
Font
Format
Color/ Border
Your names
Your emails
Database Selector
Data Area
Area:
First row as label
First column as label
Data Format
Data sets in rows
Data sets in columns
Preview
Time
Date
Fraction
Currency
Money
Percent
Generic
Number
Date and Time
Currency:
Format:
Postfix:
Precision:
Prefix:
You can select here the font style, size and color, including some additional options like underlined or stroke out text for the current cell text. The lower part of the page gives a preview of the selected text format. The default font is set for all cells in the Format - > Style Manager menu with the currently used style.
Choose the style for your font for the currently selected cells. When you select several cells with different styles, the displayed style is set to Varying (No Change) and leaving it that way will keep all your current style settings for each cell. Changing to Roman for example will change all the selected cells style text to Roman.
Varying (No Change)
Roman
Italic
Choose the weight for your font for the currently selected cells. When you select several cells with different font weight, the displayed weight is set to Varying (No Change) and leaving it that way will keep all your current weight settings for each cell. Changing to Bold for example will change all the selected cells font weight to Bold.
Normal
Bold
Color:
If this is checked, the current cell text wil be underlined.
Underline
Size:
Weight:
Style:
Choose the color for the current cell text. Clicking on the color bar will bring you the standard KDE Select Color dialog where you will be able to choose the new color.
This will strike out the current cell text if this is checked.
Strike out
This box lists all your available font families. Click on one family to set it in the current cell.
You can see a preview of the font you are choosing for the current cell.
Set the content position horizontally in the cell. Standard is default and is set from the format you choose. Left means the content will be displayed on the left of the cell. Center means the content will be in the center horizontally in the cell. Right means the content of the cell will be displayed on the right of the cell.
Horizontal
Standard
Left
Center
Right
Set the content position vertically in the cell. Top means the content will be displayed on top of the cell. Middle means the content will be in the middle vertically in the cell. Bottom means the content of the cell will be displayed at the bottom of the cell.
Vertical
Top
Middle
Bottom
Your text will appear oriented in the angle you set here. Positive values will move it counter-clockwise and negative values will move it clockwise.
Rotation
°
This is only available when the rotation is 0°. Wrap text wraps the text so it fits in the previous cell size. If this is not checked, the text will stay on one line and the cell size will be adjusted to contain the text. Vertical text puts your text vertically.
Text Option
Wrap text
Vertical text
Set the amount of indent that will be used in the cell when you choose the Format - > Increase Indent or Format - > Decrease Indent menus.
Indent
When checked, this has the same effect as Data - > Merge Cells. You need to have at least two consecutive cells selected. Those consecutive cells are then merged into a bigger one. When a merged cell is selected and when you uncheck this, then all cells come back to their original size as before the merging. It has the same effect as Data - > Dissociate Cells.
Merge cells
The unit used here is the one set in Format - > Page Layout.. dialog.
Size of Cell
If checked, the default height will be used for the cell instead of the value above.
Default height (%1)
Height:
Set the height of the cell.
If checked, the default width will be used for the cell instead of the value above.
Default width (%1)
Width:
This tab enables you to set Cell Protection. All cells are protected by default (that means cell content cannot be changed) and for the cell protection to be active you also need to protect the sheet using the Tools - > Protect Document - > Protect Sheet... menu and to provide a password. You can also hide the cell formula in order to protect the way you calculate the formula. This also needs to enable sheet protection to work. You can hide the cell content with Hide all and again this needs sheet protection. You can learn more about all these settings in the User Manual in the Advanced KSpread chapter.
Printing
If checked, the content of the cell will not be printed. If this is not checked (default), the cell content will be printed. Note that you can print it even if the cell is protected
& Do not print text
Protection
This hides the cell content and works only when the sheet is protected. Whether the cell itself is protected or not does not matter.
Hide & all
If checked, the cell content will be protected. This is the default behavior. You need to protect the whole sheet using the Tools- > Protect document- > Protect Sheet... menu option for this individual cell protection to work. See the manual for more details in the Advanced KSpread chapter. When a cell is protected, its content cannot be changed.
& Protected
When this is checked, the cell is still visible. However, its contents do not appear in the Formula bar. Hiding formula is only working for cells that contain formulae so the user cannot view the formula. And the sheet must be protected for this to work.
& Hide formula
Content
Everything
Comment
Result
Everything without border
Operation
Overwrite
Addition
Subtraction
Multiplication
Division
Subtotal
Add Subtotal to:
Use function:
At each change in:
Columns
Options
& Replace current Subtotals
& Page break between groups
& Summary below data
Summary & only
& Ignore empty cells when looking for changes
File Options
Number of entries in Recent Files list:
Controls the maximum number of filenames that are shown when you select File- > Open Recent.
Autosave delay (minutes):
Here you can select the time between autosaves, or disable this feature altogether by choosing Do not save automatically (drag the slider to the far left).
Do not save automatically
min
Check this box if you want some backup files created. This is checked per default.
Create backup files
Cursor movement after pressing Enter:
When you have selected a cell, pressing the Enter key will move the cell cursor one cell left, right, up or down, as determined by this setting.
Function shown in status bar:
This drop down selection box can be used to choose the calculation performed by the Statusbar Summary function.
Unit:
Choose the default unit that will be used in your sheets. Note that you can overwrite the unit for the current sheet using the Format - > Page Layout... dialog.
Indentation step:
Lets you define the amount of indenting used by the Increase Indent and Decrease Indent option in the Format menu.
Colors
Grid:
Click here to change the grid color ie the color of the borders of each cell.
Custom...
Page border:
When the View - > Show Page Borders menu item is checked, the page borders are displayed. Click here to choose another color for the borders than the default red.
Print settings
Grid
Comment indicator
Charts
Objects
Zero values
Formula indicator
Drawings
Headers
Page order
From left to right, then down
From top to bottom, then across
Table alignment on page
Center horizontally
Center vertically
Repetitions on each page
Columns from
Rows from
to
Scaling
Fixed zoom:
Page limits:
SheetPropertiesBase
Layout direction:
Defaut is that the first column of the sheet is on the left. If you choose Right to Left, then the first column will be on the right and the others added from right to left.
Left to Right
Right to Left
If this box is checked cells containing comments will be marked by a small red triangle at the top right corner.
Show comment indicator
If this box is checked the cell reference shown at the left end of the Formula Bar will be displayed in LC mode (i. e. L2C3) rather than in its normal form B3. This does not seem to be of much use at the moment.
Use & LC mode
If you check this option, the page borders will be drawn on your current sheet. Per default the page borders are not displayed. It is useful to see the page borders if you want to print your sheet.
Show page & borders
Check this box and the first letter of any text you type in will automatically be converted to uppercase.
& Convert first letter to uppercase
If this box is checked any cell containing the value zero will appear blank.
& Hide zero
If this box is checked KSpread will display the actual formulae in cells rather than the results.
Show & formula
If this box is checked the column headings will show as numbers rather than as letters. Letters are default.
Show column as & numbers
If this box is checked KSpread will display a small blue triangle at the bottom left corner of cells containing formulae. This is useful if you want to protect cells with formulae.
Show formula & indicator
If checked, the grid (the cell limits) will be shown. This is the default. If unchecked, the grid will be hidden.
Show & grid
This setting controls whether formulae are recalculated automatically when the value of any cell they refer to changes.
& Automatic recalculation
All Sheets
Active Sheet
Selected Sheets:
Available sheets
List of all available sheets. To print a sheet you have to select one or more sheets in this list and use the buttons to insert the selected sheet(s) in the right-hand list, which lists all sheets that are printed. You can insert a sheet as often as you like, this way it will be printed multiple times. This is useful for dividers or title pages, for example.
Available Sheets
List of sheets to print in given order
List of sheets to print. Only the sheets listed here will be printed in the order of listing. You can change the print order with the up and down buttons. It is even possible to print a sheet more than once. Just insert the desired sheet again and order the list to your needs.
Selected Sheets
Select all sheets
Move selected sheet to the top
Select sheets
Move selected sheet up
Remove sheets
Move selected sheet down
Clear Selection
Move selected sheet to the bottom
Dependency
Cut
Invalid document. Sheet name is empty.
You cannot change a protected sheet
page
pages
file
name
time
date
author
email
org
sheet
Header
Header1
Default
Validation for cell %1 failed
True
False
#CIRCLE!
#DEPEND!
#DIV/ 0!
#N/ A
#NAME?
#NUM!
#NULL!
#PARSE!
#REF!
#VALUE!
PM
AM
h
min
s
true
false
pm
am
Bit Operations
First number
Second number
The BITAND() function performs a bit-wise AND operation for the two integer parameters.
BITAND(value; value)
BITAND(12; 10) returns 8 (because decimal 12 is binary 1100, and decimal 10 is binary 1010; and 1100 "anded" with 1010 is 1000, which is integer 8).
Amount to left shift by
The BITLSHIFT() function performs a bit-wise left shift operation of the first parameter. The number of bits to shift by is specified by the second parameter. Note that a negative number of bits to left shift by becomes a right shift.
BITLSHIFT(value; shift size)
Amount to right shift by
The BITRSHIFT() function performs a bit-wise right shift operation of the first parameter. The number of bits to shift by is specified by the second parameter. Note that a negative number of bits to right shift by becomes a left shift.
BITRSHIFT(value; shift size)
The BITOR() function performs a bit-wise OR operation for the two integer parameters.
BITOR(value; value)
BITOR(12; 10) returns 14 (because decimal 12 is binary 1100, and decimal 10 is binary 1010; and 1100 "ored" with 1010 is 1110, which is integer 14).
The BITXOR() function performs a bit-wise exclusive-OR operation for the two integer parameters.
BITXOR(value; value)
BITXOR(12; 10) returns 6 (because decimal 12 is binary 1100, and decimal 10 is binary 1010; and 1100 "xored" with 1010 is 0110, which is integer 6).
Conversion
Bool value to convert
The BOOL2STRING() function returns a string value for a given boolean value. This method is intended for using a boolean in methods which require a string
BOOL2STRING(value)
BOOL2STRING(true) returns "True"
BOOL2STRING(false) returns "False"
upper(BOOL2STRING(find("nan ";" banana "))) returns TRUE
Integer value to convert
The INT2BOOL() function returns a boolean value for a given integer number. This method is intended for using an integer in methods which require a boolean. It only accepts 0 or 1. If any other value is given, false is returned.
INT2BOOL(value)
INT2BOOL(1) returns true
INT2BOOL(0) returns false
OR(INT2BOOL(1); false) returns true
The BOOL2INT() function returns an integer value for a given boolean value. This method is intended for using a boolean value in methods which require an integer.
BOOL2INT(value)
BOOL2INT(True) returns 1
BOOL2INT(False) returns 0
Number to convert into string
The NUM2STRING() function returns a string value for a given number. Note that KSpread can auto-convert numbers to strings if needed, so this function should rarely be needed.
NUM2STRING(value)
NUM2STRING(10) returns "10"
NUM2STRING(2.05) returns "2.05"
=find("101 "; NUM2STRING(A1)) (A1 = 2.010102) returns True
The STRING() function returns a string value for a given number. It is the same as the NUM2STRING function.
A one character string to convert
The CHARTOASCII() function returns the ASCII code for the given character.
CHARTOASCII(value)
CHARTOASCII("v ") returns 118
CHARTOASCII(r) is an error. The character must be in quotes.
The ASCII values to convert
The ASCIITOCHAR() function returns the character for each given ASCII code
ASCIITOCHAR(value)
ASCIITOCHAR(118) returns "v"
ASCIITOCHAR(75; 68; 69) returns "KDE"
Value in X
Value in Y
The POLR() function returns the radius corresponding to the position of a point in a cartesian landmark.
POLR(X; Y)
POLR(12; 12) returns 16.9705
POLR(12; 0) returns 12
The POLA() function returns the angle (in radians) corresponding to the position of a point in a cartesian landmark.
POLA(X; Y)
POLA(12; 12) returns 0.78539816
POLA(12; 0) returns 0
POLA(0; 12) returns 1.5707
Radius
Angle (radians)
The CARX() function returns the X position corresponding to the position of a point in a polar landmark.
CARX(Radius; Angle)
CARX(12; 1.5707) returns 0.00115592
CARX(12; 0) returns 12
Value
The DECSEX() function converts a double value to a time value.
DECSEX(double)
DECSEX(1.6668) returns 1:40
DECSEX(7.8) returns 7:47
Hours
Minutes
Seconds
The SEXDEC() function returns a decimal value. You can also supply a time value.
SEXDEC(time value) or SEXDEC(hours; minutes; seconds)
SEXDEC(1; 5; 7) returns 1.0852778
DECSEX("8:05 ") returns 8.08333333
The CARY() function returns the Y position corresponding to the position of a point in a polar landmark.
CARY(Radius; Angle)
CARY(12; 1.5707) returns 12
CARY(12; 0) returns 0
The ROMAN() function returns the number in Roman format. Only positive whole numbers can be converted. The optional Format argument specifies the level of conciseness, and defaults to 0.
ROMAN(Number)
ROMAN(99) returns "XCIX"
ROMAN(-55) returns "Err"
Numeral
The ARABIC() function converts a roman numeral into a number.
ARABIC(Numeral)
ARABIC("IV ") returns 4
ARABIC("XCIX ") returns 99
Database
Range marking the database
String marking the column in the database
Range marking the conditions
Sums up the numbers in a column of a database specified by a set of conditions.
DSUM(Database; "Header"; Conditions)
DSUM(A1: C5; "Salary"; A9: A11)
Calculates the average in a column of a database specified by a set of conditions for values that are numbers
DAVERAGE(Database; "Header"; Conditions)
DAVERAGE(A1: C5; "Salary"; A9: A11)
Counts the cells containing numeric values in a column of a database specified by a set of conditions.
DCOUNT(Database; "Header"; Conditions)
DCOUNT(A1: C5; "Salary"; A9: A11)
Counts the cells containing numeric or alphanumeric values in a column of a database specified by a set of conditions.
DCOUNTA(Database; "Header"; Conditions)
DCOUNTA(A1: C5; "Salary"; A9: A11)
Returns a single value from a column of a database specified by a set of conditions. This function returns an error if no value or more than one value exist.
DGET(Database; "Header"; Conditions)
DGET(A1: C5; "Salary"; A9: A11)
Returns the largest value in a column of a database specified by a set of conditions.
DMAX(Database; "Header"; Conditions)
DMAX(A1: C5; "Salary"; A9: A11)
Returns the smallest values in a column of a database specified by a set of conditions.
DMIN(Database; "Header"; Conditions)
DMIN(A1: C5; "Salary"; A9: A11)
Returns the product of all numeric values in a column of a database specified by a set of conditions.
DPRODUCT(Database; "Header"; Conditions)
DPRODUCT(A1: C5; "Salary"; A9: A11)
Returns the estimate of the standard deviation of a population based on a sample using all numeric values in a column of a database specified by a set of conditions.
DSTDEV(Database; "Header"; Conditions)
DSTDEV(A1: C5; "Salary"; A9: A11)
Returns the standard deviation of a population based on the entire population using all numeric values in a column of a database specified by a set of conditions.
DSTDEVP(Database; "Header"; Conditions)
DSTDEVP(A1: C5; "Salary"; A9: A11)
Returns the estimate of the variance of a population based on a sample using all numeric values in a column of a database specified by a set of conditions.
DVAR(Database; "Header"; Conditions)
DVAR(A1: C5; "Salary"; A9: A11)
Returns the variance of a population based on the entire population using all numeric values in a column of a database specified by a set of conditions.
DVARP(Database; "Header"; Conditions)
DVARP(A1: C5; "Salary"; A9: A11)
Range containing the pivot table
Name of the field of which you want the summary data
Fetches summary data from a pivot table.
GETPIVOTDATA(Database; "Sales")
Date & Time
Method (optional)
The WEEKDAY() function returns the weekday of given date. If the method is 1 (default) WEEKDAY() returns 1 for sunday, 2 for monday,.. If the method is 2, monday is 1, tuesday 2,... and if the method is 3 WEEKDAY() returns 0 for monday, 1 for tuesday,...
WEEKDAY(date; method)
WEEKDAY("2002-02-22 "; 2) returns 5
Date1
Date2
Method
The DAYS360() function returns the number of days from date1 to date2 using a 360-day calendar in which all months are assumed to have 30 days. If method is false (default) the US method will be used, the European otherwise.
DAYS360(date1; date2; method)
DAYS360("2/ 22/ 2002 ";" 4/ 21/ 2002 "; FALSE) returns 59
The TIMEVALUE() function returns a number (between 0 and 1) representing the time of day.
TIMEVALUE(time)
TIMEVALUE("10:05:02 ") returns 0.42
The DATEVALUE function returns a number representing the day, i. e the number of days elapsed since December 31, 1899.
DATEVALUE(date)
DATEVALUE("2/ 22/ 2002 ") returns 37309
Months
The EDATE functions returns the date that is specified by a given date and a number of months before or after that date.
EDATE(date; months)
EDATE("2/ 22/ 2002 "; 3) returns" 5/ 22/ 2002 "
EDATE("3/ 31/ 2002 "; -1) returns" 2/ 28/ 2002 "
The EOMONTH functions returns the last day in the month specified by a date and the number of months from that date.
EOMONTH(date; months)
EOMONTH("2/ 22/ 2002 "; 3) returns" 5/ 31/ 2002 "
EOMONTH("3/ 12/ 2002 "; -1) returns" 2/ 28/ 2002 "
EOMONTH("3/ 12/ 2002 "; 0) returns" 3/ 31/ 2002 "
The YEAR functions returns the year of a date. If no parameter is specified the current year gets returned.
YEAR(date)
YEAR("2/ 22/ 2002 ") returns 2002
YEAR(2323.1285) returns 1906
The MONTH functions returns the month of a date. If no parameter is specified the current month gets returned.
MONTH(date)
MONTH("2/ 22/ 2002 ") returns 2
MONTH(2323.1285) returns 5
The DAY functions returns the day of a date. If no parameter is specified the current day gets returned.
DAY(date)
DAY("2/ 22/ 2002 ") returns 22
DAY(2323.1285) returns 11
The HOUR functions returns the hour of a time. If no parameter is specified the current hour gets returned.
HOUR(time)
HOUR("22:10:12 ") returns 22
HOUR(0.1285) returns 3
The MINUTE functions returns the minutes of a time. If no parameter is specified the current minute is returned.
MINUTE(time)
MINUTE("22:10:12 ") returns 10
MINUTE(0.1234) returns 57
The SECOND functions returns the seconds of a time. If no parameter is specified the current second is returned.
SECOND(time)
SECOND("22:10:12 ") returns 12
SECOND(0.1234) returns 42
First (earlier) date value
Second date value
Calculation mode
The WEEKS() function returns the difference between two dates in weeks. The third parameter indicates the calculation mode: if the mode is 0, WEEKS() returns the maximal possible number of weeks between those days. If the mode is 1, it only returns the number of whole weeks in between.
WEEKS(date2; date1; mode)
WEEKS("2002-02-18 ";" 2002-02-26 "; 0) returns 1, because there is one week and 1 day in between
WEEKS("2002-19-02 ";" 2002-19-02 "; 1) returns 0, because there is not a whole week in between, starting at the first day of the week (monday or sunday, depending on your local settings)
The MONTHS() function returns the difference between two dates in months. The third parameter indicates the calculation mode: if the mode is 0, MONTHS() returns the maximal possible number of months between those days. If the mode is 1, it only returns the number of complete months in between.
MONTHS(date2; date1; mode)
MONTHS("2002-01-18 ";" 2002-02-26 "; 0) returns 1, because there is 1 month and 8 days in between
MONTHS("2002-01-19 ";" 2002-02-26 "; 1) returns 0, because there is not a whole month in between, starting at the first day of the month
The YEARS() function returns the difference between two dates in years. The third parameter indicates the calculation mode: if the mode is 0, YEARS() returns the maximal possible number of years between those days. If the mode is 1, it only returns whole years, starting at the 1st Jan and ending on the 31st Dec.
YEARS(date2; date1; mode)
YEARS("2001-02-19 ";" 2002-02-26 "; 0) returns 1, because there is one year and 7 days in between
YEARS("2002-02-19 ";" 2002-02-26 "; 1) returns 0, because there is not a whole year in between, starting at the first day of the year
The DAYS() function returns the difference between two dates in days.
DAYS(date2; date1)
DAYS("2002-02-22 ";" 2002-02-26 ") returns 4
Year
Month
Day
The DAYOFYEAR() function returns the number of the day in the year (1... 365).
DAYOFYEAR(year; month; date)
DAYOFYEAR(2000; 12; 1) returns 336
DAYOFYEAR(2000; 2; 29) returns 60
The DATE() function returns the date formatted with local parameters.
DATE(year; month; date)
DATE(2000; 5; 5) returns Friday 05 May 2000
The TIME() function returns the time formatted with local parameters.
TIME(hours; minutes; seconds)
TIME(10; 2; 2) returns 10:02:02
TIME(10; 70; 0) returns 11:10:0
TIME(10; -40; 0) returns 9:20:0
The HOURS() function returns the value of the hours in a time expression.
HOURS(time)
HOURS("10:5:2 ") returns 10
The function ISLEAPYEAR() returns True if the given year is leap.
ISLEAPYEAR(year)
ISLEAPYEAR(2000) returns True
The function DAYSINMONTH() returns the number of days in the given year and month.
DAYSINMONTH(year; month)
DAYSINMONTH(2000; 2) returns 29
The function DAYSINYEAR() returns the number of days in the given year.
DAYSINYEAR(year)
DAYSINYEAR(2000) returns 366
The function WEEKSINYEAR() returns the number of weeks in the given year.
WEEKSINYEAR(year)
WEEKSINYEAR(2000) returns 52
The MINUTES() function returns the value of the minutes in a time expression.
MINUTES(time)
MINUTES("10:5:2 ") returns 5
The SECONDS() function returns the value of the seconds in a time expression.
SECONDS(time)
SECONDS("10:5:2 ") returns 2
Number of day in week (1..7)
The DAYNAME() function returns the name of the day of the week (1..7). In some countries the first day of the week is Monday, while in others the first day of the week is Sunday.
DAYNAME(weekday)
DAYNAME(1) returns Monday (if the week starts on Monday)
Number of month (1..12)
The MONTHNAME() function returns the name of the month (1... 12).
MONTHNAME(number)
MONTHNAME(5) returns May
The CURRENTDATE() function returns the current date. It is equivalent to the TODAY function.
CURRENTDATE()
CURRENTDATE() returns "Saturday 13 April 2002"
The TODAY() function returns the current date.
TODAY()
TODAY() returns "Saturday 13 April 2002"
The NOW() function returns the current date and time. It is identical with CURRENTDATETIME and provided for compatibility with other applications.
NOW()
NOW() returns "Saturday 13 April 2002 19:12:01"
The CURRENTDATETIME() function returns the current date and time.
CURRENTDATETIME()
CURRENTDATETIME() returns "Saturday 13 April 2002 19:12:01"
The CURRENTTIME() function returns the current time formatted with local parameters.
CURRENTTIME()
CURRENTTIME() returns "19:12:01"
The EASTERSUNDAY() function returns the date which corresponds to Easter Sunday in the year given as the parameter.
EASTERSUNDAY(year)
EASTERSUNDAY(2003) returns "20th April 2003"
The ISOWEEKNUM() function returns number of the week which the date falls into. Note that this function is compliant with the ISO8601 standard: a week always begins on a Monday, and ends on a Sunday. The first week of a year is that week which contains the first Thursday of the year.
ISOWEEKNUM(date)
ISOWEEKNUM(A1) returns 51 when A1 is "21st of Dec".
The WEEKNUM() function returns the non-ISO week number in which the date falls into.
WEEKNUM(date; method)
WEEKNUM(A1; 1) returns 11 when A1 is "9th of March 2008". Number of the week in the year, with a week beginning on Sunday (1, this is the default if Method is omitted.)
WEEKNUM(A1; 2) returns 10 when A1 is "9th of March 2008". Number of the week in the year, with a week beginning on Monday (2)
First date
Second date
interval
The DATEDIF() function returns the difference between two dates.
Interval must be one of the following: "m": month; "d": days; "y": complete years; "ym": month excluding years; "yd": days excluding years; "md": days excluding months and years
DATEDIF(first date; second date; interval)
DATEDIF(A1; A2; "d") A1 is "1st of January 1995" and A2 is "15th of June 1999" returns number of days 1626
DATEDIF(A1; A2; "m") A1 is "1st of January 1995" and A2 is "15th of June 1999" returns number of months 53
The YEARFRAC() function returns the number of full days between start date and end date according to the basis.
Basis must be one of the following: 0 = 30/ 360 US, 1 = Actual/ actual, 2 = Actual/ 360, 3 = Actual/ 365, 4 = European 30/ 360
YEARFRAC(start date; end date; basis)
Start date
Working days
Holidays
The WORKDAY() function returns the date which is working days from the start date.
Holidays must be one of the following: number = days to add, a single date or an array of dates.
WORKDAY(start date; days; holidays)
if B9 is "01/ 01/ 2001", D3 is "01/ 03/ 2001", D4 is "01/ 04/ 2001" then WORKDAY(B9; 2; D3: D4) returns "Fri Jan 5 2001"
End date
The NETWORKDAY() function returns the number of working days between startdate and enddate.
NETWORKDAY(start date; end date; holidays)
NETWORKDAY("01/ 01/ 2001 ";" 01/ 08/ 2001 ") returns 5 workdays
NETWORKDAY("01/ 01/ 2001 ";" 01/ 08/ 2001 "; 2) returns 3 workdays
DATE2UNIX() function converts a date and time value to unix time.
A unix time is the number of seconds after midnight January 1st, 1970.
DATE2UNIX(date)
DATE2UNIX("01/ 01/ 2000 ") returns 946,684,800
Unixtime
UNIX2DATE() function converts unix time to a date and time value.
UNIX2DATE(unixtime)
UNIX2DATE(0) returns 1970-01-01
Engineering
Base
MinLength
The BASE() function converts a number from base-10 to a string value in a target base from 2 to 36.
BASE(number; base; prec)
BASE(128; 8) returns "200"
Where the function is evaluated
Order of the function
The BESSELI() function returns the modified Bessel function In(x).
BESSELI(X; N)
BESSELI(0.7; 3) returns 0.007367374
The BESSELJ() function returns the Bessel function.
BESSELJ(X; N)
BESSELJ(0.89; 3) returns 0.013974004
The BESSELK() function returns the modified Bessel function, which is equivalent to the Bessel function evaluated for purely imaginary arguments.
BESSELK(X; N)
BESSELK(3; 9) returns 397.95880
The BESSELY() function returns the Bessel function, which is also called the Weber function or the Neumann function.
BESSELY(X; N)
BESSELY(4; 2) equals 0.215903595
From unit
To unit
The CONVERT() function returns a conversion from one measurement system to another.
Supported mass units: g (gram), sg (pieces), lbm (pound), u (atomic mass), ozm (ounce), stone, ton, grain, pweight (pennyweight), hweight (hundredweight).
Supported distance units: m (meter), in (inch), ft (feet), mi (mile), Nmi (nautical mile), ang (Angstrom), parsec, lightyear.
Supported pressure units: Pa (Pascal), atm (atmosphere), mmHg (mm of Mercury), psi, Torr.
Supported force units: N (Newton), dyn, pound.
Supported energy units: J (Joule), e (erg), c (Thermodynamic calorie), cal (IT calorie), eV (electronvolt), HPh (Horsepower-hour), Wh (Watt-hour), flb (foot-pound), BTU.
Supported power units: W (Watt), HP (horsepower), PS (Pferdestaerke).
Supported magnetism units: T (Tesla), ga (Gauss).
Supported temperature units: C (Celsius), F (Fahrenheit), K (Kelvin).
Supported volume units: l (liter), tsp (teaspoon), tbs (tablespoon), oz (ounce liquid), cup, pt (pint), qt (quart), gal (gallon), barrel, m3 (cubic meter), mi3 (cubic mile), Nmi3 (cubic Nautical mile), in3 (cubic inch), ft3 (cubic foot), yd3 (cubic yard), GRT or regton (gross register ton).
Supported area units: m2 (square meter), mi2 (square mile), Nmi2 (square Nautical mile), in2 (square inch), ft2 (square foot), yd2 (square yard), acre, ha (hectare).
Supported speed units: m/ s (meters per second), m/ h (meters per hour), mph (miles per hour), kn (knot).
For metric units any of the following prefixes can be used: E (exa, 1E+18), P (peta, 1E+15), T (tera, 1E+12), G (giga, 1E+09), M (mega, 1E+06), k (kilo, 1E+03), h (hecto, 1E+02), e (dekao, 1E+01), d (deci, 1E-01), c (centi, 1E-02), m (milli, 1E-03), u (micro, 1E-06), n (nano, 1E-09), p (pico, 1E-12), f (femto, 1E-15), a (atto, 1E-18).
CONVERT(Number; From Unit; To Unit)
CONVERT(32; "C"; "F") equals 89.6
CONVERT(3; "lbm"; "kg") equals 1.3608
CONVERT(7.9; "cal"; "J") equals 33.0757
Lower limit
Upper limit
The ERF() function returns the error function. With a single argument, ERF() returns the error function between 0 and that argument.
ERF(Lower limit; Upper limit)
ERF(0.4) equals 0.42839236
The ERFC() function returns the complementary error function.
ERFC(Lower limit; Upper limit)
ERFC(0.4) equals 0.57160764
The value to convert
The minimum length of the output
The DEC2BIN() function returns the value formatted as a binary number.
DEC2BIN(value)
DEC2BIN(12) returns "1100"
DEC2BIN(55) returns "110111"
The DEC2HEX() function returns the value formatted as a hexadecimal number.
DEC2HEX(value)
DEC2HEX(12) returns "c"
DEC2HEX(55) returns "37"
The DEC2OCT() function returns the value formatted as an octal number.
DEC2OCT(value)
DEC2OCT(12) returns "14"
DEC2OCT(55) returns "67"
The OCT2BIN() function returns the value formatted as a binary number.
OCT2BIN(value)
OCT2BIN("12 ") returns" 1010 "
OCT2BIN("55 ") returns" 101101 "
The OCT2DEC() function returns the value formatted as a decimal number.
OCT2DEC(value)
OCT2DEC("12 ") returns 10
OCT2DEC("55 ") returns 45
The OCT2HEX() function returns the value formatted as a hexadecimal number.
OCT2HEX(value)
OCT2HEX("12 ") returns" A "
OCT2HEX("55 ") returns" 2D "
The BIN2DEC() function returns the value formatted as a decimal number.
BIN2DEC(value)
BIN2DEC("1010 ") returns 10
BIN2DEC("11111 ") returns 31
The BIN2OCT() function returns the value formatted as an octal number.
BIN2OCT(value)
BIN2OCT("1010 ") returns" 12 "
BIN2OCT("11111 ") returns" 37 "
The BIN2HEX() function returns the value formatted as a hexadecimal number.
BIN2HEX(value)
BIN2HEX("1010 ") returns" a "
BIN2HEX("11111 ") returns" 1f "
The HEX2DEC() function returns the value formatted as a decimal number.
HEX2DEC(value)
HEX2DEC("a ") returns 10
HEX2DEC("37 ") returns 55
The HEX2OCT() function returns the value formatted as an octal number.
HEX2OCT(value)
HEX2OCT("a ") returns" 12 "
HEX2OCT("37 ") returns" 67 "
The HEX2BIN() function returns the value formatted as a binary number.
HEX2BIN(value)
HEX2BIN("a ") returns" 1010 "
HEX2BIN("37 ") returns" 110111 "
Real coefficient
Imaginary coefficient
The COMPLEX(real; imag) returns a complex number of form x+yi.
COMPLEX(real; imag)
COMPLEX(1.2; 3.4) returns "1.2+3.4i"
COMPLEX(0; -1) returns "-i"
Complex number
The IMAGINARY(string) returns the imaginary coefficient of a complex.
IMAGINARY(string)
IMAGINARY("1.2+3.4i ") returns 3.4
IMAGINARY("1.2 ") returns 0
The IMREAL(string) returns the real coefficient of a complex.
IMREAL(string)
IMREAL("1.2+3.4i ") returns 1.2
IMREAL("1.2i ") returns 0
The IMCOS(string) returns the cosine of a complex number.
IMCOS(string)
IMCOS("1+i ") returns" 0.83373-0.988898i "
IMCOS("12i ") returns 81 377.4
The IMCOSH(string) returns the hyperbolic cosine of a complex number.
IMCOSH(string)
IMCOSH("1+i ") returns" 0.83373+0.988898i "
IMCOSH("12i ") returns 0.84358
The IMSIN(string) function returns the sine of a complex number.
IMSIN(string)
IMSIN("1+i ") returns" 1.29846+0.634964i "
IMSIN("1.2 ") returns -0.536573
The IMSINH(string) function returns the hyperbolic sine of a complex number.
IMSINH(string)
IMSINH("1+i ") returns" 0.63496+1.29846i "
IMSINH("1.2 ") returns 1.50946
The IMTAN(string) function returns the tangent of a complex number.
IMTAN(string)
IMTAN("1+i ") returns" 0.27175+1.08392i "
IMTAN("1.2 ") returns 2.57215
The IMTANH(string) function returns the hyperbolic tangent of a complex number.
IMTANH(string)
IMTANH("1+i ") returns" 1.08392+0.27175i "
IMTANH("1.2 ") returns 0.83365
The IMEXP(string) returns the exponential of a complex number.
IMEXP(string)
IMEXP("2-i ") returns" 3.99232-6.21768i "
IMEXP("12i ") returns" 0.843854-0.536573i "
The IMLN(string) returns the natural logarithm of a complex number.
IMLN(string)
IMLN("3-i ") returns" 1.15129-0.321751i "
IMLN("12 ") returns 2.48491
The IMLOG2(string) returns the base-2 logarithm of a complex number.
IMLOG2(string)
IMLOG2("3+4i ") returns" 2.321928+1.337804i "
The IMLOG10(string) returns the base-10 logarithm of a complex number.
IMLOG10(string)
IMLOG10("3+4i ") returns" 0.69897+0.402719i "
The IMSQRT(string) returns the square root of a complex number.
IMSQRT(string)
IMSQRT("1+i ") returns" 1.09868+0.45509i "
IMSQRT("1.2i ") returns" 0.774597+0.774597i "
Power
The IMPOWER(string) returns a complex number raised to a power.
IMPOWER(string)
IMPOWER("4-i "; 2) returns" 15-8i "
IMPOWER("1.2 "; 2) returns 1.44
The IMSUM() returns the sum of several complex numbers of form x+yi.
IMSUM(value; value;...)
IMSUM(1.2; "3.4+5i") returns "4.6+5i"
IMSUM(1.2; "1i") returns "1.2+i"
The IMDIV() returns the division of several complex numbers of form x+yi.
IMDIV(value; value;...)
IMDIV(1.2; "3.4+5i") returns "0.111597-0.164114i"
IMDIV("12+i ";" 12-i ") returns" 0.986207+0.16551i "
The IMSUB() returns the difference of several complex numbers of form x+yi.
IMSUB(value; value;...)
IMSUB(1.2; "3.4+5i") returns "-2.2-5i"
IMSUB(1.2; "1i") returns "1.2-i"
The IMPRODUCT() returns the product of several complex numbers of form x+yi.
IMPRODUCT(value; value;...)
IMPRODUCT(1.2; "3.4+5i") returns "4.08+6i"
IMPRODUCT(1.2; "1i") returns "+1.2i"
The IMCONJUGATE(complex number) returns the conjugate of a complex number of form x+yi.
IMCONJUGATE(complex number)
IMCONJUGATE("1.2+5i ") returns" 1.2-5i "
IMCONJUGATE("-i ") returns" i "
IMCONJUGATE("12 ") returns" 12 "
The IMARGUMENT(complex number) returns the argument of a complex number of form x+yi.
IMARGUMENT(complex number)
IMARGUMENT("1.2+5i ") returns 0.6072
IMARGUMENT("-i ") returns -1.57079633
IMARGUMENT("12 ") returns" #Div/ 0 "
The IMABS(complex number) returns the norm of a complex number of form x+yi.
IMABS(complex number)
IMABS("1.2+5i ") returns 5.1419
IMABS("-i ") returns 1
IMABS("12 ") returns 12
Floating point value
The DELTA() function returns 1 if x equals y, otherwise returns 0. y defaults to 0.
DELTA(x; y)
DELTA(1.2; 3.4) returns 0
DELTA(3; 3) returns 1
DELTA(1; TRUE) returns 1
The GESTEP() function returns 1 if x greater or equals y, otherwise returns 0. y defaults to 0.
GESTEP(x; y)
GESTEP(1.2; 3.4) returns 0
GESTEP(3; 3) returns 1
GESTEP(0.4; TRUE) returns 0
GESTEP(4; 3) returns 1
Financial
Issue date
First interest
Settlement
Annual rate of security
Par value
Number of payments per year
Day counting basis
The ACCRINT function returns accrued interest for a security which pays periodic interest. Allowed frequencies are 1 - annual, 2 - semi-annual or 4 - quarterly. Basis is the type of day counting you want to use: 0: US 30/ 360 (default), 1: real days, 2: real days/ 360, 3: real days/ 365 or 4: European 30/ 365.
ACCRINT(issue; first interest; settlement; rate; par; frequency; basis)
ACCRINT("2/ 28/ 2001 ";" 8/ 31/ 2001 ";" 5/ 1/ 2001 "; 0.1; 1000; 2; 0) returns 16,944
The ACCRINTM function returns accrued interest for a security which pays interests at maturity date. Basis is the type of day counting you want to use: 0: US 30/ 360 (default), 1: real days, 2: real days/ 360, 3: real days/ 365 or 4: European 30/ 365.
ACCRINTM(issue; settlement; rate; par; basis)
ACCRINTM("2/ 28/ 2001 ";" 8/ 31/ 2001 "; 0.1; 100) returns 5.0278
Cost
Pv
Fv
The AMORDEGRC function calculates the amortization value for the French accounting system using degressive depreciation.
AMORDEGRC( Cost; purchaseDate; firstPeriodEndDate; salvage; period; rate; basis)
AMORDEGRC( 1000; "2006-02-01"; "2006-12-31"; 10; 0; 0.1; 1) returns 228
P
The AMORLINC function calculates the amortization value for the French accounting system using linear depreciation.
AMORLINC( Cost; purchaseDate; firstPeriodEndDate; salvage; period; rate; basis)
AMORLINC( 1000; "2004-02-01"; "2004-12-31"; 10; 0; 0.1; 1) returns 91.256831
Principal
Interest rate
Periods per year
Years
The COMPOUND() function returns the value of an investment, given the principal, nominal interest rate, compounding frequency and time. For example: $5000 at 12% interest compounded quarterly for 5 years will become COMPOUND(5000; 0.12; 4; 5) or $9030.56.
COMPOUND(initial; interest; periods; periods_per_year)
COMPOUND(5000; 0.12; 4; 5) equals 9030.56
The CONTINUOUS() function calculates the return on continuously compounded interest, given the principal, nominal rate and time in years. For example: $1000 earning 10% for 1 year becomes CONTINUOUS(1000; .1; 1) or $1105.17.
CONTINOUS(principal; interest; years)
CONTINUOUS(1000; 0.1; 1) equals 1105.17
Maturity
Frequency
The COUPNUM function returns the number of coupons to be paid between the settlement and the maturity. Basis is the type of day counting you want to use: 0: US 30/ 360 (default), 1: real days, 2: real days/ 360, 3: real days/ 365 or 4: European 30/ 365.
COUPNUM(settlement; maturity; frequency; basis)
COUPNUM("2/ 28/ 2001 ";" 8/ 31/ 2001 "; 2; 0) returns 1
rate
periods
value
start
end
type
Calculates the cumulative interest payment.
CUMIPMT(rate, periods, value, start, end, type)
CUMIPMT( 0.06/ 12; 5*12; 100000; 5; 12; 0) equals -3562,187023
Calculates the cumulative principal payment.
CUMPRINC(rate, periods, value, start, end, type)
CUMPRINC( 0.06/ 12; 5*12; 100000; 5; 12; 0) equals -11904.054201
Salvage
Life
Period
The DB() function will calculate the depreciation of an asset for a given period using the fixed-declining balance method. Month is optional, if omitted it is assumed to be 12.
DB(cost; salvage value; life; period [; month])
DB(8000; 400; 6; 3) equals 1158.40
DB(8000; 400; 6; 3; 2) equals 1783.41
Factor
The DDB() function calculates the depreciation of an asset for a given period using the arithmetic-declining method. The factor is optional, if omitted it is assumed to be 2. All the parameter must be greater than zero.
DDB(cost; salvage value; life; period [; factor])
DDB(75000; 1; 60; 12; 2) returns 1721.81
Price per $100 face value
Redemption
The DISC function returns the discount rate for a security. Basis is the type of day counting you want to use: 0: US 30/ 360 (default), 1: real days, 2: real days/ 360, 3: real days/ 365 or 4: European 30/ 365.
DISC(settlement; maturity; par; redemption [; basis])
DISC("2/ 28/ 2001 ";" 8/ 31/ 2001 "; 12; 14) returns 0.2841
Fractional Dollar
The DOLLARDE() function returns a dollar price expressed as a decimal number. The fractional dollar is the number to be converted and the fraction is the denominator of the fraction
DOLLARDE(fractional dollar; fraction)
DOLLARDE(1.02; 16) - stands for 1 and 2/ 16 - returns 1.125
Decimal Dollar
The DOLLARFR() function returns a dollar price expressed as a fraction. The decimal dollar is the number to be converted and the fraction is the denominator of the fraction
DOLLARFR(fractional dollar; fraction)
DOLLARFR(1.125; 16) returns 1.02. (1 + 2/ 16)
Rate
Present value (PV)
Future value (FV)
Returns the number of periods needed for an investment to retain a desired value.
DURATION(rate; pv; fv)
DURATION(0.1; 1000; 2000) returns 7.27
Coupon
Yield
Basis
Returns the Macauley duration of a fixed interest security in years.
DURATION_ADD(Settlement; Maturity; Coupon; Yield; Frequency; Basis)
DURATION_ADD( "1998-01-01"; "2006-01-01"; 0.08; 0.09; 2; 1) returns 5.9937749555
Nominal interest rate
Periods
The EFFECT() function calculates the effective yield for a nominal interest rate (annual rate or APR). For example: 8% interest compounded monthly provides an effective yield of EFFECT(.08; 12) or 8.3%.
EFFECT(nominal; periods)
EFFECT(0.08; 12) equals 0.083
The EFFECTIVE() function calculates the effective yield for a nominal interest rate (annual rate or APR). It is the same as the EFFECT function.
EFFECTIVE(nominal; periods)
The EURO() function converts one Euro to a given national currency in the European monetary union. Currency is one of the following: ATS (Austria), BEF (Belgium), DEM (Germany), ESP (Spain), EUR (Euro), FIM (Finland), FRF (France), GRD (Greece), IEP (Ireland), ITL (Italy), LUF (Luxembourg), NLG (Netherlands), or PTE (Portugal).
EURO(currency)
EURO("DEM ") equals 1.95583
Source currency
Target currency
The EUROCONVERT() function converts a number from one national currency to another currency in the European monetary union by using EURO an intermediary. Currency is one of the following: ATS (Austria), BEF (Belgium), DEM (Germany), ESP (Spain), EUR (Euro), FIM (Finland), FRF (France), GRD (Greece), IEP (Ireland), ITL (Italy), LUF (Luxembourg), NLG (Netherlands), or PTE (Portugal).
EUROCONVERT(number; source currency; target currency)
EUROCONVERT(1; "EUR"; "DEM") equals 1.95583
Present value
The FV() function returns the future value of an investment, given the yield and the time elapsed. If you have $1000 in a bank account earning 8% interest, after two years you will have FV(1000; 0.08; 2) or $1166.40.
FV(present value; yield; periods)
FV(1000; 0.08; 2) equals 1166.40
Payment per period
The FV_ANNUITY() function returns the future value of a stream of payments given the amount of the payment, the interest rate and the number of periods. For example: If you receive $500 per year for 20 years, and invest it at 8%, the total after 20 years will be FV_annuity(500; 0.08; 20) or $22,880.98. This function assumes that payments are made at the end of each period.
FV_ANNUITY(amount; interest; periods)
FV_ANNUITY(1000; 0.05; 5) equals 5525.63
Investment
The INTRATE function returns the interest rate for a fully invested security. Basis is the type of day counting you want to use: 0: US 30/ 360 (default), 1: real days, 2: real days/ 360, 3: real days/ 365 or 4: European 30/ 365.
INTRATE(settlement; maturity; investment; redemption; basis)
INTRATE("2/ 28/ 2001 ";" 8/ 31/ 2001 "; 1000000; 2000000; 1) returns 1.98
Number of periods
Present values
Future value (optional)
Type (optional)
IPMT calculates the amount of a payment of an annuity going towards interest.
Rate is the periodic interest rate.
Period is the amortizement period. 1 for the first and NPER for the last period.
NPER is the total number of periods during which annuity is paid.
PV is the present value in the sequence of payments.
FV (optional) is the desired (future) value. default: 0.
Type (optional) defines the due date. 1 for payment at the beginning of a period and 0 (default) for payment at the end of a period.
The example shows the interest to pay in the last year of a three year loan. The interest rate is 10 percent.
IPMT(Rate; Period; NPer; PV; FV; Type)
IPMT(0.1; 3; 3; 8000) equals -292.45
Present values (PV)
Calculates the interest paid on a given period of an investment.
Period is the amortizement period. 1 for the first and NPer for the last period.
NPer is the total number of periods during which annuity is paid.
ISPMT(Rate; Period; NPer; PV)
ISPMT(0.1; 1; 3; 8000000) equals -533333
Face value
Coupon rate
Coupons per year
Market interest rate
The LEVEL_COUPON() function calculates the value of a level-coupon bond. For example: if the interest rate is 10%, a $1000 bond with semi-annual coupons at a rate of 13% that matures in 4 years is worth LEVEL_COUPON(1000; .13; 2; 4; .1) or $1096.95.
LEVEL_COUPON(face value; coupon rate; coupons per year; years; market rate)
LEVEL_COUPON(1000; .13; 2; 4; .1) equals 1096.95
The MDURATION() function will calculate the modified Macauley duration of a fixed interest security in years.
MDURATION( Settlement; Maturity; Coupon; Yield; Frequency; [Basis=0])
MDURATION("2004-02-01 ";" 2004-05-31 "; 0.08; 0.09; 2; 0) returns 0.316321106
Values
Reinvestment
The MIRR() function will calculate the modified internal rate of return (IRR) of a series of periodic investments.
MIRR(values; investment; reinvestment)
MIRR({100; 200; -50; 300; -200}, 5%, 6%) equals 34.2823387842%
Effective interest rate
The NOMINAL() function calculates the nominal (stated) interest rate for an effective (annualized) interest rate compounded at given intervals. For example: to earn 8% on an account compounded monthly, you need a return of NOMINAL(.08; 12) or 7.72%.
NOMINAL(effective; periods)
NOMINAL(0.08; 12) equals 0.0772
Payment
Future value (FV - optional)
Returns the number of periods of an investment.
NPER(rate; payment; pv; fv; type)
NPER(0.1; -100; 1000) equals 11
NPER(0.06; 0; -10000; 20000; 0) returns 11.906
Values (array)
The net present value (NPV) for a series of periodic cash flows.
Computes the net present value for a series of periodic cash flows with the discount rate Rate. Values should be positive if they are received as income, and negative if the amounts are expenditure.
NPV(Rate; Values)
NPV(100%; 4; 5; 7) = 4.125
Last
AnnualYield
The ODDLPRICE function calculates the value of the security per 100 currency units of face value. The security has an irregular last interest date.
ODDLPRICE( Settlement; Maturity; Last; Rate; AnnualYield; Redemption; Frequency [; Basis = 0])
ODDLPRICE(DATE(1990; 6; 1); DATE(1995; 12; 31); DATE(1990; 1; 1); 3%; 5%; 100; 2) returns 90.991042345
Price
The ODDLYIELD function calculates the yield of the security which has an irregular last interest date.
ODDLYIELD( Settlement; Maturity; Last; Rate; Price; Redemption; Frequency [; Basis = 0])
ODDLYIELD(DATE(1990; 6; 1); DATE(1995; 12; 31); DATE(1990; 1; 1); 3%; 91; 100; 2) returns 4.997775351
Number of periods (NPer)
PMT returns the amount of payment for a loan based on a constant interest rate and constant payments (each payment is equal amount).
PMT(rate; nper; pv [; fv = 0 [; type = 0]])
PMT(0.1; 4; 10000) equals -3154.71
PPMT calculates the amount of a payment of an annuity going towards principal.
PPMT(Rate; Period; NPer; PV [; FV = 9 [; Type = 0]])
PPMT(0.0875; 1; 36; 5000; 8000; 1) equals -18.48
Issue
Discount rate
PRICEMAT Calculate the price per 100 currency units of face value of the security that pays interest on the maturity date.
Basis Calculation method
0 US method, 12 months, each month with 30 days
1 Actual number of days in year, actual number of days in months
2 360 days in a year, actual number of days in months
4 365 days in a year, actual number of days in months
5 European method, 12 months, each month has 30 days
PRICEMAT(settlement; maturity; issue; rate; yield [; basis = 0])
PRICEMAT(DATE(1990; 6; 1); DATE(1995; 12; 31); DATE(1990; 1; 1); 6%; 5%) returns 103.819218241
Future value
The PV() function returns the present value of an investment -- the value today of a sum of money in the future, given the rate of interest or inflation. For example if you need $1166.40 for your new computer and you want to buy it in two years while earning 8% interest, you need to start with PV(1166.4; 0.08; 2) or $1000.
PV(future value; rate; periods)
PV(1166.4; 0.08; 2) equals 1000
The PV_ANNUITY() function returns the present value of an annuity or stream of payments. For example: a "million dollar" lottery ticket that pays $50,000 a year for 20 years, with an interest rate of 5%, is actually worth PV_ANNUITY(50000; 0.05; 20) or $623,111. This function assumes that payments are made at the end of each period.
PV_ANNUITY(amount; interest; periods)
PV_ANNUITY(1000; 0.05; 5) equals 4329.48
The RECEIVED function returns the amount received at the maturity date for a invested security. Basis is the type of day counting you want to use: 0: US 30/ 360 (default), 1: real days, 2: real days/ 360, 3: real days/ 365 or 4: European 30/ 365. The settlement date must be before maturity date.
RECEIVED(settlement; maturity; investment; discount; basis)
RECEIVED("2/ 28/ 2001 ";" 8/ 31/ 2001 "; 1000; 0.05; 0) returns 1,025.787
The RRI function calculates the interest rate resulting from the profit (return) of an investment.
RRI( P; Pv; Fv)
RRI(1; 100; 200) returns 1
The SLN() function will determine the straight line depreciation of an asset for a single period. Cost is the amount you paid for the asset. Salvage is the value of the asset at the end of the period. Life is the number of periods over which the asset is depreciated. SLN divides the cost evenly over the life of an asset.
SLN(cost; salvage value; life)
SLN(10000; 700; 10) equals 930
The SYD() function will calculate the sum-of-years digits depreciation for an asset based on its cost, salvage value, anticipated life, and a particular period. This method accelerates the rate of the depreciation, so that more depreciation expense occurs in earlier periods than in later ones. The depreciable cost is the actual cost minus the salvage value. The useful life is the number of periods (typically years) over which the asset is depreciated.
SYD(cost; salvage value; life; period)
SYD(5000; 200; 5; 2) equals 1280
The TBILLEQ functions returns the bond equivalent for a treasury bill. The maturity date must be after the settlement date but within 365 days.
TBILLEQ(settlement; maturity; discount)
TBILLEQ("2/ 28/ 2001 ";" 8/ 31/ 2001 "; 0.1) returns 0.1068
The TBILLPRICE functions returns the price per $100 value for a treasury bill. The maturity date must be after the settlement date but within 365 days. The discount rate must be positive.
TBILLPRICE(settlement; maturity; discount)
TBILLPRICE("2/ 28/ 2001 ";" 8/ 31/ 2001 "; 0.05) returns 97.4444
The TBILLYIELD functions returns the yield for a treasury bill. The maturity date must be after the settlement date but within 365 days. The price must be positive.
TBILLYIELD(settlement; maturity; price)
TBILLYIELD("2/ 28/ 2001 ";" 8/ 31/ 2001 "; 600) returns -1.63
VDB calculates the depreciation allowance of an asset with an initial value, an expected useful life, and a final value of salvage for a period specified, using the variable-rate declining balance method.
VDB(cost; salvage; life; start-period; end-period; [; depreciation-factor = 2 [; switch = false]])
VDB(10000; 600; 10; 0; 0.875; 1.5) returns 1312.5
Dates
Guess
The XIRR function calculates the internal rate of return for a non-periodic series of cash flows.
XIRR( Values; Dates[; Guess = 0.1])
XIRR(B1: B4; C1: C4) Suppose B1: B4 contains -20000, 4000, 12000, 8000 while C1: C4 contains "=DATE(2000; 1; 1)", "=DATE(2000; 6; 1)", "=DATE(2000; 12; 30)", "=DATE(2001; 3; 1)" returns 0.2115964
The XNPV function calculates the net present value of a series of cash flows.
XNPV( Rate; Values; Dates)
XNPV(5%; B1: B4; C1: C4) suppose B1: B4 contains -20000, 4000, 12000, 8000 while C1: C4 contains "=DATE(2000; 1; 1)", "=DATE(2000; 6; 1)", "=DATE(2000; 12; 30)", "=DATE(2001; 3; 1)" returns 2907.83187
YIELDDISC calculates the yield of a discounted security per 100 currency units of face value.
YIELDDISC(settlement; maturity; price, redemp, basis)
YIELDDISC(DATE(1990; 6; 1); DATE(1990; 12; 31); 941.66667; 1000) returns 0.106194684
The YIELDMAT function calculates the yield of the security that pays interest on the maturity date.
YIELDMAT( Settlement; Maturity; Issue; Rate; Price; Basis)
YIELDMAT(DATE(1990; 6; 1); DATE(1995; 12; 31); DATE(1990; 1; 1); 6%; 103.819218241) returns 0.050000000
The ZERO_COUPON() function calculates the value of a zero-coupon (pure discount) bond. For example: if the interest rate is 10%, a $1000 bond that matures in 20 years is worth ZERO_COUPON(1000; .1; 20) or $148.64.
ZERO_COUPON(face value; rate; years)
ZERO_COUPON(1000; .1; 20) equals 148.64
Information
Error
The ERRORTYPE() function converts a error to a number. If the value is not an error, an error is returned. Otherwise, a numerical code is returned. Error codes are modelled on Excel.
ERRORTYPE(value)
ERRORTYPE(NA()) returns 7
ERRORTYPE(0) returns an error
The N() function converts a value to a number. If value is or refers to a number, this function returns the number. If value is True, this function returns 1. If a value is a date, this function returns the serial number of that date. Anything else will cause the function to return 0.
N(value)
N(3.14) returns 3.14
N("7 ") returns 0 (because" 7 "is text)
Type of information
The INFO() function returns information about the current operating environment. Parameter type specifies what type of information you want to return. It is one of the following: "directory" returns the path of the current directory, "numfile" returns the number of active documents, "release" returns the version of KSpread as text, "recalc" returns the current recalculation mode: "Automatic" or "Manual", "system" returns the name of the operating environment, "osversion" returns the current operating system.
INFO(type)
Any value
The ISLOGICAL() function returns True if the parameter is a boolean value. Otherwise it returns False.
ISLOGICAL(x)
ISLOGICAL(A1 > A2) returns True
ISLOGICAL(12) returns False
The ISBLANK() function returns True if the parameter is empty. Otherwise it returns False.
ISBLANK(x)
ISBLANK(A1) returns True if A1 is empty
ISBLANK(A1) returns False if A1 holds a value
The ISNUMBER() function returns True if the parameter is a numerical value. Otherwise it returns False. It's the same as ISNUM.
ISNUMBER(x)
ISNUMBER(12) returns True
ISNUMBER(hello) returns False
The ISNUM() function returns True if the parameter is a numerical value. Otherwise it returns False. It's the same as ISNUMBER.
ISNUM(x)
ISNUM(12) returns True
ISNUM(hello) returns False
The ISTIME() function returns True if the parameter is a time value. Otherwise it returns False.
ISTIME(x)
ISTIME("12:05 ") returns True
ISTIME("hello ") returns False
The ISDATE() function returns True if the parameter is a date value. Otherwise it returns False
ISDATE(x)
ISDATE("2000-2-2 ") returns True
ISDATE("hello ") returns False
The ISREF() function returns True if the parameter refers to a reference. Otherwise it returns False
ISREF(x)
ISREF(A12) returns true
ISREF("hello ") returns false
The ISTEXT() function returns True if the parameter is a string. Otherwise it returns False
ISTEXT(x)
ISTEXT(12) returns False
ISTEXT("hello ") returns True
The ISNONTEXT() function returns True if the parameter is not a string. Otherwise it returns False. It's the same as ISNOTTEXT.
ISNONTEXT(x)
ISNONTEXT(12) returns True
ISNONTEXT("hello ") returns False
The ISNOTTEXT() function returns True if the parameter is not a string. Otherwise it returns False. It's the same as ISNONTEXT.
ISNOTTEXT(x)
ISNOTTEXT(12) returns True
ISNOTTEXT("hello ") returns False
The ISODD() function returns True if the number is odd. Otherwise returns False.
ISODD(x)
ISODD(12) returns False
ISODD(-7) returns True
The ISEVEN() function returns True if the number is even. Otherwise returns False.
ISEVEN(x)
ISEVEN(12) returns True
ISEVEN(-7) returns False
The ISERR() function returns True if its parameter is an error other than N/ A. Otherwise, it returns False. Use ISERROR() if you want to include the N/ A error as well.
ISERR(x)
The ISERROR() function returns True if its parameter is an error of any type. Otherwise, it returns False.
ISERROR(x)
The ISNA() function returns True if its parameter is a N/ A error. In all other cases, it returns False.
ISNA(x)
The NA() function returns the constant error value, N/ A.
NA()
The TYPE() function returns 1 if the value is a number, 2 if it is text, 4 if the value is a logical value, 16 if it is an error value or 64 if the value is an array. If the cell the value represents contains a formula you get its return type.
TYPE(x)
TYPE(A1) returns 2, if A1 contains "Text"
TYPE(-7) returns 1
TYPE(A2) returns 1, if A2 contains "=CURRENTDATE()"
Returns the current filename. If the current document is not saved, an empty string is returned.
FILENAME()
Logical
The FALSE() function returns the boolean value FALSE.
FALSE()
FALSE() returns FALSE
The TRUE() function returns the boolean value TRUE.
TRUE()
TRUE() returns TRUE
Boolean values
The AND() function returns True if all the values are true. Otherwise it returns False (unless any of the values in an error - then it returns an error).
AND(value; value;...)
AND(true; true; true) returns True
AND(true; false) returns False
The OR() function returns True if at least one of the values is true. Otherwise it returns False (unless any of the values is an error, then it returns an error).
OR(value; value;...)
OR(false; false; false) returns False
OR(true; false) returns True
The NAND() function returns True if at least one value is not true. Otherwise it returns False.
NAND(value; value;...)
NAND(true; false; false) returns True
NAND(true; true) returns False
The NOR() function returns True if all the values given as parameters are of boolean type and have the value false. Otherwise it returns False.
NOR(value; value;...)
NOR(true; false; false) returns False
NOR(false; false) returns True
The XOR() function returns False if the number of True values is even. Otherwise it returns True. It returns an error if any argument is an error.
XOR(value; value;...)
XOR(false; false; false) returns True
XOR(true; false) returns True
Boolean value
The NOT() function returns True if the value is False and returns False if the value is True. It returns an error if the input in an error.
NOT(bool)
NOT(false) returns True
NOT(true) returns False
Condition
If true
If false
The IF() function is a conditional function. This function returns the second parameter if the condition is True. Otherwise it returns the third parameter (which defaults to being false).
IF(condition; if_true; if_false)
A1=4; A2=6; IF(A1 > A2; 5; 3) returns 3
Math
Function
The SUBTOTAL() function returns a subtotal of a given list of arguments ignoring other subtotal results in there. Function can be one of the following numbers: 1 - Average, 2 - Count, 3 - CountA, 4 - Max, 5 - Min, 6 - Product, 7 - StDev, 8 - StDevP, 9 - Sum, 10 - Var, 11 - VarP.
SUBTOTAL(function; value)
If A1: A5 contains 7, 24, 23, 56 and 9:
SUBTOTAL(1; A1: A5) returns 23.8
SUBTOTAL(4; A1: A5) returns 56
SUBTOTAL(9; A1: A5) returns 119
SUBTOTAL(11; A1: A5) returns 307.76
X the independent variable of the power series
N the initial power to which X is to be raised
M the increment by which to increase N for each term in the series
Coefficients a set of coefficients by which each successive power of the variable X is multiplied
The SERIESSUM() function returns the sum of a power series.
SERIESSUM( X; N; M; Coefficients)
SERIESSUM(2; 0; 2; {1; 2}) return 9
The LCM() function returns the least common multiple for two or more float values
LCM(value; value)
LCM(6; 4) returns 12
LCM(1.5; 2.25) returns 4.5
LCM(2; 3; 4) returns 12
Third number
The GCD() function returns the greatest common denominator for two or more integer values.
GCD(value; value)
GCD(6; 4) returns 2
GCD(10; 20) returns 10
GCD(20; 15; 10) returns 5
EPS() returns the machine epsilon; this is the difference between 1 and the next largest floating-point number. Because computers use a finite number of digits, roundoff error is inherent (but usually insignificant) in all calculations.
EPS()
On most systems, this returns 2^-52=2.2204460492503131e-16
0.5*EPS() returns the "unit round"; this value is interesting because it is the largest number x where (1+x)-1=0 (due to roundoff errors).
EPS() is so small that KSpread displays 1+eps() as 1
Pick a number x between 0 and EPS(). Observe that 1+x rounds x to either 0 or EPS() by using the equation (1+x)-1
The POWER(x; y) function returns the value of x raised to the power of y.
POWER(value; value)
POWER(1.2; 3.4) equals 1.8572
POWER(2; 3) equals 8
The POW(x; y) function returns the value of x raised to the power of y. It's the same as POWER.
POW(value; value)
POW(1.2; 3.4) equals 1.8572
POW(2; 3) equals 8
The EVEN() function returns the number rounded up to the nearest even integer.
EVEN(value)
EVEN(1.2) returns 2
EVEN(2) returns 2
Precision
The TRUNC() function truncates a numeric value to a certain precision. If the precision is omitted 0 is assumed.
TRUNC(value; precision)
TRUNC(1.2) returns 1
TRUNC(213.232; 2) returns 213.23
The ODD() function returns the number rounded up (or down, for negative values) to the nearest odd integer. By definition, ODD(0) is 1.
ODD(value)
ODD(1.2) returns 3
ODD(2) returns 3
ODD(-2) returns -3
The GAMMA() function returns the gamma function value.
GAMMA(value)
GAMMA(1) returns 1
The MOD() function returns the remainder after division. If the second parameter is null the function returns #DIV/ 0.
MOD(value; value)
MOD(12; 5) returns 2
MOD(5; 5) returns 0
This function returns -1 if the number is negative, 0 if the number is null and 1 if the number is positive.
SIGN(value)
SIGN(5) equals 1
SIGN(0) equals 0
SIGN(-5) equals -1
This function multiplies each value by -1.
INV(value)
INV(-5) equals 5
INV(5) equals -5
INV(0) equals 0
This function returns the count of integer or floating arguments passed. You can count using a range: COUNT(A1: B5) or using a list of values like COUNT(12; 5; 12.5).
COUNT(value; value; value...)
COUNT(-5; "KSpread"; 2) returns 2
COUNT(5) returns 1
This function returns the count of all non empty arguments passed. You can count using a range: COUNTA(A1: B5) or using a list of values like COUNTA(12; 5; 12.5).
COUNTA(value; value; value...)
COUNTA(-5; "KSpread"; 2) returns 3
COUNTA(5) returns 1
Cell range
This function returns the count of all empty cells within the range.
COUNTBLANK(range)
COUNTBLANK(A1: B5)
Range
Criteria
The COUNTIF() function returns the number of cells in the given range that meet the given criteria.
COUNTIF(range; criteria)
COUNTIF(A2: A3; "14") returns 1 if A2 is -4 and A3 is 14
A floating point value
The FACT() function calculates the factorial of the parameter. The mathematical expression is (value)!.
FACT(number)
FACT(10) returns 3628800
FACT(0) returns 1
The FACTDOUBLE() function calculates the double factorial of a number, i. e. x!!.
FACTDOUBLE(number)
FACTDOUBLE(6) returns 48
FACTDOUBLE(7) returns 105
The SUM() function calculates the sum of all the values given as parameters. You can calculate the sum of a range SUM(A1: B5) or a list of values like SUM(12; 5; 12.5).
SUM(value; value;...)
SUM(12; 5; 7) equals 24
SUM(12.5; 2) equals 14.5
The SUMA() function calculates the sum of all the values given as parameters. You can calculate the sum of a range SUMA(A1: B5) or a list of values like SUMA(12; 5; 12.5). If a parameter contains text or the boolean value FALSE it is counted as 0, if a parameter evaluates to TRUE it is counted as 1.
SUMA(12; 5; 7) equals 24
SUMA(12.5; 2; TRUE) equals 15.5
Check range
Sum range
The SUMIF() function calculates the sum of all values given as parameters which match the criteria. The sum range is optional. If not supplied, the values in the check range are summed. The length of the check range should be equal or less than the length of the sum range.
SUMIF(checkrange; criteria; sumrange)
SUMIF(A1: A4; "> 1") sums all values in range A1: A4 which match > 1
SUMIF(A1: A4; "=0"; B1: B4) sums all values in range B1: B4 if the corresponding value in A1: A4 matches =0
The PRODUCT() function calculates the product of all the values given as parameters. You can calculate the product of a range: PRODUCT(A1: B5) or a list of values like product(12; 5; 12.5). If no numeric values are found 0 is returned.
PRODUCT(value; value;...)
PRODUCT(3; 5; 7) equals 105
PRODUCT(12.5; 2) equals 25
The KPRODUCT() function calculates the product of all the values given as parameters. You can calculate the product of a range: KPRODUCT(A1: B5) or a list of values like KPRODUCT(12; 5; 12.5). If no numeric values are found 1 is returned.
KPRODUCT(value; value;...)
KPRODUCT(3; 5; 7) equals 105
KPRODUCT(12.5; 2) equals 25
The G_PRODUCT() function is the same as KPRODUCT. It is provided for Gnumeric compatibility.
G_PRODUCT(value; value;...)
The DIV() function divides the first value by the other values in turn.
DIV(value; value;...)
DIV(20; 2; 2) returns 5
DIV(25; 2.5) returns 10
The SUMSQ() function calculates the sum of all the squares of values given as parameters. You can calculate the sum of a range SUMSQ(A1: B5) or a list of values like SUMSQ(12; 5; 12.5).
SUMSQ(value; value;...)
SUMSQ(12; 5; 7) equals 218
SUMSQ(12.5; 2) equals 173
The MAX() function returns the largest value given in the parameters. String and logical values are ignored.
MAX(value; value;...)
MAX(12; 5; 7) returns 12
MAX(12.5; 2) returns 12.5
MAX(0.5; 0.4; TRUE; 0.2) returns 0.5
The MAXA() function returns the largest value given in the parameters. TRUE evaluates to 1, FALSE evaluates to 0. String values are ignored.
MAXA(value; value;...)
MAXA(12; 5; 7) returns 12
MAXA(12.5; 2) returns 12.5
MAXA(0.5; 0.4; TRUE; 0.2) returns 1
The MIN() function returns the smallest value given in the parameters. String and logical values are ignored.
MIN(value; value;...)
MIN(12; 5; 7) returns 5
MIN(12.5; 2) returns 2
MIN(0.4; 2; FALSE; 0.7) returns 0.4
The MINA() function returns the smallest value given in the parameters. TRUE evaluates to 1, FALSE to 0. String values are ignored.
MINA(value; value;...)
MINA(12; 5; 7) returns 5
MINA(12.5; 2) returns 2
MINA(0.4; 2; FALSE; 0.7) returns 0.
The MULTIPLY() function multiplies all the values given in the parameters. You can multiply values given by a range MULTIPLY(A1: B5) or a list of values like MULTIPLY(12; 5; 12.5). It's equivalent to PRODUCT.
MULTIPLY(value; value;...)
MULTIPLY(12; 5; 7) equals 420
MULTIPLY(12.5; 2) equals 25
The MULTINOMIAL() function returns the multinomial of each number in the parameters. It uses this formula for MULTINOMIAL(a, b, c):
(a+b+c)! / a! b! c!
MULTINOMIAL(value; value;...)
MULTINOMIAL(3; 4; 5) equals 27720
The SQRT() function returns the non-negative square root of the argument. It is an error if the argument is negative.
SQRT(x)
SQRT(9) equals 3
SQRT(-9) is an error
The SQRTPI() function returns the non-negative square root of x * PI. It is an error if the argument is negative.
SQRTPI(x)
SQRTPI(2) equals 2.506628
The LN() function returns the natural logarithm of x.
LN(x)
LN(0.8) equals -0.22314355
LN(0) equals -inf
The LOGn() function returns the base n logarithm of x.
LOGn(value; base)
LOGn(12; 10) equals 1.07918125
LOGn(12; 2) equals 3.5849625
The ROOTN() function returns the non-negative nth root of x.
ROOTN(x; n)
ROOTN(9; 2) equals 3
The CUR() function returns the non-negative cube root of x.
CUR(x)
CUR(27) equals 3
A floating point value, greater than zero
The LOG() function returns the base-10 logarithm of x.
LOG(x)
LOG(0.8) equals -0.09691001
LOG(0) is an error.
A positive floating point value
The LOG10() function returns the base-10 logarithm of the argument.
LOG10(x)
LOG10(10) equals 1.
LOG10(0) is an error.
The LOG2() function returns the base-2 logarithm of x.
LOG2(x)
LOG2(0.8) equals -0.32192809
LOG2(0) equals -inf.
The EXP() function returns the value of e (the base of natural logarithms) raised to the power of x.
EXP(x)
EXP(9) equals 8 103.08392758
EXP(-9) equals 0.00012341
The CEIL() function rounds x up to the nearest integer, returning that value as a double.
CEIL(x)
CEIL(12.5) equals 13
CEIL(-12.5) equals -12
Significance (optional)
The CEILING() function rounds x up (away from zero) to the nearest multiple of Significance. The default value for Significance is 1 (or -1 if the value is negative), which means rounding up to the nearest integer. Note that this does not match the normal mathematical definition of a ceiling function.
CEILING(x)
CEILING(12.5) equals 13
CEILING(6.43; 4) equals 8
CEILING(-6.43; -4) equals -8
Mode (optional)
Round a number x down to the nearest multiple of the second parameter, Significance.
The FLOOR() function rounds x down (towards zero) to the nearest multiple of Significance. The default value for Significance is 1, if x is positive. It is -1, if the value is negative, which means rounding up to the nearest integer. If mode is given and not equal to zero, the amount of x is rounded toward zero to a multiple of significance and then the sign applied. Otherwise, it rounds toward negative infinity. If any of the two parameters x or Significance is zero, the result is zero.
FLOOR(x)
FLOOR(12.5) equals 12
FLOOR(-12.5) equals -13
FLOOR(5; 2) equals 4
FLOOR(5; 2.2) equals 4.4
The ABS() function returns the absolute value of the floating-point number x.
ABS(x)
ABS(12.5) equals 12.5
ABS(-12.5) equals 12.5
The INT() function returns the integer part of the value.
INT(x)
INT(12.55) equals 12
INT(15) equals 15
The RAND() function returns a pseudo-random number between 0 and 1.
RAND()
RAND() equals for example 0.78309922...
A floating point value (greater 0)
The RANDEXP() function returns an exponentially-distributed pseudo-random number.
RANDEXP(x)
RANDEXP(0.88)
The RANDPOISSON() function returns a poisson-distributed pseudo-random number.
RANDPOISSON(x)
RANDPOISSON(4)
A floating point value (between 0 and 1)
Trials (greater 0)
The RANDBINOM() function returns a binomially-distributed pseudo-random number.
RANDBINOM(x)
RANDBINOM(4)
Failures (greater 0)
The RANDNEGBINOM() function returns a negative binomially-distributed pseudo-random number.
RANDNEGBINOM(x)
RANDNEGBINOM(4)
The RANDBERNOULLI() function returns a Bernoulli-distributed pseudo-random number.
RANDBERNOULLI(x)
RANDBERNOULLI(0.45)
Mean value of the normal distribution
Dispersion of the normal distribution
The RANDNORM() function returns a Normal(Gaussian)-distributed pseudo-random number.
RANDNORM(mu; sigma)
RANDNORM(0; 1)
Bottom value
Top value
The RANDBETWEEN() function returns a pseudo-random number between bottom and top value. If bottom > top this function returns Err.
RANDBETWEEN(bottom; top)
RANDBETWEEN(12; 78) equals for example 61.0811...
Multiple
The MROUND() function returns the value rounded to the specified multiple. The value and the multiple must have the same sign
MROUND(value; multiple)
MROUND(1.252; 0.5) equals 1.5
MROUND(-1.252; -0.5) equals -1.5
Digits
The ROUND(value; [digits]) function returns value rounded. Digits is the number of digits to which you want to round that number. If digits is zero or omitted, value is rounded up to the nearest integer. If digits is smaller than zero, the corresponding integer part of the number is rounded.
ROUND(value; [digits])
ROUND(1.252; 2) equals 1.25
ROUND(-1.252; 2) equals -1.25
ROUND(1.258; 2) equals 1.26
ROUND(-12.25; -1) equals -10
ROUND(-1.252; 0) equals -1
The ROUNDUP(value; [digits]) function returns value rounded up. Digits is the number of digits to which you want to round that number. If digits is zero or omitted, value is rounded up to the nearest integer.
ROUNDUP(value; [digits])
ROUNDUP(1.252; 2) equals 1.26
ROUNDUP(-1.252; 2) equals -1.25
ROUNDUP(-1.252) equals -1
The ROUNDDOWN(value; [digits]) function returns value rounded down. Digits is the number of digits to which you want to round that number. If digits is zero or omitted, value is rounded down to the nearest integer.
ROUNDDOWN(value; [digits])
ROUNDDOWN(1.252; 2) equals 1.25
ROUNDDOWN(-1.252; 2) equals -1.26
ROUNDDOWN(-1.252) equals -2
Nth term
Function FIB calculates the Nth term of a Fibonacci sequence (1, 1, 2, 3, 5, 8, 13, 21...), in which each number, after the first two, is the sum of the two numbers immediately preceding it. FIB(0) is defined to be 0.
FIB(n)
FIB(9) returns 34
FIB(26) returns 121393
Numerator
Denumerator
Function QUOTIENT returns the integer portion of numerator/ denumerator.
QUOTIENT(numerator; denumerator)
QUOTIENT(21; 4) returns 5
Function MDETERM returns the determinant of a given matrix. The matrix must be of type n x n.
MDETERM(matrix)
MDETERM(A1: C3)
First matrix
Second matrix
Function MMULT multiplies two matrices. Number of columns of the first matrix must be the same as row count of the second one. The result is a matrix.
MMULT(matrix1; matrix2)
MMULT(A1: C3)
Matrix
Calculates the inverse of the matrix.
The matrix multiplied with its inverse results in the unity matrix of the same dimension.
Invertible matrices have a non-zero determinant.
MINVERSE(matrix)
MINVERSE(A1: C3)
Dimension
Creates the unity matrix of the given dimension.
MUNIT(dimension)
MUNIT(3) creates a 3x3 unity matrix
Returns the transpose of a matrix, i. e. rows and columns of the matrix are exchanged.
TRANSPOSE(matrix)
TRANSPOSE(A1: C3)
Lookup & Reference
Row number
Column number
Absolute number (optional)
A1 style (optional)
Sheet name
The ADDRESS creates a cell address. Parameter Row is the row number and Column is the column number.
Absolute number specifies the type of reference: 1 or omitted = Absolute, 2 = Absolute row, relative column, 3 = Relative row; absolute column and 4 = Relative.
A1 Style specifies the style of the address to return. If A1 is set to TRUE (default) the address is returned in A1 style if it is set to FALSE in R1C1 style.
Sheet name is the text specifying the name of the sheet.
ADDRESS(row; col; absolute; style; sheet name)
ADDRESS(6; 4) returns $D$6
ADDRESS(6; 4; 2) returns D$6
ADDRESS(6; 4; 2; FALSE; "Sheet1") returns Sheet1! R6C[4]
ADDRESS(6; 4; 1; FALSE; "Sheet1") returns Sheet1! R6C4
ADDRESS(6; 4; 4; TRUE; "Sheet1") returns Sheet1! D6
Reference
Returns the number of areas in the reference string. An area can be asingle cell or a set of cells.
AREAS(reference)
AREAS(A1) returns 1
AREAS((A1; A2: A4)) returns 2
Index
Arguments
Returns the parameter specified by the index.
CHOOSE(index; parameter1; parameter2;...)
CHOOSE(1; "1st"; "2nd") returns "1st"
CHOOSE(2; 3; 2; 4) returns 2
The COLUMN function returns the column of given cell reference. If no parameter is specified the column of the current cell gets returned.
COLUMN(reference)
COLUMN(A1) returns 1
COLUMN(D2) returns 4
The COLUMNS function returns the number of columns in a reference.
COLUMNS(reference)
COLUMNS(A1: C3) returns 3
COLUMNS(D2) returns 1
Row
Column
If a range is given, returns value stored in a given row/ column. If one cell is given, which contains an array, then one element of the array is returned.
INDEX(cell, row, column)
INDEX(range, row, column)
INDEX(A1: C3; 2; 2), returns contents of B2
INDEX(A1; 2; 2), if A1 is a result of array calculation, returns its (2,2) element.
Returns the content of the cell specified by the reference text. The second parameter is optional.
INDIRECT(referenceText, a1 style)
INDIRECT(A1), A1 contains "B1", and B1 1 = > returns 1
INDIRECT("A1 "), returns content of A1
The ROW function returns the row of given cell reference. If no parameter is specified the row of the current cell gets returned.
ROW(reference)
ROW(A1) returns 1
ROW(D2) returns 2
The ROWS function returns the number of rows in a reference.
ROWS(reference)
ROWS(A1: C3) returns 3
ROWS(D2) returns 1
Lookup value
Lookup vector
Result vector
The LOOKUP function looks up the first parameter in the lookup vector. It returns a value in the result Vector with the same index as the matching value in the lookup vector. If value is not in the lookup vector it takes the next lower one. If no value in the lookup vector matches an error is returned. The lookup vector must be in ascending order and lookup and result vector must have the same size. Numeric values, string and boolean values are recognized. Comparison between strings is case-insensitive.
LOOKUP(value; lookup vector; result vector)
LOOKUP(1.232; A1: A6; B1: B6) for A1 = 1, A2 = 2 returns the value of B1.
Data source
Sorted (optional)
Look & #160; for & #160; a & #160; matching & #160; value & #160; in & #160; the & #160; first & #160; row & #160; of & #160; the & #160; given & #160; table, & #160; and & #160; return & #160; the & #160; value & #160; of & #160; the indicated & #160; row.
Looks up the'lookup value 'in the first row of the'data source'. If a value matches, the value in the'row 'and the column, the value was found in, is returned. If'sorted' is true (default), the first row is assumed to be sorted. The search will end, if the'lookup value 'is lower than the value, currently compared to.
HLOOKUP(Lookup value; data source; Row; Sorted)
Look for a matching value in the first column of the given table, and return the value of the indicated column.
Looks up the'lookup value 'in the first column of the'data source'. If a value matches, the value in the'column 'and the row, the value was found in, is returned. If'sorted' is true (default), the first column is assumed to be sorted. The search will end, if the'lookup value 'is lower than the value, currently compared to.
VLOOKUP(Lookup value; data source; Column; Sorted)
Formula cell
Row cell
Row replacement
Column cell (optional)
Column replacement (optional)
MULTIPLE. OPERATIONS executes the formula expression pointed to by FormulaCell and all formula expressions it depends on while replacing all references to RowCell with references to RowReplacement respectively all references to ColumnCell with references to ColumnReplacement. The function may be used to easily create tables of expressions that depend on two input parameters.
MULTIPLE. OPERATIONS(Formula cell; Row cell; Row replacement; Column cell; Column replacement)
Statistical
Floating point values
The AVEDEV() function calculates the average of the absolute deviations of a data set from their mean.
AVEDEV(value; value;...)
AVEDEV(11.4; 17.3; 21.3; 25.9; 40.1) returns 7.84
AVEDEV(A1: A5)...
The AVERAGE() function calculates the average of all the values given as parameters. You can calculate the average of a range AVERAGE(A1: B5) or a list of values like AVERAGE(12; 5; 12.5).
AVERAGE(value; value;...)
AVERAGE(12; 5; 7) equals 8
AVERAGE(12.5; 2) equals 7.25
String values
The AVERAGEA() calculates the average of the given arguments. Numbers, text and logical values are included in the calculation too. If the cell contains text or the argument evaluates to FALSE, it is counted as value zero (0). If the argument evaluates to TRUE, it is counted as one (1). Note that empty cells are not counted.
AVERAGEA(value; value;...)
AVERAGEA(11.4; 17.3; "sometext"; 25.9; 40.1) equals 18.94
Alpha parameter
Beta parameter
Start
End
Cumulative
The BETADIST() function returns the cumulative beta probability density function.
The third and fourth parameters are optional. They set the lower and upper bounds, otherwise defaulting to 0.0 and 1.0 respectively.
BETADIST(number; alpha; beta; start; end; [cumulative=TRUE])
BETADIST(0.2859; 0.2606; 0.8105) equals 0.675444
BETADIST(0.2859; 0.2606; 0.8105; 0.2; 0.9) equals 0.537856
The BETAINV() function returns the inverse of BETADIST(x; alpha; beta; a; b; TRUE()).
The start and end parameters are optional. They set the lower and upper bounds, otherwise defaulting to 0.0 and 1.0 respectively.
BETAINV(number; alpha; beta [; start=0 [; end=1]])
BETADIST(BETAINV(0.1; 3; 4); 3; 4) equals 0.1
BETADIST(BETAINV(0.3; 3; 4); 3; 4) equals 0.3
Degrees of freedom
The CHIDIST() function returns the probability value from the indicated Chi square that a hypothesis is confirmed.
CHIDIST compares the Chi square value to be given for a random sample that is calculated from the sum of (observed value-expected value)^2/ expected value for all values with the theoretical Chi square distribution and determines from this the probability of error for the hypothesis to be tested.
CHIDIST(number; degrees_freedom)
CHIDIST(13.27; 5) returns 0.021
Total number of elements
Number of elements to choose
The COMBIN() function calculates the count of possible combinations. The first parameter is the total count of elements. The second parameter is the count of elements to choose. Both parameters should be positive and the first parameter should not be less than the second. Otherwise the function returns an error.
COMBIN(total; chosen)
COMBIN(12; 5) returns 792
COMBIN(5; 5) returns 1
The COMBINA() function calculates the count of possible combinations. The first parameter is the total count of elements. The second parameter is the count of elements to choose. Both parameters should be positive and the first parameter should not be less than the second. Otherwise the function returns an error.
Level of the confidence interval
Standard deviation for the total population
Size of the total population
The CONFIDENCE() function returns the confidence interval for a population mean.
The alpha parameter must be between 0 and 1 (non-inclusive), stddev must be positive and size must be greater or equal to 1.
CONFIDENCE(alpha; stddev; size)
CONFIDENCE(0.05; 1.5; 100) equals 0.294059
Cell range of values
Second cell range of values
The CORREL() function calculates the correlation coefficient of two cell ranges.
CORREL(range1; range2)
CORREL(A1: A3; B1: B3)
The COVAR() function calculates the covariance of two cell ranges.
COVAR(range1; range2)
COVAR(A1: A3; B1: B3)
The DEVSQ() function calculates the sum of squares of deviations.
DEVSQ(value; value;...)
DEVSQ(A1: A5)
DEVSQ(21; 33; 54; 23) returns 684.75
Lambda parameter
0 = density, 1 = distribution
The EXPONDIST() function returns the exponential distribution.
The lambda parameter must be positive.
Cumulative = 0 calculates the density function; cumulative = 1 calculates the distribution.
EXPONDIST(number; lambda; cumulative)
EXPONDIST(3; 0.5; 0) equals 0.111565
EXPONDIST(3; 0.5; 1) equals 0.776870
Degrees of freedom 1
Degrees of freedom 2
The FDIST() function returns the f-distribution.
FDIST(number; degrees_freedom_1; degrees_freedom_2)
FDIST(0.8; 8; 12) yields 0.61
Number r1
Number r2
The FINV() function returns the unique non-negative number x such that FDIST(x; r1; r2) = p.
FINV(number; r1; r2)
FDIST(FINV(0.1; 3; 4); 3; 4) equals 0.1
The FISHER() function returns the Fisher transformation for x and creates a function close to a normal distribution.
FISHER(number)
FISHER(0.2859) equals 0.294096
FISHER(0.8105) equals 1.128485
The FISHERINV() function returns the inverse of the Fisher transformation for x and creates a function close to a normal distribution.
FISHERINV(number)
FISHERINV(0.2859) equals 0.278357
FISHERINV(0.8105) equals 0.669866
Floating point values, that should be counted.
Floating point values, representing the upper boundaries of the intervals.
Counts the number of values for each interval given by the border values in the second parameter.
The values in the second parameter determine the upper boundaries of the intervals. The intervals include the upper boundaries. The returned array is a column vector and has one more element than the second parameter; the last element represents the number of all elements greater than the last value in second parameter. If the second parameter is empty, all values in the first parameter are counted.
FREQUENCY(Range data; Range bins)
Cumulated flag
The GAMMADIST() function returns the gamma distribution.
If the last parameter (cumulated) is 0, it calculates the density function; if it's 1, the distribution is returned.
The first three parameters must be positive.
GAMMADIST(number; alpha; beta; cumulated)
GAMMADIST(0.758; 0.1; 0.35; 1) equals 0.995450
GAMMADIST(0.758; 0.1; 0.35; 0) equals 0.017179
The GAMMAINV() function returns the unique number x > = 0 such that GAMMAINV(x; alpha; beta; TRUE()) = p.
GAMMAINV(number; alpha; beta)
GAMMADIST(GAMMAINV(0.1; 3; 4); 3; 4) equals 0.1
GAMMADIST(GAMMAINV(0.3; 3; 4); 3; 4) equals 0.3
The number for which the integral value of standard normal distribution is to be calculated
The GAUSS() function returns the integral values for the standard normal cumulative distribution.
GAUSS(value)
GAUSS(0.25) equals 0.098706
The GEOMEAN() function returns the geometric mean of the given arguments. This is equal to the Nth root of the product of the terms.
GEOMEAN(value; value;...)
GEOMEAN(A1: A5)
GEOMEAN(21; 33; 54; 23) returns 30.45886
The HARMEAN() function returns the harmonic mean of the N data points (N divided by the sum of the inverses of the data points).
HARMEAN(value; value;...)
HARMEAN(A1: A5)
HARMEAN(21; 33; 54; 23) returns 28.588
Number of success in the sample
Number of trials
Number of success overall
Population size
The HYPGEOMDIST() function returns the hypergeometric distribution.
HYPGEOMDIST(x; n; M; N)
HYPGEOMDIST(2; 5; 6; 20) returns 0.3522
y values (array)
x values (array)
The INTERCEPT() function calculates the interception of the linear regression line with the y axis.
INTERCEPT(y; x)
The KURT() function calculates an unbiased estimate of the kurtosis of a data set. You have to provide at least 4 values, otherwise an error is returned.
KURT(value; value;...)
KURT(A1: A5)
KURT(21; 33; 54; 23) returns 1.344239
The KURTP() function calculates an population kurtosis of a data set. You have to provide at least 4 values, otherwise an error is returned.
KURTP(value; value;...)
KURTP(A1: A5)
KURTP(21; 33; 54; 23) returns -1.021
Position (from the largest)
The LARGE() function returns the k-th largest value from the data set.
LARGE(range; k)
A1: 3, A2: 1, A3: 5 = > LARGE(A1: A3; 2) returns 3
The LEGACYFDIST() function returns the f-distribution.
LEGACYFDIST(number; degrees_freedom_1; degrees_freedom_2)
LEGACYFDIST(0.8; 8; 12) yields 0.61
Probability
Mean value of the standard logarithmic distribution
Standard deviation of the standard logarithmic distribution
The LOGINV() function returns the inverse of the lognormal cumulative distribution.
LOGINV(p; mean; stdev)
LOGINV(0.1; 0; 1) equals 0.2776
Probability value for which the standard logarithmic distribution is to be calculated
The LOGNORMDIST() function returns the cumulative lognormal distribution.
LOGNORMDIST(Number; MV; STD)
LOGNORMDIST(0.1; 0; 1) equals 0.01
Floating point value or range of values
Floating point values or range of values
The MEDIAN() function calculates the median of all the values given as parameters. You can calculate the median of a range like MEDIAN(A1: B5) or a list of values like MEDIAN(12; 5; 12.5). Blank cells will be considered as a zero, and cells with text will be ignored.
MEDIAN(value; value;...)
MEDIAN(12; 5; 5.5) equals 5.5
MEDIAN(12; 7; 8; 2) equals 7.5
Float
The MODE() function returns the most frequently occurring value in the data set.
MODE(number; number2;...)
MODE(range)
MODE(12; 14; 12; 15) returns 12
Number of failures
Number of successful trials
Probability of success
The NEGBINOMDIST() function returns the negative binomial distribution.
NEGBINOMDIST(failures; success; prob_of_success)
NEGBINOMDIST(2; 5; 0.55) returns 0.152872629
Linear middle of the distribution
Standard deviation of the distribution
The NORMDIST() function returns the normal cumulative distribution.
Number is the value of the distribution based on which the normal distribution is to be calculated.
MV is the linear middle of the distribution.
STD is the standard deviation of the distribution.
K = 0 calculates the density function; K = 1 calculates the distribution.
NORMDIST(Number; MV; STD; K)
NORMDIST(0.859; 0.6; 0.258; 0) equals 0.934236
NORMDIST(0.859; 0.6; 0.258; 1) equals 0.842281
Middle value in the normal distribution
Standard deviation of the normal distribution
The NORMINV() function returns the inverse of the normal cumulative distribution. The number must be between 0 and 1 (non-inclusive) and STD must be positive.
NORMINV(number; MV; STD)
NORMINV(0.9; 63; 5) equals 69.41
Value to which the standard normal distribution is calculated
The NORMSDIST() function returns the standard normal distribution.
NORMSDIST(Number)
NORMSDIST(1) equals 0.84
The NORMSINV() function returns the inverse of the standard normal cumulative distribution. The number must be between 0 and 1 (non-inclusive).
NORMSINV(Number)
NORMSINV(0.908789) returns 1.3333
The PEARSON() function calculates the correlation coefficient of two cell ranges. It is the same as the CORREL function.
PEARSON(range1; range2)
PEARSON(A1: A3; B1: B3)
Number of elements to permutate
The PERMUT() function returns the number of permutations. The first parameter is the number of elements, and the second parameter is the number of elements used in the permutation.
PERMUT(total; permutated)
PERMUT(8; 5) equals 6720
PERMUT(1; 1) equals 1
The number for which the standard normal distribution is to be calculated
The PHI() function returns value of the distribution function for a standard normal distribution.
PHI(value)
PHI(0.25) equals 0.386668
Lambda parameter (the middle value)
The POISSON() function returns the Poisson distribution.
The lambda and number parameters must be positive.
POISSON(number; lambda; cumulative)
POISSON(60; 50; 0) equals 0.020105
POISSON(60; 50; 1) equals 0.927840
Data (array)
Order
The RANK() function returns the rank of a number in a list of numbers.
Order specifies how to rank the numbers:
If 0 or omitted, Data is ranked in descending order.
If not 0, Data is ranked in ascending order.
RSQ(Value; Data; Order)
RANK (2; {1; 2; 3}) equals 2
known Y (array)
known X (array)
The RSQ() function returns the square of the Pearson product moment correlation coefficient through data points in known_y's and known_x's.
If "arrayY" and "arrayX" are empty or have a different number of data points, then #N/ A is returned.
RSQ(known Y; known X)
The SKEW() function returns an estimate for skewness of a distribution
SKEW(number; number2;...)
SKEW(range)
SKEW(11.4; 17.3; 21.3; 25.9; 40.1) returns 0.9768
The SKEWP() function returns the population skewness of a distribution
SKEWP(number; number2;...)
SKEWP(range)
SKEWP(11.4; 17.3; 21.3; 25.9; 40.1) returns 0.6552
The SLOPE() function calculates the slope of the linear regression line.
SLOPE(y; x)
Position (from the smallest)
The SMALL() function returns the k-th smallest value from the data set.
SMALL(range; k)
A1: 3, A2: 1, A3: 5 = > SMALL(A1: A3; 1) returns 1
Number to be normalized
Mean of the distribution
Standard deviation
The STANDARDIZE() function calculates a normalized value.
STANDARDIZE(x; mean, stdev)
STANDARDIZE(4; 3; 7) returns 0.1429
The STDEV() function returns the estimate standard deviation based on a sample. The standard deviation is a measure of how widely values are dispersed from the average value.
STDEV(value; value;...)
STDEV(6; 7; 8) equals 1
The STDEVA() function returns the estimate standard deviation based on a sample. The standard deviation is a measure of how widely values are dispersed from the average value. If a referenced cell contains text or contains the boolean value FALSE, it is counted as 0. If the boolean value is TRUE it is counted as 1.
STDEVA(value; value;...)
STDEVA(6; 7; A1; 8) equals 1, if A1 is empty
STDEVA(6; 7; A1; 8) equals 3.109, if A1 is TRUE
The STDEVP() function returns the standard deviation based on an entire population
STDEVP(value; value;...)
STDEVP(6; 7; 8) equals 0.816497...
The STDEVPA() function returns standard deviation based on an entire population. If a referenced cell contains text or contains the boolean value FALSE, it is counted as 0. If the boolean value is TRUE it is counted as 1.
STDEVPA(value; value;...)
STDEVPA(6; 7; A1; 8) equals 0.816497..., if A1 is empty
STDEVPA(6; 7; A1; 8) equals 2.69..., if A1 is TRUE
STDEVPA(6; 7; A1; 8) equals 3.11..., if A1 is FALSE
The STEYX() function calculates the standard error of the predicted y value for each x in the regression.
Value (array)
The SUMPRODUCT() function (SUM(X*Y)) returns the sum of the product of these values. The number of values in the two arrays should be equal. Otherwise this function returns Err.
SUMPRODUCT(array1; array2)
SUMPRODUCT(A1: A2; B1: B2) with A1=2, A2=5, B1=3 and B2=5, returns 31
The SUMX2PY2() function (SUM(X^2+Y^2)) returns the sum of the squares of these values. The number of values in the two arrays should be equal. Otherwise this function returns Err.
SUMX2PY2(array1; array2)
SUMX2PY2(A1: A2; B1: B2) with A1=2, A2=5, B1=3 and B2=5, returns 63
The SUMX2MY2() function (SUM(X^2-Y^2)) returns the difference of the squares of these values. The number of values in the two arrays should be equal. Otherwise this function returns Err.
SUMX2MY2(array1; array2)
SUMX2MY2(A1: A2; B1: B2) with A1=2, A2=5, B1=3 and B2=5, returns -5
Degrees of freedom for the t-distribution
Mode (1 or 2)
The TDIST() function returns the t-distribution.
Mode = 1 returns the one-tailed test, Mode = 2 returns the two-tailed test.
TDIST(number; degrees_freedom; mode)
TDIST(12; 5; 1) returns 0.000035
KnownY
KnownX
NumberSequence newX
allowOffset
The TREND() function calculates a sequence of values based on a linear regression of known value pairs.
Constraints: COUNT(knownY) = COUNT(knownX).
TREND(knownY[; knownX[; newX[; allowOffset = TRUE]]])
dataSet
cutOffFraction
The TRIMMEAN() function calculates the mean of a data set's fraction.
TRIMMEAN(dataSet; cutOffFraction)
x (array)
y (array)
mode
The TTEST() function calculates the probability of a t-test.
TTEST(x; y; type; mode)
The VAR() function calculates the estimates variance based on a sample.
VAR(value; value;...)
VAR(12; 5; 7) equals 13
VAR(15; 80; 3) equals 1716.333...
VAR(6; 7; 8) equals 1
The VARA() function calculates the variance based on a sample.
VARA(value; value;...)
VARA(12; 5; 7) equals 13
VARA(15; 80; 3) equals 1716.333...
VARA(6; 7; 8) equals 1
The VARIANCE() function calculates the estimates variance based on a sample. It's the same as the VAR function.
VARIANCE(value; value;...)
VARIANCE(12; 5; 7) equals 13
VARIANCE(15; 80; 3) equals 1716.333...
VARIANCE(6; 7; 8) equals 1
The VARP() function calculates the variance based on an entire population.
VARP(value; value;...)
VARP(12; 5; 7) equals 8.666...
VARP(15; 80; 3) equals 1144.22...
VARP(6; 7; 8) equals 0.6666667...
The VARPA() function calculates the variance based on an entire population. Text and boolean values that evaluate to FALSE are counted as 0, boolean value that evaluate to TRUE are counted as 1.
VARPA(value; value;...)
VARPA(12; 5; 7) equals 8.666...
VARPA(15; 80; 3) equals 1144.22...
VARPA(6; 7; 8) equals 0.6666667...
The WEIBULL() function returns the Weibull distribution.
The alpha and beta parameters must be positive, the number (first parameter) must be non-negative.
WEIBULL(number; alpha; beta; cumulative)
WEIBULL(2; 1; 1; 0) equals 0.135335
WEIBULL(2; 1; 1; 1) equals 0.864665
mean
standardDeviation
The ZTEST() function calculates the two tailed probability of a z-test with normal distribution.
ZTEST(x; mean; standardDeviation)
Performs a test of the null hypothesis, that sample is a sample of a normal distributed random variable with mean mean and standard deviation sigma. A return value of 1 indicates, that the null hypothesis is rejected, i. e. the sample is not a random sample of the normal distribution. If sigma is omitted, it is estimated from sample, using STDEV.
The BINO() function returns the binomial distribution.
The first parameter is the number of trials, the second parameter is the number of successes, and the third is the probability of success. The number of trials should be greater than the number of successes and the probability should be smaller or equal to 1.
BINO(trials; success; prob_of_success)
BINO(12; 9; 0.8) returns 0.236223201
The SUMXMY2() function (SUM((X-Y)^2)) returns the square of the differences of these values. The number of values in the two arrays should be equal. Otherwise this function returns Err.
SUMXMY2(array1; array2)
SUMXMY2(A1: A2; B1: B2) with A1=2, A2=5, B1=3 and B2=5, returns 1
Probability of failure
The INVBINO() function returns the negative binomial distribution. The first parameter is the number of trials, the second parameter is the number of failures, and the third is the probability of failure. The number of trials should be larger than the number of failures and the probability should be smaller or equal to 1.
INVBINO(trials; failure; prob_of_failure)
INVBINO(12; 3; 0.2) returns 0.236223201
The GAMMALN() function returns the natural logarithm of the gamma function: G(x). The number parameter must be positive.
GAMMALN(Number)
GAMMALN(2) returns 0
Decimals
The DOLLAR() function converts a number to text using currency format, with the decimals rounded to the specified place. Although the name is DOLLAR, this function will do the conversion according to the current locale.
DOLLAR(number; decimals)
DOLLAR(1403.77) returns "$1,403.77"
DOLLAR(-0.123; 4) returns "$-0.1230"
No_commas
The FIXED() function rounds a number to the specified number of decimals, formats the number in decimal format string, and returns the result as text. If decimals is negative, number is rounded to the left of the decimal point. If you omit decimals, it is assumed to be 2. If optional parameter no_commas is True, thousand separators will not show up.
FIXED(number; decimals; no_commas)
FIXED(1234.567; 1) returns "1,234.6"
FIXED(1234.567; 1; FALSE) returns "1234.6"
FIXED(44.332) returns "44.33"
Text for which you want to substitute
Part of text you want to replace
New text which will be replacement
Which occurrence to replace
The SUBSTITUTE() substitutes new_text for old_text in a text string. If instance_num is specified, only that instance of old_text is replaced. Otherwise, every occurrence of old_text is changed to new_text. Use SUBSTITUTE when you want to replace specific text, use REPLACE when you want to replace any text that occurs in a specific location.
SUBSTITUTE(text; old_text; new_text; instance_num)
SUBSTITUTE("Cost Data ";" Cost ";" Sales ") returns" Sales Data "
SUBSTITUTE("Qtr 1, 2001 ";" 1 ";" 3 "; 1) returns" Qtr 3, 2001 "
SUBSTITUTE("Qtr 1, 2001 ";" 1 ";" 3 "; 4) returns" Qtr 3, 2003 "
The text you want to find
The text which may contain find_text
Specified index to start the search
The SEARCH() function finds one text string (find_text) within another text string (within_text) and returns the number of the starting point of find_text, from the leftmost character of within_text.
You can use wildcard characters, question mark (?) and asterisk (*). A question mark matches any single character, an asterisk matches any sequences of characters.
Parameter start_num specifies the character at which to start the search. The first character is character number 1. If start_num is omitted, it is assumed to be 1. SEARCH does not distinguish between uppercase and lowercase letters.
SEARCH(find_text; within_text; start_num)
SEARCH("e ";" Statements "; 6) returns 7
SEARCH("margin ";" Profit Margin ") returns 8
The T() function returns the text referred to by value. If value is, or refers to, text then T returns value. If value does not refer to text then T returns empty text.
T(value)
T("KOffice ") returns" KOffice "
T(1.2) returns "" (empty text)
The TEXT() function converts a value to text.
TEXT(value)
TEXT(1234.56) returns "1234.56"
TEXT("KSpread ") returns" KSpread "
String
The PROPER() function converts the first letter of each word to uppercase and the rest of the letters to lowercase.
PROPER(string)
PROPER("this is a title ") returns" This Is A Title "
First string
String to compare with
Compare case-sensitive (true/ false)
The COMPARE() function returns 0 if the two strings are equal; -1 if the first one is lower in value than the second one; otherwise it returns 1.
COMPARE(string1; string2; true|false)
COMPARE("KOffice ";" KOffice "; true) returns 0
COMPARE("koffice ";" KOffice "; true) returns 1
COMPARE("kspread ";" KOffice "; false) returns 1
The EXACT() function returns True if these two strings are equal. Otherwise, it returns False.
EXACT(string1; string2)
EXACT("KOffice ";" KOffice ") returns True
EXACT("KSpread ";" KOffice ") returns False
Text which you want to replace some characters
Position of the characters to replace
Number of characters to replace
The text that will replace characters in old text
The REPLACE() function replaces part of a text string with a different text string.
REPLACE(text; position; length; new_text)
REPLACE("abcdefghijk "; 6; 5;" - ") returns" abcde-k "
REPLACE("2002 "; 3; 2;" 03 ") returns" 2003 "
Specifies index to start the search
The FIND() function finds one text string (find_text) within another text string (within_text) and returns the number of the starting point of find_text, from the leftmost character of within_text.
Parameter start_num specifies the character at which to start the search. The first character is character number 1. If start_num is omitted, it is assumed to be 1.
You can also use function SEARCH, but unlike SEARCH, FIND is case-sensitive and does not allow wildcard characters.
FIND(find_text; within_text; start_num)
FIND("KOf ";" KOffice ") returns 1
FIND("i ";" KOffice ") returns 5
FIND("K ";" KSpread in KOffice "; 4) returns 12
Source string
Position
Length
The MID() function returns a substring that contains'length 'characters of the string, starting at'position' index.
MID(text; position; length)
MID(text; position)
MID("KOffice "; 2; 3) returns" Off "
MID("KOffice "; 2) returns" Office "
The LEN() function returns the length of the string.
LEN(text)
LEN("hello ") returns 5
LEN("KSpread ") returns 7
The TRIM() function returns text with only single spaces between words.
TRIM(text)
TRIM( "hello KSpread") returns "hello KSpread"
The CONCATENATE() function returns a string which is the concatenation of the strings passed as parameters.
CONCATENATE(value; value;...)
CONCATENATE("KSpread ";" KOffice ";" KDE ") returns" KSpreadKOfficeKDE "
Number of characters
The RIGHT() function returns a substring that contains the'length 'rightmost characters of the string. The whole string is returned if'length' exceeds the length of the string.
RIGHT(text; length)
RIGHT("hello "; 2) returns" lo "
RIGHT("KSpread "; 10) returns" KSpread "
RIGHT("KSpread ") returns" d "
The LEFT() function returns a substring that contains the'length 'leftmost characters of the string. The whole string is returned if'length' exceeds the length of the string. It is an error for the number of characters to be less than 0.
LEFT(text; length)
LEFT("hello "; 2) returns" he "
LEFT("KSpread "; 10) returns" KSpread "
LEFT("KSpread ") returns" K "
Count of repetitions
The REPT() function repeats the first parameter as many times as by the second parameter. The second parameter must not be negative, and this function will return an empty string if the second parameter is zero (or rounds down to zero).
REPT(text; count)
REPT("KSpread "; 3) returns" KSpreadKSpreadKSpread "
REPT("KSpread "; 0) returns" "
The ROT() function encrypts text by replacing each letter with the one 13 places along in the alphabet. If the 13th position is beyond the letter Z, it begins again at A (rotation).
By applying the encryption function again to the resulting text, you can decrypt the text.
ROT(Text)
ROT("KSpread ") returns" XFcernq "
ROT("XFcernq ") returns" KSpread "
The TOGGLE() function changes lowercase characters to uppercase and uppercase characters to lowercase.
TOGGLE(text)
TOGGLE("hello ") returns" HELLO "
TOGGLE("HELLO ") returns" hello "
TOGGLE("HeLlO ") returns" hElLo "
The CLEAN() function removes every non-printable character from the string
CLEAN(text)
CLEAN(AsciiToChar(7) + "HELLO") returns "HELLO"
The SLEEK() function removes all spaces from the string.
SLEEK(text)
SLEEK("This is some text ") returns" Thisissometext "
The UPPER() function converts a string to upper case.
UPPER(text)
UPPER("hello ") returns" HELLO "
UPPER("HELLO ") returns" HELLO "
The LOWER() function converts a string to lower case.
LOWER(text)
LOWER("hello ") returns" hello "
LOWER("HELLO ") returns" hello "
Character code
The CHAR() function returns the character specified by a number.
CHAR(code)
CHAR(65) returns "A"
The CODE() function returns a numeric code for the first character in a text string.
CODE(text)
CODE("KDE ") returns 75
Converts text string that represents a value to the real value.
VALUE(text)
VALUE("14.03 ") returns 14.03
Searched text
Regular expression
Default value (optional)
Back-reference (optional)
Returns a part of the string that matches a regular expression. If the string does not match the given regular expression, value specified as default is returned.
If a back-reference is provided, then the value of that back-reference is returned.
If no default value is given, an empty string is assumed. If no back-reference is given, 0 is assumed (so that entire matching part is returned).
REGEXP(text; regexp; default; backref)
REGEXP("Number is 15. ";" [0-9]+ ") =" 15 "
REGEXP("15, 20, 26, 41 ";" ([0-9]+), *[0-9]+$ ";" "; 1) =" 26 "
Replacement
Replaces all matches of a regular expression with the replacement text
REGEXPRE(text; regexp; replacement)
REGEXPRE("14 and 15 and 16 ";" [0-9]+ ";" num ") returns" num and num and num "
The UNICODE() function returns a unicode code point for the first character in a text string.
UNICODE(text)
UNICODE("KDE ") returns 75
The UNICHAR() function returns the character specified by a unicode code point.
UNICHAR(code)
UNICHAR(65) returns "A"
Full width characters
The ASC() function returns the half-width characters corresponding to the full-width argument.
ASC(text)
Half-width characters
The JIS() function returns the full-width characters corresponding to the half-width argument.
JIS(text)
The BAHTTEXT() function converts a number to a text in Thai characters (baht).
BAHTTEXT(number)
BAHTTEXT(23) returns "ยี่สิบสามบาทถ้วน "
Trigonometric
The COS() function returns the cosine of x, where x is given in radians.
COS(Float)
COS(0) equals 1.0
COS(PI()/ 2) equals 0
The ACOT() function returns the inverse cotangent of a number.
ACOT(Float)
ACOT(0) equals 1.57079633
The SIN() function returns the sine of x, where x is given in radians.
SIN(Float)
SIN(0) equals 0
SIN(PI()/ 2) equals 1
The TAN() function returns the tangent of x, where x is given in radians.
TAN(Float)
TAN(0.7) equals 0.84228838
TAN(0) equals 0
The ACOS() function returns the arc cosine in radians and the value is mathematically defined to be 0 to PI (inclusive).
ACOS(Float)
ACOS(0.8) equals 0.6435011
ACOS(0) equals 1.57079633
The ASIN() function returns the arc sine in radians and the value is mathematically defined to be -PI/ 2 to PI/ 2 (inclusive).
ASIN(Float)
ASIN(0.8) equals 0.92729522
ASIN(0) equals 0
The ATAN() function returns the arc tangent in radians and the value is mathematically defined to be -PI/ 2 to PI/ 2 (inclusive).
ATAN(Float)
ATAN(0.8) equals 0.67474094
ATAN(0) equals 0
The COSH() function returns the hyperbolic cosine of x, which is defined mathematically as (exp(x) + exp(-x)) / 2.
COSH(Float)
COSH(0.8) equals 1.33743495
COSH(0) equals 1
The SINH() function returns the hyperbolic sine of x, which is defined mathematically as (exp(x) - exp(-x)) / 2.
SINH(Float)
SINH(0.8) equals 0.88810598
SINH(0) equals 0
The TANH() function returns the hyperbolic tangent of x, which is defined mathematically as sinh(x)/ cosh(x).
TANH(Float)
TANH(0.8) equals 0.66403677
TANH(0) equals 0
The ACOSH() function calculates the inverse hyperbolic cosine of x. That is the value whose hyperbolic cosine is x. If x is less than 1.0, acosh() returns not-a-number (NaN) and errno is set.
ACOSH(Float)
ACOSH(5) equals 2.29243167
ACOSH(0) equals NaN
The ASINH() function calculates the inverse hyperbolic sine of x; that is the value whose hyperbolic sine is x.
ASINH(Float)
ASINH(0.8) equals 0.73266826
ASINH(0) equals 0
The ATANH() function calculates the inverse hyperbolic tangent of x; that is the value whose hyperbolic tangent is x. If the absolute value of x is greater than 1.0, ATANH() returns not-a-number (NaN).
ATANH(Float)
ATANH(0.8) equals 1.09861229
ATANH(0) equals 0
This function calculates the arc tangent of the two variables x and y. It is similar to calculating the arc tangent of y/ x, except that the signs of both arguments are used to determine the quadrant of the result.
ATAN2(value; value)
ATAN2(0.5; 1.0) equals 1.107149
ATAN2(-0.5; 2.0) equals 1.815775
This function transforms a radian angle to a degree angle.
DEGREES(Float)
DEGREES(0.78) equals 44.69
DEGREES(1) equals 57.29
Angle (degrees)
This function transforms a degree angle to a radian angle.
RADIANS(Float)
RADIANS(75) equals 1.308
RADIANS(90) equals 1.5707
The PI() function returns the value of PI.
PI()
PI() equals 3.141592654...
Processing is not possible, because some cells are protected.
Processing is not possible, because some cells are locked as elements of a matrix.
Apply Filter
January
February
March
April
May
June
July
August
September
October
November
December
Jan
Feb
Mar
Apr
Jun
Jul
Aug
Sep
Oct
Nov
Dec
Monday
Tuesday
Wednesday
Thursday
Friday
Saturday
Sunday
Mon
Tue
Wed
Thu
Fri
Sat
Sun
Autofill
Auto-Filter
Auto-Format
Change Border Color
Remove Comment
Add Comment
Remove Conditional Formatting
Add Conditional Formatting
Change Value
Insert Series
Fill Selection
Change Case
Insert Cells
Remove Cells
Increase Indentation
Decrease Indentation
Remove Link
Set Link
Merge Cells Horizontally
Merge Cells Vertically
Dissociate Cells
Merging of columns or rows is not supported.
Add Named Area
Remove Named Area
Increase Precision
Decrease Precision
Resize Column
Resize Row
Adjust Columns/ Rows
Adjust Columns
Adjust Rows
Insert Columns
Remove Columns
Insert Rows
Remove Rows
Rename Sheet
Hide Sheet %1
Hide Sheet
Show Sheet %1
Show Sheet
Add Sheet
Duplicate Sheet
Remove Sheet
Change Sheet Properties
Sort Data
Do you want to check the spelling in the next sheet?
Correct Misspelled Words
Reset Style
Change Style
Hide Rows
Hide Columns
Show Rows
Show Columns
Set Page Layout
Change Format
Change Angle
Sort
Drag & Drop
Resize
Change Text
Insert Cell
Remove Cell
Conditional Styles
Paste
Paste & Insert
Style of Cell
Insert Data From Database
Remove Validity Check
Add Validity Check
All
Empty
Non-empty
Enter the area name:
The named area '%1 'already exists. Do you want to replace it?
Replace Named Area
Angle:
Sheet Style
Select the sheet style to apply:
Could not find image %1.
Could not load image %1.
Could not find sheet-style XML file '%1 '.
Parsing error in sheet-style XML file %1.
Cell Comment
< none >
equal to
greater than
less than
equal to or greater than
equal to or less than
between
outside range
different to
First Condition
Second Condition
Third Condition
Cell is
Cell style
different from
If the first value is a number, the second value also has to be a number.
If the first value is a string, the second value also has to be a string.
Consolidate
& Function:
Sum
Average
Count
Max
Min
Product
Standard Deviation
Variance
Reference:
& Entered references:
& Description in row
Description in column
Copy data
& Add
& Remove
The range %1 is too small
The range %1 is too large
The ranges %1 and %2 have different size
The source tables intersect with the destination table
The range %1 is malformed
Inserting From Clipboard
There is no data in the clipboard.
There is no usable data in the clipboard.
Inserting Text File
Text to Columns
Cannot open input file.
Type:
User name: (if necessary)
Host:
Port: (if necessary)
Database name:
Password: (if necessary)
Select tables:
Tables
Select columns:
Table
Match all of the following (AND)
Match any of the following (OR)
equals
not equal
in
not in
like
greater
lesser
greater or equal
less or equal
Sorted by
Ascending
Descending
Distinct
Query Options
SQL query:
Insert in region
Starting in cell
You cannot specify a table here.
You have to specify a valid region.
You have to specify a valid cell.
You are not allowed to change data in the database.
Executing query failed.
You did not get any results with this query.
The port must be a number
Connecting to database...
Connected. Retrieving table information...
This database contains no tables
Driver could not be loaded
Retrieving meta data of tables...
You have to select at least one table.
You have to select at least one column.
None
'* 'or'? 'are not valid wildcards in SQL. The proper replacements are'% 'or '_'. Do you want to replace them?
Document Settings
Locale Settings
Document's Locale Settings
& Use System's Locale Settings
Language: %1
Default number format: %1
Long date format: %1
Short date format: %1
Time format: %1
Currency format: %1
More Options
Search entire sheet
Search in:
Cell Values
Comments
Search direction:
Across then Down
Down then Across
Fewer Options
Insert function
Help
This function has no parameters.
Description is not available.
Goal Seek
Set cell:
To value:
By changing cell:
& Start
Current value:
New value:
Goal seeking with cell< cell > found solution:
Cell reference is invalid.
Target value is invalid.
Source cell must contain a numeric value.
Target cell must contain a formula.
& OK
Starting...
Iteration:
Goal seeking with cell %1 found a solution:
Goal seeking with cell %1 has found NO solution.
Goto Cell
Enter cell:
Insert
Move towards right
Move towards bottom
Insert rows
Insert columns
Remove
Move towards left
Move towards top
Remove rows
Remove columns
Style
Name:
Inherit style:
A style with this name already exists.
The style name can not be empty.
A style cannot inherit from itself.
The style cannot inherit from '%1 'because of recursive references.
Cell Format
& General
& Data Format
& Font
& Position
& Border
Background
& Cell Protection
This is the default format and KSpread autodetects the actual data type depending on the current cell data. By default, KSpread right justifies numbers, dates and times within a cell and left justifies anything else.
The number notation uses the notation you globally choose in KControl - > Regional & Accessibility - > Numbers tab. Numbers are right justified by default.
When you have a number in the current cell and you switch from the dcell format from Generic to Percent, the current cell number will be multiplied by 100%. For example if you enter 12 and set the cell format to Percent, the number will then be 1,200%. Switching back to Generic cell format will bring it back to 12. You can also use the Percent icon in the Format Toolbar.
The Money format converts your number into money notation using the settings globally fixed in KControl in Regional & Accessibility - > Money. The currency symbol will be displayed and the precision will be the one set in KControl. You can also use the Currency icon in the Format Toolbar to set the cell formatting to look like your current currency.
Scientific
The scientific format changes your number using the scientific notation. For example, 0.0012 will be changed to 1.2E-03. Going back using Generic cell format will display 0.0012 again.
The fraction format changes your number into a fraction. For example, 0.1 can be changed to 1/ 8, 2/ 16, 1/ 10, etc. You define the type of fraction by choosing it in the field on the right. If the exact fraction is not possible in the fraction mode you choose, the nearest closest match is chosen. For example: when we have 1.5 as number, we choose Fraction and Sixteenths 1/ 16 the text displayed into cell is "1 8/ 16" which is an exact fraction. If you have 1.4 as number in your cell and you choose Fraction and Sixteenths 1/ 16 then the cell will display "1 6/ 16" which is the nearest closest Sixteenth fraction.
To enter a date, you should enter it in one of the formats set in KControl in Regional & Accessibility - > Time & Dates. There are two formats set here: the date format and the short date format. Just like you can drag down numbers you can also drag down dates and the next cells will also get dates.
This formats your cell content as a time. To enter a time, you should enter it in the Time format set in KControl in Regional & Accessibility - > Time & Dates. In the Cell Format dialog box you can set how the time should be displayed by choosing one of the available time format options. The default format is the system format set in KControl. When the number in the cell does not make sense as a time, KSpread will display 00:00 in the global format you have in KControl.
This formats your cell content as date and time. To enter a date and a time, you should enter it in the Time format set in KControl in Regional & Accessibility - > Time & Dates. In the Cell Format dialog box you can set how the time should be displayed by choosing one of the available date format options. The default format is the system format set in KControl. When the number in the cell does not make sense as a date and time, KSpread will display 00:00 in the global format you have in KControl.
This formats your cell content as text. This can be useful if you want a number treated as text instead as a number, for example for a ZIP code. Setting a number as text format will left justify it. When numbers are formatted as text, they cannot be used in calculations or formulas. It also change the way the cell is justified.
Custom
The custom format does not work yet. To be enabled in the next release.
This will display a preview of your choice so you can know what it does before clicking the OK button to validate it.
Displays choices of format for the fraction, date or time formats.
You can add here a Postfix such as a $HK symbol to the end of each cell content in the checked format.
variable
You can control how many digits are displayed after the decimal point for numeric values. This can also be changed using the Increase precision or Decrease precision icons in the Format toolbar.
You can add here a Prefix such as a $symbol at the start of each cell content in the checked format.
You can choose whether positive values are displayed with a leading + sign and whether negative values are shown in red.
Automatic
Halves 1/ 2
Quarters 1/ 4
Eighths 1/ 8
Sixteenths 1/ 16
Tenths 1/ 10
Hundredths 1/ 100
One digit 5/ 9
Two digits 15/ 22
Three digits 153/ 652
System:
(=[mm]: ss)
(=[hh]: mm: ss)
(=[hh]: mm)
Dolor Ipse
Default width (%1 %2)
Default height (%1 %2)
Border
Preselect
Pattern
Customize
Background color:
No Color
Insert Link
Internet
Link to Internet Address
Text to display:
Internet address:
Mail
Link to Mail Address
Email:
Subject:
File
Link to File
File location:
Recent file:
No Entries
Cell
Link to Cell
Cell or Named Area:
Internet address is empty
Mail address is empty
File name is empty
Destination cell is empty
Custom Lists
List:
Entry:
Add
Cancel
New
Modify
Copy
Do you really want to remove this list?
Remove List
Entry area is not empty. Do you want to continue?
& Select
& Edit...
& New...
Named Areas
Area: %1
New Named Area
Edit Named Area
Do you really want to remove this named area?
Cells:
Sheet:
Area name:
Paste Inserting Cells
Series
Insert Values
Insert the series vertically, one below the other
Insert the series horizontally, from left to right
Type
Linear (2,4,6,...)
Generate a series from'start 'to'end' and for each step add the value provided in step. This creates a series where each value is'step 'larger than the value before it.
Geometric (2,4,8,...)
Generate a series from'start 'to'end' and for each step multiply the value with the value provided in step. Using a step of 5 produces a list like: 5, 25, 125, 625 since 5 multiplied by 5 (step) equals 25, and that multiplied by 5 equals 125, which multiplied by the same step-value of 5 equals 625.
Start value:
Stop value:
Step value:
End and start value must be positive.
End value must be greater than the start value or the step must be less than '1 '.
None of the Start, Stop or Step values may be equal to zero.
Step value must be different from 1
Step is negative.
The step value must be greater than zero; otherwise, the linear series is infinite.
If the start value is greater than the end value the step must be less than zero.
If the step is negative, the start value must be greater then the end value.
Select hidden columns to show:
Select hidden rows to show:
Column: %1
Row: %1
Select hidden sheets to show:
Sorting
Layout
Sort & Rows
Sort & Columns
Sort By
Then By
Sort Criteria
First Key
& Use custom list
Copy cell & formatting (Borders, Colors, Text Style)
Case sensitive sort
(Column %1)
Column %1
(Row %1)
Row %1
& First row contains headers
& First column contains headers
Special Paste
& Modify...
& Delete...
Style Manager
All Styles
Custom Styles
Hierarchical
style%1
Subtotals
Remove All
You need to select at least one column for adding subtotals.
Grand Total
Column '%1 '
CountA
StDev
StDevP
Var
VarP
Validity
Clear & All
& Criteria
Allow:
Integer
Text Length
List
Allow blanks
Data:
Minimum:
Maximum:
Date:
Date minimum:
Date maximum:
Time:
Time minimum:
Time maximum:
Number:
Entries:
& Error Alert
Show error message when invalid values are entered
Action:
Stop
Warning
Title:
Message:
Input Help
Show input help when cell is selected
This is not a valid value.
This is not a valid time.
This is not a valid date.
Bit Operation Functions
Conversion Functions
Database Functions
DateTime Functions
Engineering Functions
Financial Functions
Information Functions
Logic Functions
Math Functions
Reference Functions
Statistical Functions
Text Functions
Trig Functions
KOffice Spreadsheet Application
KSpread
(c) 1998-2008, The KSpread Team
Torben Weis
Original Author
Marijn Kruisselbrink
Maintainer
Laurent Montel
John Dailey
Philipp Müller
Ariya Hidayat
Norbert Andres
Shaheed Haque
Import/ export filter developer
Werner Trobin
Nikolas Zimmermann
David Faure
Helge Deller
Percy Leonhart
Eva Brucherseifer
Phillip Ezolt
Enno Bartels
Graham Short
Lukáš Tinkl
Tomas Mecir
Raphael Langerhorst
John Tapsell
Robert Knight
Stefan Nikolaus
Sascha Pfau
Developer (functions)
Sebastian Sauer
Scripting Plugin
Brad Hards
Implemented, reviewed and tested various functions
Comment:
Define Print Range
Define the print range in the current sheet
Link %1 activated
This link points to the program or script '%1 '. Malicious programs can harm your computer. Are you sure that you want to run this program?
Open Link?
Cell Tool
Invalid OASIS OpenDocument file. No office: body tag found.
Invalid OASIS OpenDocument file. No tag found inside office: body.
This document is not a spreadsheet, but %1. Please try opening it with the appropriate application.
Invalid document. Expected mimetype application/ x-kspread or application/ vnd. kde. kspread, got %1
This document was created with a newer version of KSpread (syntax version: %1) When you open it with this version of KSpread, some information may be lost.
File Format Mismatch
Styles cannot be loaded.
Invalid document. No map tag.
Area is too large.
Height: %1 %2
Hide Row
Width: %1 %2
Hide Column
File to open
Execute the scriptfile after startup.
Sheet %1 could not be found for printing
Nothing to print for sheet(s) %1.
Sheet Properties
Modify current sheet's properties
Sheet
Insert Sheet
Insert a new sheet
Duplicate the selected sheet
Remove the active sheet
Rename Sheet...
Rename the active sheet
Show Sheet...
Show a hidden sheet
Hide the active sheet
Page Layout...
Specify the layout of the spreadsheet for a printout
Reset Print Range
Reset the print range in the current sheet
Page Borders
Show on the spreadsheet where the page borders will be
Recalculate Sheet
Recalculate
Recalculate the value of every cell in the current worksheet
Recalculate Document
Recalculate the value of every cell in all worksheets
Protect & Sheet...
Protect the sheet from being modified
Protect & Document...
Protect the document from being modified
& Create Template From Document...
Anchor
Page
Switch shape anchoring
Next Sheet
Next
Move to the next sheet
Previous Sheet
Previous
Move to the previous sheet
First Sheet
First
Move to the first sheet
Last Sheet
Move to the last sheet
Column Header
Show the column header
Row Header
Show the row header
Horizontal Scrollbar
Show the horizontal scrollbar
Vertical Scrollbar
Show the vertical scrollbar
Status Bar
Show the status bar
Tab Bar
Show the tab bar
Set various KSpread options
No calculation
Calculate using sum
Calculate using minimum
Calculate using maximum
Calculate using average
Calculate using the count
Calculate using the countA
Tools
Change Text Color
Change Background Color
Change Border
You cannot change a protected sheet.
You cannot hide the last visible sheet.
Enter a password.
Protect Document
Enter the password.
Unprotect Document
Password is incorrect.
Protect Sheet
Unprotect Sheet
You cannot delete the only sheet.
You are about to remove the active sheet. Do you want to continue?
& Delete
Enter name:
Sheet name cannot be empty.
Change Sheet Name
This name is already used.
Sum:
Average:
Min:
Max:
Count:
CountA:
%1%
No Limit
Configure KSpread
Interface
Down
Up
Down, First Column
Open/ Save
Function Modules
Plugins
Spelling
Spell Checker Behavior
Undo/ redo limit:
& Completion mode:
Lets you choose the (auto) text completion mode from a range of options in the drop down selection box.
Manual
Popup
Semi-Automatic
Sheets
Cell Format...
Set the cell formatting
Resets to the default format
Edit and organize cell styles
Apply a predefined style to the selected cells
Create Style From Cell...
Style From Cell
Create a new style based on the currently selected cell
Strike Out
Select Font...
Select Font Size
Font Size
Increase Font Size
Decrease Font Size
Text Color
Align Left
Left justify the cell contents
Align Center
Center the cell contents
Align Right
Right justify the cell contents
Align Top
Align cell contents along the top of the cell
Align Middle
Align cell contents centered in the cell
Align Bottom
Align cell contents along the bottom of the cell
Border Left
Set a left border to the selected area
Border Right
Set a right border to the selected area
Border Top
Set a top border to the selected area
Border Bottom
Set a bottom border to the selected area
All Borders
Set a border around all cells in the selected area
No Borders
Remove all borders in the selected area
Border Outline
Outline
Set a border to the outline of the selected area
Border Color
Select a new border color
Wrap Text
Wrap
Make the cell text wrap onto multiple lines
Vertical Text
Print cell contents vertically
Increase Indent
Increase the indentation
Decrease Indent
Decrease the indentation
Change Angle...
Angle
Change the angle that cell contents are printed
Percent Format
Set the cell formatting to look like a percentage
Money Format
Set the cell formatting to look like your local currency
Increase the decimal precision shown onscreen
Decrease the decimal precision shown onscreen
Upper Case
Upper
Convert all letters to upper case
Lower Case
Lower
Convert all letters to lower case
Convert First Letter to Upper Case
First Letter Upper
Capitalize the first letter
Background Color
Set the background color
Merge the selected region
Merge the selected region horizontally
Merge the selected region vertically
Unmerge the selected region
Resize Column...
Change the width of a column
Inserts a new column into the spreadsheet
Removes a column from the spreadsheet
Hide the column from this
Show Columns...
Show hidden columns
Equalize Column
Resizes selected columns to be the same size
Show hidden columns in the selection
Resize Row...
Change the height of a row
Rows
Inserts a new row into the spreadsheet
Removes a row from the spreadsheet
Hide a row from this
Show Rows...
Show hidden rows
Equalize Row
Resizes selected rows to be the same size
Show hidden rows in the selection
Adjust Row & & Column
Adjusts row/ column size so that the contents will fit
Cells...
Insert Cells...
Insert a blank cell into the spreadsheet
Remove Cells...
Removes the cells from the spreadsheet
Clear All
Clear all contents and formatting of the current cell
Contents
Clear Contents
Remove the contents of the current cell
Comment...
Edit a comment for this cell
Remove this cell's comment
Conditional Styles...
Set cell style based on certain conditions
Remove Conditional Styles
Remove the conditional cell styles
& Link...
Insert an Internet hyperlink
Link
Remove a link
Validity...
Set tests to confirm cell data is valid
Remove Validity
Remove the validity tests on this cell
& Sort...
Sort a group of cells
Sort & Decreasing
Sort a group of cells in decreasing(last to first) order
Sort & Increasing
Sort a group of cells in ascending(first to last) order
& Auto-Filter
Add an automatic filter to a cell range
& Left
& Right
& Up
& Down
Autosum
Insert the'sum 'function
& Series...
Insert a series
& Function...
Insert math expression
Special Character...
Insert one or more symbols or letters not found on the keyboard
From & Database...
Insert data from a SQL database
From & Text File...
Text File
Insert data from a text file to the current cursor position/ selection
From & Clipboard...
Clipboard
Insert CSV data from the clipboard to the current cursor position/ selection
& Text to Columns...
Expand the content of cells to multiple columns
Custom Lists...
Create custom lists for sorting or autofill
& Consolidate...
Create a region of summary data from a group of similar regions
& Goal Seek...
Repeating calculation to find a specific value
& Subtotals...
Create different kind of subtotals to a list or database
Area Name...
Set a name for a region of the spreadsheet
Named Areas...
Edit or select named areas
Formula Selection
Insert a function
Others...
Modify Cell
Edit the highlighted cell
Move the cell object to the clipboard
Copy the cell object to the clipboard
Paste the contents of the clipboard at the cursor
Special Paste...
Paste the contents of the clipboard with special options
Paste with Insertion
Inserts a cell from the clipboard into the spreadsheet
Selects all cells in the current sheet
Goto Cell...
Goto
Move to a particular cell
Check the spelling
Run Inspector...
Show QTableView...
Auto-Format...
Set the worksheet formatting
Document Settings...
Show document settings dialog
Formula
Apply
Apply changes
Discard changes
Create Style From Cell
The style name cannot be empty.
Change Font
Change Horizontal Alignment
Change Vertical Alignment
Format Percent
Format Money
Switch to uppercase
Switch to lowercase
First letter uppercase
Clear Text
Edit Link
You must select multiple cells.
No database drivers available. To use this feature you need to install the necessary Qt 3 database drivers.
Replace
Number Format
Currency Format
Percentage Format
Time Format
Date Format
Scientific Format
Adjust Column
Delete Columns
Adjust Row
Delete Rows
Selection List...
Select Character
Insert the selected character in the text
Select Single Cell
Select Multiple Cells
Date format
Time format
Data Type
Cell Tool Options
XOR(true; false) returns False
TextLabel
Set Word Spelling
Embedded Object
Chart
Apply Styles
Name Object
Protect Object
Resize Object
Cut Object
Remove Object
Insert Object
Set Values
& Apply to all sheets
General Options
Print & grid
Print & comment indicator
Print & formula indicator
Print & charts
Ranges
Print range:
Repeat columns on each page:
Repeat rows on each page:
Print range wrong, changes are ignored.
Repeated columns range wrong, changes are ignored. Must be in format column: column (eg. B: C)
Repeated rows range wrong, changes are ignored. Must be in format row: row (eg. 2:3)
Misc
Page Layout
Number of sheets open at the & beginning:
Show tabs
Show formula toolbar
Show status bar
& Pressing enter moves cell cursor:
& Method of calc:
& Grid color:
Default page & size:
Default page & orientation:
Portrait
Default page & unit:
Show the formula bar
Error in cell %1
& Show error message for invalid formulae
Do not check title case
Spell Checking
Spell checking is complete.
ISpell could not be started. Please make sure you have ISpell properly configured and in your PATH.
ISpell seems to have crashed.
& Multiple Operations...
Apply the same formula to various cells using different values for the parameter
Move Objects
& Properties
& Object
Insert an object from another program
& Chart
Insert a chart
Insert a picture
Cut Objects
Properties
Area too large.
No charting component registered.
Sheet Selection
Configure KSpread...
Style
Cell:
Remove Borders
& Parameters
Sheet name contains illegal characters. Only numbers and letters are allowed.
REFERENCE TO COLUMN OR ROW IS OUT OF RANGE
Form
left
right
The parent style does not exist.

Syntax
Parameters
Examples
< None >
Area Name
Area text is empty.
Do you really want to replace this named area?
Styles
Applied Styles
Show Page Borders
Hide Page Borders
Hide Status Bar
Hide Tab Bar
Hide Formula Bar
Validity Criteria
Conditional Cell Attribute
Cell Comment
& Add/ Modify Comment...
& Remove Comment
& Remove Link
Merge Cells %1
Dissociate Cell
Apply Properties
colon
comma
Multirow
Change Precision
Default Parameters
Circle
The ERF() function returns the error function.
SQRT(-9) equals "NaN"
LOG(0) equals -inf.
LOG10(0.8) equals -0.09691001
The FLOOR() function rounds x down to the nearest integer, returning that value as a double.
SUM2XMY(array1; array2)
The REPT() function repeats the first parameter as often as told by the second parameter.
Delimiter
Comma
Semicolon
Tabulator
Space
Other
1
"
'
Textquote:
none
The row is full. Cannot move cells to the right.
The column is full. Cannot move cells towards the bottom.
Paste What