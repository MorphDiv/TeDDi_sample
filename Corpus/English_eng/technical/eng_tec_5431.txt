# language_name_wals:	English
# language_name_glotto:	English
# ISO_6393:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Chapter 5.
Security
Next
When PHP is used as an Apache module it inherits Apache' s user permissions (typically those of the "nobody "user).
This has several impacts on security and authorization.
For example, if you are using PHP to access a database, unless that database has built-in access control, you will have to make the database accessable to the "nobody" user.
This means a malicious script could access and modify the database, even without a username and password.
It' s entirely possible that a web spider could stumble across a database administrator's web page, and drop all of your databases.
You can protect against this with Apache authorization, or you can design your own access model using LDAP, .htaccess files, etc. and include that code as part of your PHP scripts.
Often, once security is established to the point where the PHP user (in this case, the apache user) has very little risk attached to it, it is discovered that PHP is now prevented from writing any files to user directories.
Or perhaps it has been prevented from accessing or changing databases.
It has equally been secured from writing good and bad files, or entering good and bad database transactions.
A frequent security mistake made at this point is to allow apache root permissions, or to escalate apache 's abilitites in some other way.
Escalating the Apache user' s permissions to root is extremely dangerous and may compromise the entire system, so sudo'ing, chroot'ing, or otherwise running as root should not be considered by those who are not security professionals.
There are some simpler solutions.
By using open_basedir By using open_basedir you can control and restrict what directories are allowed to be used for PHP.
You can also set up apache-only areas, to restrict all web based activity to non-user, or non-system, files.
Prev
Home
Next
Installed as CGI binary
Up
Filesystem Security