# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	GNOME
# source:	https://object.pouta.csc.fi/OPUS-GNOME/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/GNOME.php
# copyright_long:	http://opus.nlpl.eu/GNOME.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Anjuta IDE Manual
v1.0.0
Manual for the Anjuta IDE
Naba
Kumar
Andy
Piper
Biswapesh
Chattopadhyayr
Johannes
Schmid
2001-2002
2006-2008
Naba Kumar, Andy Piper, Biswapesh Chattopadhyay
Johannes Schmid
Permission is granted to copy, distribute and/or modify this document under the terms of the
Many of the names used by companies to distinguish their products and services are claimed as trademarks. Where those names appear in any GNOME documentation, and those trademarks are made aware to the members of the GNOME Documentation Project, the names have been printed in caps or initial caps.
Anjuta Manual 2.1.0
2007
Johannes Schmid
Anjuta Team
Introduction

Anjuta DevStudio has been designed to be simple to operate yet powerful enough to fulfill all your programming needs. We've added many new features to Anjuta over the course of its development. Our focus is on delivering power and usability at the same time and making your software development enjoyable without overloading your senses. We intend to continue improving and stabilizing Anjuta to give you the best IDE experience possible. We hope you will have a good time using Anjuta. If not, please help us make it better by reporting bugs and suggestions.
The following screenshot illustrates some of the things you will find in Anjuta.
Anjuta in action
Anjuta has a flexible and advanced docking system that allows you to lay out all views in whatever way you like. You can drag and drop the views using drag bars and rearrange the layout. The layouts are persistent for each project so you can maintain different layouts for different projects. All dock views are minimizable to avoid clutter in the main window. Minimized views appear as icons on the left side of the main window. You can configure all menu actions either by typing when the cursor is over a menu item (the usual GNOME way) or through a dedicated shortcut configuration user interface.
Please report any problems with
Getting Familiar with Anjuta
Menus and shortcuts
At the top of the
Menubar
Anjuta menubar
File menu
Shortcut keys are available for many menu items. All shortcut keys are shown alongside the corresponding menu items. Some other useful shortcuts are listed here.




Customize shortcuts
You can change the default shortcuts by choosing
Main Window
The main window contains several view windows which can be rearranged by dragging on their title bars. They can also be minimized by clicking on the minimize buttons on the left of title bars.
The
The
The
The
There is also a
The
The colors used to display the messages are important. Messages displayed in the standard foreground color (usually black) are normal messages. Messages displayed in orange are warnings, and those displayed in red are errors. Warning and error messages are
For example, when you compile a file which contains errors, some red messages will appear showing what the problems are, and where they occur. Double-clicking on such messages will open the file and highlight the line containing the error.
The
Session management
All settings, including window sizes and positions, are saved when you exit
File Operations
Creating a new file and inserting text
Creating a New File
To create a new file, choose
Save file
You should save new documents as soon as possible to avoid any data loss in case of a crash.
File Wizard
New File Wizard
The Open File dialog
A wizard can also be used to create a new file. To create a new file, choose

Inserting Macros
You can use
The Macro plugin must be activated.
Inserting
Two types of macros are available: Anjuta macros and user macros (displayed as "My macros"). Anjuta macros are not modifiable, but you can define and modify your own user macros.
To insert a macro, move the cursor to the desired place. Select
Macro
The Macro dialog
Another way to insert a macro is to select
Defining Macros
From the Insert Macro window, choose
You can also erase a macro by selecting it in the list and choosing
Add/Edit Macro
Add Edit dialog
Similarly, you can edit and modify a macro by selecting it in the list and choosing
Macro Keywords
Macro keywords are available. They can be included in macro definitions. These macro keywords start and finish with the character ' @ '.
Keyword Macro
The Keyword macro
Available macro keywords are @DATE_TIME@, @DATE_YMD@, @DATE_Y@, @USER_NAME@, @FILE_NAME@, @FILE_NAME_UP@, @FILE_NAME_UP_PREFIX@, @EMAIL@, @TABSIZE@, @INDENTSIZE@, and @USETABS@.
Opening and Saving Files
Open File dialog

Open Multiple File dialog
The Open File dialog in multiple-select mode
You can enable the
The Save As File

File autosave
If you have enabled autosave, Anjuta will not autosave any new files. You must first save them manually. The same applies to the

File save as overwrite
When you use

Editing Files

Editor Margins
The Tags toolbar

The
The
The
Invisible margin marker
Editor markers when the marker margin is invisible
If the marker margin is not visible, Anjuta displays markers by changing the background color of a line. For example, if a breakpoint marker is set in a line and the marker margin is not visible, that line will be displayed with a red background. Similarly, for a bookmark marker and a line indicator marker the background color of the line will be sky blue and yellow, respectively. If you do not like this (perhaps due to some contrasting themes), enable the marker margin via
Editor Guides
The editor can be set to display certain document information which is normally invisible, including
Editor with guides
Syntax highlighting

Anjuta uses a properties file named
Code folding
Anjuta can display
Code folding is especially useful when editing large source files with thousands of lines. Once the folds are closed, a document appears to become smaller, facilitating easy browsing and editing of the file.
Please note that code folding and editor guides are only available in the Scintilla-based editor.
Auto-formatting source code
Anjuta can automatically indent (auto-format) C or C++ source or header files. This gives a clean look to the source code, increases legibility, reduces the likelihood of syntax errors, and above all saves time. To auto-indent the current source file, choose
The Symbol Browser
You can browse C and C++ source and header files using
Symbol browser

Tag synchronization
You don't have to worry about the synchronization and update of the tag database.
Searching for and Replacing text in files
Searching
To search for a
Use the text box to specify the string to search for, and select whether it is a normal string or a regular expression. You can also specify the direction of search, whether the search is case-sensitive or not, and the scope of the search. Click
If the search is successful, Anjuta will jump to the matched text or perform another action (according to the
If you want to search again, click the
Search Text dialog
To stop a long search, press the
Specifying Search Range
In the
You can define the maximum number of actions to be performed.
Search Target dialog
You can select which text will be searched.
Search Target In choice
Searching in Files
To find text in your project, set
In the
To find text in a set of files, set
Search File Pattern
Specifying a Search Action
You can select which action will be performed when a search succeeds.
Depending on the previous selections (
Search Target Action choice
Replacing
Searching and replacing is similar to just finding text, except that you also specify the replacement text in the
Choose
Search Setting
You may also save search options.
The item highlighted in red is the active item. The default item specifies search settings which are loaded when Anjuta launches.
Search Setting dialog
Printing a file
Print preview of a C file
Print preview
You can perform a print preview by selecting
Print Preferences
Print preferences
When you are ready to print and satisfied with the preview, select
You can also set landscaped or portrait page layout and the paper size, page orientation and paper type. Remember to set them up properly according to your printer, otherwise printing may not look correct.
Print Dialog
Project Management
Anjuta has a powerful Project Manager plugin which can open most
The neat thing is that Anjuta does not store any project information beyond what is already available in the project structure. That is, there is no separate project data maintained by Anjuta and all project processing is done directly within the project structure. This allows a project to be maintained or developed outside Anjuta without any need to convert to or from an Anjuta-specific format. Since technically Anjuta projects are just automake projects, mixed development (with both Anjuta and non-Anjuta users) or switching back and forth between Anjuta and other tools is quite possible without any hindrance.
Creating a New Project
Creating a project from a template
The project wizard plugin uses a powerful template processing engine called
To create a project, choose the menu item
Select the type of application you want to create in the second page. Click on
On the following pages, enter all necessary details for your project. You can change these settings later, but it is advisable to set them right initially in order to maintain the project's integrity. White spaces or any non-alphanumeric characters, except underscore (_) and dash (-), are not allowed in many of the entry boxes that follow (except perhaps the
You can also specify whether your project will have
The final step is to verify the information you have just supplied. Click on
Once the project has been generated, you can try it out by building it and executing it.
Importing Projects
The import project feature is used to import an already existing project and convert it into an
The import project feature only works if your existing project uses
Loading and Saving Projects
Loading Projects
To open a project, choose the menu item
If the project has recently been opened, then you will find it listed in the menu
As soon as a project is opened,
If the project is also a CVS tree, then corresponding file revision numbers are also listed to the right of file names in the file view pane.
Saving Projects
The project is automatically saved when you close because all changes are made directly in the project structure.
Project structure
Project window
The Project window
Here is the
The



Each project group and target is configurable in the standard
Just like the file manager, the project manager view also has convenience actions (accessible from the context menu) for source files and targets.
Many command-line tools are available to maintain and manage a project, and each tool has its own specific rules and capabilities.
You may modify a project's structure using external tools or by hand-editing the project files. It doesn't matter whether the project is loaded in
Groups and targets
Adding Groups
Select
Select the group under which to add the new group.
Enter the name of the new group and click
To add a new group (which is a directory in automake-based projects):
With automake projects, a new directory with the given name will be created under the parent group's directory.
You can also add a new group from the
Removing Groups
Right-click the group in the
Select
To remove a group:
The target and sources associated with the group will also be removed from the project. (They are not deleted from the file system, though. You can add them to the project again later if you like.)
Adding Targets
Select
Select the group under which to add the target.
Select the target type.
Enter a name for the new target and click
To add a new target:
You can also add a new target from the
Target names usually require some standard prefix and suffix, depending on the type of target. Anjuta will warn you if a name is not valid and may provide an example of a valid name.
The
The
The
The
There can really be only one Java module in a group. This is a restriction made by automake. Please read the automake info page for more details.
The
The
The
The
The
There are several target types for automake projects. They are:
Removing Targets
Right-click the target in the
To remove a target:
The sources associated with the targets will also be removed from the project (they are not deleted from the file system, though).
Adding and Removing Files
Adding Source Files
Select the menu item
By default, the current editor file will be preselected for addition in the dialog. Another convenient way to add a file is to right-click it in the
If the file you choose has already been added to the project, then
If the file you choose is not in the project directory, you will be asked to confirm that you wish to copy the file into the target's directory.
Removing Source Files
To remove a file from the project, right-click the file you want to remove in the
A confirmation dialog will appear, and the file will be removed from the project.
The file is not deleted!
The file is not deleted from the filesystem. It still exists, and you can add it back again later if you so wish. The file is only removed from the project listing, and will not take part in any project operations such as compiling, building, or distribution.
Project Configuration
Project configuration involves setting the correct build flags for targets, groups and the project itself. You can set these flags in their respective properties dialogs.
You can freely use autoconf and automake variables that are automatically set for the project during configuration. Apart from these automatically set variables, you can also define your own variables in




Some of the many common variables are listed here. For full list of them see the
Project properties
Set the project name, version and URL in the
Add and remove dependencies for your project in the
Create more configure variables in the
The project properties dialog can be opened only by choosing
Project properties dialog
Dependencies are external packages that the project uses and are hence required to build it. Only packages installed using
External package dependencies are grouped into
Each package exports a set of
Select
Select the tab
Select the
Click
Select the package to add and click
Click
To add a package dependency:
Group properties
Group properties dialog
To edit a group's properties, double-click the group in the



Properties set for a group apply to all the targets under it. So any compiler or linker flags set for a group will be automatically be part of all the targets in it (in addition to each target's individual properties). The following fields are available in the Group Properties dialog.
Target properties
Any properties set for a target apply to that target only. A target also inherits properties from its containing group.
Target properties dialog
To set a target's properties, double-click the target in the
You can add the modules you have added in
Advanced target options
The following fields are available in the advanced target configuration that you reach when you clicked the



Building
Anjuta handles
An autotools project is built in three steps:
Generate
Configure
Build



Read the info pages of
Generate and Configure
Configure a project
You need to run this step before being able to build your project. This is usually run only once at the beginning of the first build process — for example, just after you have extracted a source tarball of a project distribution. After that, configuration is automatically handled by the subsequent build processes. If you have used the
There is no requirement to run this only once. It can be run at any time, usually when the configuration options need to be changed. One thing to note is that if the
Whether you want to run the generate step or not
The generate step needs to be run once at the beginning of the project; then it is automatically handled by the build process. You can force it to run by checking the checkbox
The configuration name
This name is used to refer to each configuration. Some configurations (Default, Debug, Optimized) are already defined by default. One configuration includes a build directory and some configuration options.
The build directory
This is the build directory name. In the Default configuration, it is the same directory as the source directory but autotools supports building in a different directory.
Each configuration must have a different build directory and if one configuration uses the source directory, you cannot have other configurations at the same time. You need to run
Configure options
These options are passed to the
Both generate and configure steps are launched with a single menu item:
Select a configuration
If you have created different configurations, you can select which one is active by selecting it in
Clean a configuration
To clean the project and leave it in a state that requires rerunning the configure step, choose
Compile and Build
Compiling a file
In a project, individual source files can be compiled separately into objects (
To compile a file, choose the menu item
Building an executable

So how exactly does the dependency check influence project development? If you have modified a file, then all of the source files that depend on the modified file are recompiled. All files (not just the object files and executable) in the project are checked for these dependencies during the build process. If it is found that a particular file is dependent on some other file which has been modified, then that file will be regenerated.
Can you imagine how your life (as a programmer) would be if the dependency check were not there? If you cannot answer just yet, then you will find out when you start developing big projects!


Other operations
Creating a distribution package
To build a tarball distribution of the project choose
Installing a project
Choosing the menu item
System-wide installation
You must be logged in as root to perform a system-wide install. Also note that for a GNOME application to use the pixmaps in the project, it must be installed as a system-wide application. Otherwise, when the application is executed in your project, there will be lots of "pixmap not found" errors. You can configure Anjuta to use
Cleaning
This deletes all of the files generated by the build process, including all object files (
Choose the menu item
Choose the menu item
Debugging
To debug is human. To fix it is divine...
Well, the
When a program does not behave in the way it is supposed to, we say the program contains a
Any program that you think is bug-free is never completely bug-free. All we can try to do is to reduce the number of bugs contained in the program. The process of removing bugs is known as
A debugger tracks and traces the execution of the program and provides various views of information needed to study the execution of the program.
Start and stop
Running an executable
Attaching to a process
Almost every feature of Anjuta is provided by a plugin. If you do not see the menus described here. It is probably because the debugger plugin is not loaded. Go in
The debugger is always started with a program loaded. There are two ways to do this:
Running a program with or without the debugger uses the same menu: select
In order to better use the debugger, it is strongly recommended that you build your program with debugging information (-g for gcc) and no optimization (-O0 for gcc). This can be done by selecting the Debug configuration before building the program for the first time.
The program that you want to debug
The drop-down menu of the target drop-down combination box is pre-filled with all executables of the current project. But you can alternatively select another executable which is not part of the project. The debugger also accepts libtool executables; these are scripts generated by libtool which wrap real executables.
The command-line parameters
The working directory
Environment variables
Environment variables displayed in light gray are the current environment variables. You can add, modify or remove environment variables here.
To debug Anjuta using Anjuta, you can use a different theme to change the look of the instance being debugged; for example, you could add "GTK2_RC_FILES=/usr/share/themes/Crux/gtk-2.0/gtkrc".
Whether the program should run in a terminal or not. If so, the Anjuta terminal plugin is used.
You can select which program to run and its environment using
Attaching to a Process
It is also possible to attach to a running process and debug it by choosing the menu item
Attach to Process dialog
Select the process to attach to and click
It is currently not possible to load symbol information for an attached process. Symbols should be included in the process.
Stopping the Debugger
Choose the menu item
Adding source directories
Choose the menu item
Most executables include full file paths, so defining the directories where are the source files is normally not useful. But some executables include only file names without paths; in this case, the debugger will search for source files in all these directories. The order of directories can be important if several files have the same name, so you can change it using the
Execution
Execution of a program in the debugger can be finely controlled. The program can be executed in single steps, or allowed to continue until it encounters a breakpoint. Executing like this is essential for tracking program behavior. Like a video editing session, the program can be executed in
The methods those can be used to execute a program in the debugger are described in the following sections. These commands are available only when the program has already been started.
Single stepping (step in)
Choose the menu item
Single stepping executes only one statement of the program (from the place where it has stopped) and then returns control. If the statement that is executed contains one or more functions, the debugger tries to step inside the functions (in the sequence in which the functions are executed). Once the statement is executed and control is passed back, you can study your program's state.
If the
Single stepping (step over)
Choose the menu item

If the
If a dynamic library is loaded during the step, the program will not stop at the end of the step. But it will run until it finds a breakpoint or you stop it.
Single stepping (step out)
Choose the menu item

Run/Continue
Choose the menu item
This option continues the execution of the program until a breakpoint is encountered, or the program exits.
Run To
Choose the menu item
This option continues the execution of the program until the line or the address (if the
Stop Program
While the program is running and has control, no debugging tasks can be performed. To obtain control while the program is running, choose the menu item
Breakpoints
When debugging a program, it is useful to be able to stop the execution of the program at a particular point, so that the state of the program can be examined at that location. Breakpoints enable this to happen. Breakpoints can be set at different locations in a source file and then the program is allowed to run. When a breakpoint is encountered, the execution of the program is suspended, enabling expressions to be evaluated, variables to be inspected, the stack trace to be studied, and so on.
Listing Breakpoints
The
Breakpoint view
Location
This is the position of the breakpoint in the source file. When the breakpoint is set by the debugger, you can get additional information such as the function containing the breakpoint.
Address
This field is filled with the address of the breakpoint when it is set by the debugger.
Type
This always displays "breakpoint". It will be used in a future release supporting different kinds of breakpoints.
Condition
This is the breakpoint condition. It is empty if no condition is defined.
Pass count
When the debugger is not running, this column displays the pass count of the breakpoint, or zero if it is not defined.
When the debugger is running, if the pass count is zero, this column displays the number of times this breakpoint has been triggered. If the pass count is not zero, both numbers are displayed. The pass count is the second number.
State
Pending: the breakpoint is not set in your program.
Permanent: the breakpoint is set (its id number in given inside parentheses).
Temporary: the breakpoint is set but will be deleted if reached.
This is the state of the breakpoint. It may be
The view has the following columns:
All breakpoints are kept across Anjuta sessions even if they correspond to a non-existing location. In this case their states are set as pending. The interface tries to set them each time the program is started or a new dynamic library is loaded.
Adding or Setting Breakpoints
Choose the menu item
Breakpoint add dialog
Enter the location at which to set the breakpoint. It can be specified in any of the following formats:
File_name:Line_number
Function_name
File:Function_name
The first format is obvious — the location refers to the line number
The
Every time the breakpoint is encountered during your program's execution, the break condition will be evaluated. The debugger will break the execution only if the evaluation results in a TRUE value, otherwise it will continue the execution as though there had been no breakpoint.
The default value, if you leave this field blank, of
Pass Count
The
The default value, if you leave this field blank, of the
Enter the location and, optionally, the break condition and the pass count; then click
A breakpoint may also be set by selecting a line in the editor and choosing the menu item
Breakpoints can be added even if the debugger is not started, or in a dynamic library which is not loaded yet. But they cannot be added while a program is running under control of the debugger.
Editing Breakpoints
You can change the condition and the pass count by selecting the breakpoint in the breakpoint list and clicking
Edit the entries as required and click on
Deleting Breakpoints
Select the breakpoint in the breakpoint list view and click on
A existing breakpoint may also be deleted by selecting its line in the editor and choosing the menu item
You can remove all breakpoints by clicking on
Enabling or Disabling Breakpoints
Click on the Enable column of the
To disable all breakpoints, click on
Expressions
Listing local variables
When a program is running under the control of the debugger, the
Local variables
Local variables of the current frame (the current function in which the program control is present) are displayed in the
The value of a local variable can be modified by selecting it and clicking in the

Listing watched expressions
Inspecting or evaluating an expression provides the result only once. To continuously monitor some variables or expressions, use
Choose the menu item
Adding an expression to watch
Right-click on the
By default watch expressions are updated automatically each time the program is stopped. This can be changed in the add watch dialog or later using the
It is not necessary to have the debugger running to add a new watch expression. If the debugger is not running or the corresponding expression cannot be found, the front end will try to create the watch expression each time the program is stopped.
Removing a watched expression
Right-click the watch expression that you want to remove in the
All watches can be removed by choosing
Evaluating expressions
When control is returned from a program — possibly at a breakpoint — it is possible to evaluate expressions or inspect the values of variables in the program. Choose the menu item
A window will appear showing the evaluation of the expression highlighted in the editor. You can evaluate a new expression by clicking on the
You can add the expression to the list of watched expressions directly by clicking on the
Inspecting expressions in editor window
When the debugger is active with the program stopped, you can get the value of an expression just by putting the mouse pointer over it and staying there for a short time. If the expression is already present in the
This capability is currently working only for simple variables, not for structures or arrays.
Stack Trace
Stack Window
The
Choose the menu item
Stack trace window
A small arrow points to the currently selected frame in the stack trace. By default, this will be frame 0, the last function called. All evaluation and inspection of expressions or variables will be with reference to this selected frame. The scope of variables or expressions being evaluated will be limited to the selected frame only. The same applies for new expressions only in the watch.
Setting the current frame
Double-clicking on any frame in the stack trace sets that frame as the currently selected frame. The arrow will point to the frame, indicating that it has been selected as the current frame. Alternatively, open the context menu by right-clicking on the
Changing the stack frame changes the
Thread
Thread Window
The
A small arrow points to the current thread. When the program is stopped, the current thread is the thread which has been interrupted. Each thread has its own stack frame, so changing the current thread changes the current stack frame.
Setting the current thread
Double-clicking on any thread in the thread list will set that thread as the currently selected thread. The arrow will point to the thread, indicating that it has been selected as the current thread. Alternatively, open the context menu by right-clicking on the
Changing the thread changes the value of CPU registers and the current stack frame, so the
CPU
Register window
It is possible to examine the contents of the internal registers of the CPU (microprocessor). Choose the menu item
If any register value was changed in the last debugging step, its value will be highlighted in red. It is possible to change one register value by selecting it and clicking in the
Memory window
Choose the menu item
The first column displays memory addresses in hexadecimal, the second displays memory contents in hexadecimal and the last column shows memory contents in ASCII.
The addressing space of even a 32-bit microprocessor is quite large (4 gigabytes), so it is very difficult to go to a particular address with the scrollbar. But you can click on the right mouse button to display a context menu and select
Disassembly window
Choose the menu item
The first column displays addresses in hexadecimal. In the second column, you can have a label starting at the beginning of the line and ending with a colon or a assembly-language instruction indented by 4 space characters.
Again, as the addressing space is very large, the scrollbar is quite useless. You can click on the right mouse button to display the context menu and select
Others
There are a number of other debugger features used less frequently and not very well integrated in the new front end but which are still working.
Dynamically loaded Libraries
To obtain a list of the dynamic libraries used by a program, choose the menu item
Shared Libraries window
Kernel Signals
Kernel signals are a way of signaling between processes in Linux. The list of signals available for a program can be displayed by choosing the menu item
Kernel Signals window
There are three columns which specify what to do when a signal is received:



The context menu that is displayed when you click on the right mouse button has all its items disabled because the corresponding functions are not implemented yet.
Information about used files
You can get some information about the files used by the debugged program by choosing the menu item
Information about debugged program
You can get some information about the debugged program by choosing the menu item
Information about kernel structure
You can get some information about kernel data for the current process by choosing the menu item
Information about global variables
You can list all global variables by choosing the menu item
Information about the current frame
You can obtain information about the currently selected frame by choosing the menu item
Information about the current function arguments
You can obtain information about the arguments of the current function by choosing the menu item
User command
To send directly a command to the back end choose the menu item
The front end sends this command directly to the back end without performing any checks. By example if you set a breakpoint like this, it will not appear in the
Glade Interface Designer
Quick start
You should have a project containing Glade file opened;
Unlike original Glade designer, Anjuta plugin uses double click for creating handlers for default signal. You can perform a click on widgets (e.g. switch current tab in a GtkNotebook) by keeping "Windows" or "Super" key pressed;
Open
Check
Switch to a Glade file in the design area and to the source code file that should contain callbacks for the Glade file, then press
Optionally select a target for image and other resources in the project manager and press
If you don't want to read all this boring manual, here is few steps to get all things ready for use:
Glade general usage questions
Glade plugin mostly copies functionality of standalone Glade designer, but there are some special features. The four windows of the Glade desinger are design area, palette, widgets inspector and property editor. They have the same purpose as in the standalone designer, so please consult
Editor and designer association
You can associate text editor and Glade designer so you will easily switch between them and automatically insert handler stubs for newly entered handlers. You can associate more then one editor to a designer. The most recent editor or associated with the current toplevel widget will be used. There are two ways of associating editor and designer. The first way is using associations dialog. The second way is to choose designer and editor document in any order and then press
Associations dialog
Spec regexp
Shortened from "special regular expression". Used for defining a custom position for inserting stubs.
Widget name
The name of the toplevel widget this assoctiation belongs to.
Position type
Describes a position at which a handler stub will be inserted.
Allows you to create and manager associations. To create an association select designer and editor in the comboboxes and press
Default signal
Double click on a widget in the design area will create a new handler for default signal using a predefined template for its naming. For example, the default signal is "clicked" for button, "toggled" for check box, etc. If
Inserting a stub
One of the most valuable goal of
Automatically if
Using
Using
There are several ways to create a stub:
Preferences
Insert handler on edit
Enables inserting a handler stub into the associated editor after entering a new handler into signal editor or creating a
Separated designer layout
Detaches the design area from document manager so you can dock it separately from text editors.
Automatically add resources
When checked then all resources (e.g. images) will be added to the target in the current project. You can choose the target using project manager context menu or by entering target id in the entry below the check button.
Handler template
You can choose between the two formats of automatic naming of signal handler.
Preferences are ways to customize
General


File Manager


User-defined Tools
You'll sometimes find the built-in functionality provided by Anjuta to be insufficient. In these cases, you might be tempted to either add the feature yourself to the Anjuta codebase or submit a feature request to implement the feature. However, both approaches are likely to be slow and problematic, especially if your tool is a specialized one. In these circumstances, it is advisable to use the Anjuta tools framework instead.
Anjuta provides a powerful framework for defining user-defined tools for extending its functionality. Tools have access to almost all features of the IDE through the use of variables. You can add tools under any menu item, specify input, output and error redirection within the GUI framework and supply command-line parameters to the tool.
The tools plugin has to be enabled to use this feature!
Tools Examples
This is a simple example how to use the tools plugin to integrate the GNOME ChangeLog generation script.
The tool editor
Authors
The
For more information on
This manual was written by Naba Kumar, Andy Piper, Biswapesh Chattopadhyay and Johannes Schmid. Please send all comments and suggestions regarding this manual to the Anjuta Devel list
License
This program is free software; you can redistribute it and/or modify it under the terms of the
This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
A copy of the
translator-credits