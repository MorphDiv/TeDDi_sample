# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Next
Depending on the build process you selected, you should either end up with a new PHP binary to be linked into your Web server (or run as CGI), or with an .so (shared object) file.
If you compiled the example file first_module.c as a shared object, your result file should be first_module.so.
To use it, you first have to copy it to a place from which it 's accessible to PHP.
For a simple test procedure, you can copy it to your htdocs directory and try it with the source in Example 29-1.
If you compiled it into the PHP binary, omit the call to dl(), as the module's functionality is instantly available to your scripts.
Warning
For security reasons, you should not For security reasons, you should not put your dynamic modules into publicly accessible directories.
Even though it can be done and it simplifies testing, you should put them into a separate directory in production environments.
Example 29-1.
A test file for first_module.so.
?php / / remove next comment if necessary / / dl( "first_module.so"); $param = 2; $return = first_module($param); print("We sent '$param 'and got '$return'");?
Calling this PHP file in your Web browser should give you the output shown in Figure 29-1.
Figure 29-1.
Output of first_module.php.
If required, the dynamic loadable module is loaded by calling the dl() function.
This function looks for the specified shared object, loads it, and makes its functions available to PHP.
The module exports the function first_module(), which accepts a single parameter, converts it to an integer, and returns the result of the conversion.
If you 've gotten this far, congratulations!
You just built your first extension to PHP.
Prev
Home
Next
Creating Extensions
Up
Troubleshooting