# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Next
(PHP 3, PHP 4)
header() is used to send raw HTTP headers.
See the HTTP / 1.1 specification for more information on HTTP headers.
The optional replace The optional replace parameter indicates whether the header should replace a previous similar header, or add a second header of the same type.
By default it will replace, but if you pass in FALSE as the second argument you can force multiple headers of the same type.
For example:
?php header( 'WWW-Authenticate:
Negotiate'); header( 'WWW-Authenticate:
NTLM', FALSE);?
The second optional http_response_code force the HTTP response code to the specified value. (This parameter is available in PHP 4.3.0 and higher.)
There are two special-case header calls.
The first is a header that starts with the string "HTTP /" (case is not significant), which will be used to figure out the HTTP status code to send.
For example, if you have configured Apache to use a PHP script to handle requests for missing files (using the ErrorDocument directive), you may want to make sure that your script generates the proper status code.
?php header( "HTTP / 1.0 404 Not Found");?
Note:
The HTTP status header line will always be the first sent to the client, regardless of the actual header() call beeing the first or not.
The status may be overridden by calling header() with a new status line at any time unless the HTTP headers have already been sent.
Note:
In PHP 3, this only works when PHP is compiled as an Apache module.
You can achieve the same effect using the Status header.
?php header( "Status:
404 Not Found");?
The second special case is the "Location:" header.
Not only does it send this header back to the browser, but it also returns a REDIRECT (302) status code to the browser unless some 3xx status code has already been set.
?php header( "Location: http: / /www.example.com / "); / * Redirect browser * / exit; / * Make sure that code below does not get executed when we redirect. * /?
Note:
HTTP / 1.1 requires an absolute URI as argument to Location: including the scheme, hostname and absolute path, but some clients accept relative URIs.
You can usually use $_SERVER[ 'HTTP_HOST'], $_SERVER['PHP_SELF'] and dirname() to make an absolute URI from a relative one yourself:
?php header( "Location: http: / /".$_SERVER['HTTP_HOST'] .dirname($_SERVER['PHP_SELF']) ." / ".$relative_url);?
PHP scripts often generate dynamic content that must not be cached by the client browser or any proxy caches between the server and the client browser.
Many proxies and clients can be forced to disable caching with
?php header( "Expires:
Mon, 26 Jul 1997 05:00:00 GMT"); / / Date in the past header("Last-Modified: ". gmdate("D, d M Y H:i:s")." GMT"); / / always modified header("Cache-Control: no-store, no-cache, must-revalidate"); / / HTTP / 1.1 header("Cache-Control: post-check=0, pre-check=0", false); header("Pragma: no-cache"); / / HTTP / 1.0?
Note:
You may find that your pages aren' t cached even if you don't output all of the headers above.
There are a number of options that users may be able to set for their browser that change its default caching behavior.
By sending the headers above, you should override any settings that may otherwise cause the output of your script to be cached.
Additionally, session_cache_limiter() and the session.cache_limiter configuration setting can be used to automatically generate the correct caching-related headers when sessions are being used.
Remember that header() must be called before any actual output is sent, either by normal HTML tags, blank lines in a file, or from PHP.
It is a very common error to read code with include(), or require(), functions, or another file access function, and have spaces or empty lines that are output before header() is called.
The same problem exists when using a single PHP / HTML file.
html ?php / / This will give an error.
Note the output / / above, which is before the header() call header('Location: http: / /www.example.com / ');?
Note:
In PHP 4, you can use output buffering to get around this problem, with the overhead of all of your output to the browser being buffered in the server until you send it.
You can do this by calling ob_start() and ob_end_flush() in your script, or setting the output_buffering configuration directive on in your php.ini or server configuration files.
If you want the user to be prompted to save the data you are sending, such as a generated PDF file, you can use the Content-Disposition header to supply a recommended filename and force the browser to display the save dialog.
?php / / We' ll be outputting a PDF header("Content-type: application / pdf"); / / It will be called downloaded.pdf header("Content-Disposition: attachment; filename=downloaded.pdf"); / / The PDF source is in original.pdf readfile('original.pdf');?
Note:
There is a bug in Microsoft Internet Explorer 4.01 that prevents this from working.
There is no workaround.
There is also a bug in Microsoft Internet Explorer 5.5 that interferes with this, which can be resolved by upgrading to Service Pack 2 or later.
Note:
If safe mode is enabled the uid of the script is added to the realm part of the WWW-Authenticate header if you set this header (used for HTTP Authentication).
See also headers_sent(), setcookie(), and the section on HTTP authentication.
Prev
Home
Next
HTTP functions
Up
headers_sent