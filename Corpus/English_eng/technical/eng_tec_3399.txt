# language_name_wals:	English
# language_name_glotto:	English
# ISO_6393:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
Returns an array with integer values limit and usage for the given mailbox.
The value of limit represents the total amount of space allowed for this mailbox.
The usage value represents the mailboxes current level of capacity.
Will return FALSE in the case of failure.
This function is currently only available to users of the c-client2000 or greater library.
NOTE:
For this function to work, the mail stream is required to be opened as the mail-admin user.
For a non-admin user version of this function, please see the imap_get_quotaroot() function of PHP.
imap_stream should be the value returned from an imap_open() call.
NOTE:
This stream is required to be opened as the mail admin user for the get_quota function to work. quota_root should normally be in the form of user.name where name is the mailbox you wish to retrieve information about.
Example 1. imap_get_quota() example
$mbox = imap_open( "{your.imap.host}" ,"mailadmin" ,"password",OP_HALFOPEN) or die("can't connect: ".imap_last_error()); $quota_value = imap_get_quota($mbox, "user.kalowsky"); if(is_array($quota_value)) {print "Usage level is: ". $quota_value['usage']; print "Limit level is:". $quota_value['limit'];} imap_close($mbox);
As of PHP version 4.3, the function more properly reflects the functionality as dictated by the RFC 2087.
The array return value has changed to support an unlimited number of returned resources (i.e. messages, or sub-folders) with each named resource receiving an individual array key.
Each key value then contains an another array with the usage and limit values within it.
The example below shows the updated returned output.
For backwards compatibility reasons, the originial access methods are still available for use, although it is suggested to update.
Example 2. imap_get_quota() 4.3 or greater example
$mbox = imap_open( "{your.imap.host}" ,"mailadmin" ,"password",OP_HALFOPEN) or die("can't connect: ".imap_last_error()); $quota_values = imap_get_quota($mbox, "user.kalowsky"); if(is_array($quota_values)) {$storage = $quota_values['STORAGE']; print "STORAGE usage level is: ". $storage['usage']; print "STORAGE limit level is:". $storage['limit']; $message = $quota_values['MESSAGE']; print "MESSAGE usage level is: ". $message['usage']; print "MESSAGE usage level is:". $message['limit']; / *... * /} imap_close($mbox);
See also imap_open(), imap_set_quota(), imap_get_quotaroot().
Prev
Home
Next
imap_fetchstructure
Up
imap_get_quotaroot