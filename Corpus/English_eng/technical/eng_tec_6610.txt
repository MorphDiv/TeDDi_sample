# language_name_wals:	English
# language_name_glotto:	English
# ISO_6393:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	GNOME
# source:	https://object.pouta.csc.fi/OPUS-GNOME/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/GNOME.php
# copyright_long:	http://opus.nlpl.eu/GNOME.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

@@image: 'figures/a-z.gif'; md5=0df765cb06d1873c4b77ccfa2aec273a
@@image: 'figures/aa-az.gif'; md5=499378b5a346d9a1fff3317ed7bca624
@@image: 'figures/ala-alz.gif'; md5=c1d38e5e5cd6234737ff5e80c8120416
@@image: 'figures/object.gif'; md5=f961ced3b16182985421dba58cbb130d
@@image: 'figures/exampleHad2.png'; md5=c3a7c8f985519a90d739117aa4e1e064
@@image: 'figures/exampleHad2a.png'; md5=1d124560d223498f876122bcd85afaac
@@image: 'figures/exampleHad3a.png'; md5=0bcd661209391842cf47f00b767146b3
@@image: 'figures/exampleHad4.png'; md5=9974616612b5c811cb2c161093c8523c
Dasher Manual
The Dasher Project
2010
Permission is granted to make and distribute verbatim copies of this manual provided the copyright notice and this permission notice are preserved on all copies.
Permission is granted to copy and distribute modified versions of this manual under the conditions for verbatim copying, provided that the entire resulting derived work is distributed under the terms of a permission notice identical to this one.
Permission is granted to copy and distribute translations of this manual into another language, under the above conditions for modified versions, except that this permission notice may be stated in a translation approved by the Free Software Foundation.
UNIX is a trademark of X/Open Group.
Linux is a trademark of Linus Torvalds.
X Window System is a trademark of X Consortium, Inc.
Windows is a trademark of Microsoft Corp.
Macintosh and Apple are trademarks of Apple Computer, Inc.
All other trademarks are property of their respective owners.
Dasher is an accessible text entry application that uses pointing gestures rather than typing. It is designed to be fast while fun to use.
1.0.0
2004-02-08
1.1.0
2006-03-31
1.2.0
2006-07-11
1.2.1
2006-09-02
Introduction


What's New
New features In version 4.2
There is an automatic speed control, which will speed up Dasher when it senses you are able to go faster.
There is a new socket interface allowing Dasher to listen to head-trackers or gaze-trackers or EEG-interfaces without going through the mouse.
There are several `button modes' for people who want to drive Dasher using one, two, three, or four switches.
There is a `click mode', for people who like to point where they want to go, and click to take a single step in that direction. This is aimed at beginners, in particular
What's coming in version 4.4
We will implement a game-mode for Dasher: this will help novices learn to write. A teaching hand will guide the novice when he goes astray, and novices who write fast without needing much guidance will win lots of points.
New language models will be added, which will make predictions at the word level as well as the letter level.
Japanese and Chinese will be fully supported.
The Dasher team also hopes to create a free web-cam-based head tracker and gaze tracker, `FreeVIM', by December 2006.
Dasher Basics
On a palmtop computer;
on a wearable computer;
when operating a computer one-handed, by joystick, touchscreen, trackball, or mouse;
when operating a computer with zero hands (i.e., by head-mouse or by eyetracker).
Dasher is an information-efficient text-entry interface, driven by natural continuous pointing gestures. Dasher is a competitive text-entry system wherever a full-size keyboard cannot be used - for example,
Dasher can be used to write efficiently in any language.
Dasher is fast and fun to learn.
Dasher is
How does Dasher work?
Financial Times, 5th February 2002
Dasher is like an arcade game: `Attack of the killer alphabets', perhaps.
Dasher is a zooming interface. You point where you want to go, and the display zooms in wherever you point. The world into which you are zooming is painted with letters, so that any point you zoom in on corresponds to a piece of text. The more you zoom in, the longer the piece of text you have written. You choose what you write by choosing where to zoom.
To make the interface efficient, we use the predictions of a language model to determine how much of the world is devoted to each piece of text. Probable pieces of text are given more space, so they are quick and easy to select. Improbable pieces of text (for example, text with spelling mistakes) are given less space, so they are harder to write. The language model learns all the time: if you use a novel word once, it is easier to write next time.
A big advantage of Dasher over other predictive text-entry interfaces that offer word-completions to the user is that it is
Another advantage is that it is easy to train the model on any writing style: simply load up an example file, then write away!
It's quite hard to convey in words what Dasher looks like, so please visit
Dasher explained -- the library analogy
Imagine
When someone writes a piece of text, their choice of the text string can be viewed as a choice of a book from this library of all books - the book that contains exactly the chosen text. How do they choose that book? Let's imagine they want to write
The library of all books.
First, they walk into the
By looking ever more closely at the shelf, the writer can find the book containing the text he wishes to write. Thus writing can be described as
This is exactly how Dasher works, except for one crucial point:
Here is the corresponding sequence of pictures of the library in Dasher. (The character
Dasher can be trained on examples of any writing style, and it learns all the time, picking up your personal turns of phrase.
The image below shows the state of the Dasher interface while the user is writing the word `objection'; alternative words that could easily be written at this point include `objective', `objects_', and `object_oriented'.
Writing `objection' in Dasher.
If you find Dasher hard to imagine based on these static pictures, please take a look at the movies on
Tips for novices
Don't give up if it takes you a minute or two to get started - within ten minutes, you'll be blazing along. It's a lot like driving a car. You should

It's just like finding a name in a phonebook. To find


Example
Writing
Imagine you want to write `
Some alternative letter
A common beginner's mistake is to keep rushing forward and spot
What happens when you select the wrong
If you go in this
It is crucial to understand that there is only one correct
The correct letter
If you ever leave that blue box (as we did in
Summary
Don't click. Don't drag. And don't speed.
What do the colours mean?

a special
a
a
the other colours are included simply to discriminate the squares from each other.
In languages with accents (grave, acute, circumflex, etc), the accents are displayed in an
In the Japanese version of Dasher, colours are used to distinguish the different hiragana groups (eg ka,ki,ku,ke,ko are orange).
In the Korean version of Dasher, three different colours are used to distinguish initial consonants, vowels, and terminal consonants.
In the English-language desktop version 3 of Dasher,
You can alter the colour scheme by editing the
How to start dasher (version 4)
Set the dasher application running; when the dasher window comes up, either click the left mouse button or press the space bar to set it going. [One of these two will work.] Repeat this action (click or space), when you are finished, to stop dasher from dashing. Your computer's mouse controls Dasher.
Adjust the speed slider to fix the maximum speed Dasher will zoom at. A speed of 1 is good for a beginner, increasing to 2 after 5 minutes' practice, and to 4 when you are expert.
How to start dasher (version 2) on pocket PC
Install, run (wait a few seconds for it to load up the training file), then touch the screen with the stylus to make dasher move.
There are three special strongly-coloured squares in this version of Dasher, coloured yellow, red (in some releases only), and green; all three squares do not produce any character; these squares indicate sub-groupings of the alphabet. (Uppercase Alphabet, Numerals (in some releases only), and Punctuation.)
How to use Dasher in real life
Dasher can be used to communicate through your computer, and (to some degree) to control your computer. Obviously, the simplest way to communicate with Dasher is to have the person you're talking to watch the screen as you write. But there are lots of other ways to communicate through Dasher.
Copy to clipboard
If you have the `copy on stop' feature switched on, then, every time you stop Dasher, the contents of Dasher's text box get copied directly to your computer's clipboard. You can then use the `Paste' function of another application to transfer what you've written.
Speaking
Dasher connects to your computer's built-in text-to-speech system. There are several ways to use Dasher for speaking.
You can choose to have Dasher `speak each word': every time you pass through the end of a word (by entering a space character for example), that word gets spoken immediately.
You can also choose to have Dasher `speak on stop': every time you stop Dasher moving, everything that is in the text box gets spoken.
Finally, you can speak exactly when you want to by switching on
Save to file
You can save whatever is in the text box of Dasher as a plain text file by clicking the `Save file' icon in the icon bar, or using the menus at the top of the Dasher window (selecting File then Save).
Send text to other window
You can also have whatever is written in Dasher be directly beamed to another window. Enable the `send text to other window' option under the options menu. Then the window that you select will get Dasher's output.
Font sizes
Dasher has a text box (where the text appears) and a Dasher canvas (where all the fun zooming action happens). You can change the font sizes of both these regions using the Dasher menus at the top of the Dasher window. The two fonts are called the `Edit font' (for the text box's font), and the `Dasher font', I think. (I forget the exact menu names in Dasher version 3, sorry.) To change the edit font size bring up the usual dialog box and change size. To change the Dasher canvas size, find the Dasher-size option, which offers three to choose from, named something like: small, medium, and large.
Personalizing Dasher
There are three classes of files you can tweak in order to make Dasher work better for you:
Personalizing the language model
Dasher's predictions (in version 3 of Dasher) are based not on a dictionary but on a training text of ordinary text. For example, when you download Dasher version 3, it comes with a file called
If possible, provide Dasher with a training text in your own style -- a plain text file made from documents you have written before, and containing your own pet phrases, friends' names, and so forth. Either append this file to the training file, or replace the original training file.
If you think your personal training file may have become corrupted with rubbish text, edit it using any plain text editor. (Or ask a friend to do this for you.)
If you use Dasher for many months, the personal training file may become so large that Dasher becomes slow to start up; if so, edit the training file using a plain text editor.
When you use Dasher, it stores everything you write in another personal file with the same name as the training file. Next time you use Dasher, it reads in the original training file and everything you wrote last time, to help it predict better. Dasher learns all the time. To get the best results from Dasher:
Personalizing the alphabet
Which characters are available to you, and their order, is determined by the alphabet file. For example, you might use
Personalizing the colour scheme
You can change the colours of the Dasher world in two ways. The colour file (for example
These colours are used to colour multiple objects in dasher. If for example you want to change the colour of the
You can change which of these colours is used for each symbol's box by changing the
Languages
Dasher works in hundreds of languages.
For each language there is an alphabet file (or possibly more than one alphabet file). On the Dasher website we aim to supply at least one training text for each language. If we don't have a good training text for your language, please help us by making one and sending it to us.
See the Dasher website for the list of languages supported by Dasher. As of October 2005, all the major languages of the world are well supported, with the exception of Japanese and Chinese, for which Dasher version 3 offers only phonetic support (hiragana and pin-yin). In Dasher version 4, we will provide full support for Japanese and Chinese.
Dasher Special Needs Guide
Dasher is designed on the principle of getting


The

The
We can get information from whichever of the following is easiest for you:
Continuous gestures
Dasher's normal mode (
Can you make one or two continuous gestures? If you can operate a joystick, mouse, trackpad, or rollerball, then you have a two-dimensional control. If you can point on a touch-screen then that's perfect too. Can you move your nose around? If you can shake your head, that's a one-dimensional control; if you can nod, that's two. A head-mouse can be quite cheap, and it is a convenient way to drive Dasher. (We recommend the
If you are severely paralysed, the best option may be a gaze tracker. Do you have control of where your eyes are looking? With a gaze tracker we can write at 25 words per minute. Gaze trackers are quite expensive: we paid $2000 for the QuickGlance from EyeTech Digital Systems, and the Tobii eyetracker costs about $20,000. [We recommend both of these systems. You attach QuickGlance to an existing computer; Quickglance II costs about $4000. Tobii is a complete computer with built-in eyetracking cameras.] Dasher also works with the Eye response
If joysticks, mice, rollerballs, and gaze trackers don't work, there may be a few other ways to convey a continuous one-dimensional signal. Lips and eyebrows should both work, though we don't know of any manufacturer selling appropriate devices. Breath is a one-dimensional signal too. If you can control your breath, it should be possible to make a breath mouse for you. We made our $22 breath mouse using a USB optical mouse, a belt, and some elastic, and our most experienced user can write at 15 words per minute by breath alone.
Starting and stopping
There are several ways of starting and stopping Dasher. Pressing a button (for example, the left mouse button or the space bar) is one option. But if you can not press any buttons, it's possible to start and stop using only continuous gestures: in the options menu, select
When Dasher is paused or stopped, it can be restarted using any of the starting methods that are enabled. If `start on position' is enabled, then whenever Dasher is stopped a sequence of large targets will be displayed; you restart Dasher by pointing at (or looking at) the first (red) target, then the second (yellow) target. (We use two targets in sequence to make it difficult to start Dasher by accident.)
Recommendations for head-tracking
Many trackers have `smoothing' options, which determine the frequency with which the mouse position is updated; these options are normally used to smooth and damp down the mouse motion. For Dasher, we don't want such smoothing. We like instant, live, raw and jerky mouse coordinates. If there is a `smoothing' control, turn it right down.
The `gain' (sometimes called the `speed') of the head-tracker is also an important setting to adjust. Some trackers' gains can be adjusted in software. You can also adjust the gain by changing the geometry of your tracker: if you move the tracked dot from your forehead to the brim of a baseball cap, for example, then you roughly double the gain. Sitting closer to the tracker may also increase the gain. Find a gain setting that is comfortable. I like high gain because it allows me to steer with very small head motions.
Recommendations for gaze-tracking
For good results with gaze trackers, we strongly recommend that the gaze-tracker be made to be as responsive as possible. Many trackers have `smoothing' options, which determine the frequency with which the mouse position is updated and the number of successive gaze images used to estimate the mouse position. These options are normally used to smooth and damp down the mouse motion. For Dasher, we don't want such smoothing. We like instant, live, raw and jerky mouse coordinates. When you are navigating, your eye moves very quickly to the target you are interested in, and we want Dasher to respond instantly. The ideal settings for Dasher may be very different from the ideal settings for other software. Ask your eyetracker manufacturer to make it easy to change the settings when switching application.
Dasher has several options designed for use with gaze-trackers. We recommend using
If your gaze-tracker's calibration drifts with time, for example when your head moves, then you should select the
To avoid difficulties with the mouse being bounded by the top and bottom of the screen, we recommend choosing a window size for Dasher that is

Discrete Gestures
We have several versions of
Are time-critical gestures not an option?
Some ways of conveying information make use of the
If time-critical gestures are not an option, go to
If you
`Timeless' choices of Dasher
If so, try
Otherwise try
So, you want to steer Dasher at your own pace. Can you make fairly-accurate continuous gestures, given time? For example, can you position a pointer accurately on a screen, then press a button to indicate that you are ready? Or can you touch a touch-screen fairly accurately?
`Timeless' continuous Dasher: click mode
In
Alternatively, if you have a touch screen, a single touch on the screen initiates a zoom to that position.
`Timeless' choices of Button Dasher
How many different switches, keys, or buttons can you easily operate?
1
With just one button, the only timeless way to convey information is by the
2
You can use
2.5
If you can easily press two buttons, and, for special occasions, you are able to press a third button, you can use
Set up
In
3
You can use
4, 5, 6, or 7
With more than three buttons, you have the option to use
8 or more
Try
Button Dashers that exploit timing
There are two Dasher modes which make use of precise timing information, and generally require fewer button presses than the nn-time-critical modes:
(One button) dynamic mode
When started, Dasher will zoom towards a point towards the top or bottom of the display. A short button press will switch the point of zoom to the opposite side. Text can be entered by pressing the button when the desired phrase reaches the edge of the display.
Two button dynamic mode
Dasher zooms continuously towards the centre of the screen, with the two buttons being used to shift the display up and down. The buttons should be pressed whenever the desired text is aligned with the two markers.
Correcting errors
In either dynamic mode, there are three options for error correction: using an additional button, long presses or multiple presses. In all cases these actions will switch to a mode where Dasher unzooms at a fixed rate. In this mode, one more press will stop Dasher and a second press will return Dasher to forward zooming.
Summary of Dasher Modes
The various modes of
Normal
The original
Click Mode
In
Menu Mode
One button is used to select a location, and once a second button is pressed
Direct Mode
Direct mode is similar to menu mode, except boxes are assigned directly to each button rather than being selected in sequence.
Compass Mode
Compass mode makes use of four buttons. Two buttons are used to control vertical position. When the required vertical position has been reached a third button is pressed to zoom in. After zooming in on the location, the user once more selects vertical position. A forth button zooms out if an error is made.
(One Button) Dynamic Mode

Two Button Dynamic Mode

Authors

This manual was written by The Dasher Project (
translator-credits