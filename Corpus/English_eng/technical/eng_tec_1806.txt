# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	OpenOffice
# source:	https://object.pouta.csc.fi/OPUS-OpenOffice/v3/raw/en_GB.zip
# copyright_short:	http://opus.nlpl.eu/OpenOffice.php
# copyright_long:	http://opus.nlpl.eu/OpenOffice.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

For...Next Statement [Run-time]
/text/sbasic/shared/03090202.xhp
Sun Microsystems, Inc.
converted from old format - fpe
For statement
To statement
Step statement
Next statement
For...Next Statement [Run-time]
Repeats the statements between the For...Next block a specified number of times.
Syntax:
For counter=start To end [Step step]
statement block
[Exit For]
statement block
Next [counter]
Variables:
Counter:
Loop counter initially assigned the value to the right of the equal sign (start).
Only numerical variables are valid.
The loop counter increases or decreases according to the variable Step until End is passed.
Start:
Numerical variable that defines the initial value at the beginning of the loop.
End:
Numerical variable that defines the final value at the end of the loop.
Step:
Sets the value by which to increase or decrease the loop counter.
If Step is not specified, the loop counter is incremented by 1.
In this case, End must be greater than Start.
If you want to decrease Counter, End must be less than Start and Step must be assigned a negative value.
For...Next
loop repeats all of the statements in the loop for the number of times that is specified by the parameters.
As the counter variable is decreased, $[officename] Basic checks it against the end value.
As soon as the counter passes the end value, the loop automatically ends.
For...Next
statements.
If you do not specify a variable following the
Next
statement,
Next
automatically refers to the most recent
For
statement.
For
and
Next
are repeated for ever.
When counting down the counter variable, $[officename] Basic checks for overflow or underflow.
The loop ends when Counter exceeds End (positive Step value) or is less than End (negative Step value).
Exit For
statement to exit the loop unconditionally.
This statement must be within a
For...Next
loop.
Use the
If...Then
statement to test the exit condition as follows:
For...
statements
If condition = True Then Exit For
statements
Next
For...Next
loops, if you exit a loop unconditionally with
Exit For
, only one loop is exited.
Example:
The following example uses two nested loops to sort a string array with 10 elements ( sEntry() ) that contain various values:
Sub ExampleSort
Dim sEntry(9) As String
Dim iCount As Integer
Dim iCount2 As Integer
Dim sTemp As String
sEntry(0) = &quot; Jerry &quot;
sEntry(1) = &quot; Patty &quot;
sEntry(2) = &quot; Kurt &quot;
sEntry(3) = &quot; Thomas &quot;
sEntry(4) = &quot; Michael &quot;
sEntry(5) = &quot; David &quot;
sEntry(6) = &quot; Cathy &quot;
sEntry(7) = &quot; Susie &quot;
sEntry(8) = &quot; Edward &quot;
sEntry(9) = &quot; Christine &quot;
For iCount = 0 To 9
For iCount2 = iCount + 1 To 9
If sEntry(iCount) > sEntry(iCount2) Then
sTemp = sEntry(iCount)
sEntry(iCount) = sEntry(iCount2)
sEntry(iCount2) = sTemp
End If
Next iCount2
Next iCount
For iCount = 0 To 9
Print sEntry(iCount)
Next iCount
End Sub