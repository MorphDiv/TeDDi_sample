# language_name_wals:	English
# language_name_glotto:	English
# ISO_6393:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	GNOME
# source:	https://object.pouta.csc.fi/OPUS-GNOME/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/GNOME.php
# copyright_long:	http://opus.nlpl.eu/GNOME.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

The power of HTML5 and the web in your application
WebKit
WebKit is a powerful, multi-platform HTML engine used in open source and commercial products. WebKitGTK+ is the port of WebKit built on
WebKitGTK+ makes it easy to add web functionality to your application, or to use HTML5 and associated technologies to create dynamic user interfaces quickly.
WebKitGTK+ demo tutorial
WebKitGTK+ Reference Manual
The WebKitGTK+ web site
Unified and integrated real-time communication service
Telepathy
Telepathy provides a powerful framework for interacting with the user's instant messaging contacts. With Telepathy, all accounts and connections are handled by a D-Bus session service that's deeply integrated into the GNOME desktop. Applications can tie into this service to communicate with contacts.
With the Telepathy Tubes API, you can even tunnel an arbitrary protocol over modern instant messaging protocols like Jabber to create interactive applications. Create multi-player games or collaborative editors that integrate with the desktop-wide instant messaging services.
Telepathy Developer's Manual
The Telepathy web site
Fully internationalized text layout and rendering
Pango
Pango is the core text and font handling library in the GNOME platform. It is responsible for laying out and rendering text, and is used throughout GTK+.
The Pango layout engine can be used with different font backends and drawing backends. On most GNOME systems, Pango will use FreeType, fontconfig, and Cairo to access fonts and render text. On other systems, Pango will use the native font systems, such as Uniscribe on Microsoft Windows and ATSUI on MacOS
Pango has extensive support for the various writing systems used throughout the world. Many of the writing systems used for languages have complex rules for laying out glyphs and composing characters. With Pango, nearly all languages can be written and displayed correctly, allowing users everywhere to view text in their native languages. Pango support for multiple writing systems is automatic; application developers do not have to write any special code to support other languages.
Pango supports the text styling used in typical documents and interfaces, including italics, font weights, and underlines. Pango uses a simple XML-like vocabulary called PangoMarkup which enables you to set font size, color, styles, and other text attributes. Using PangoMarkup, you can specify inline styles without manually iterating over text blocks. PangoMarkup can be used directly from GTK+, enabling you to style text in your graphical interfaces easily.
You should use Pango directly whenever you need to lay text out on the screen or on a different medium. Using Pango will allow your text layout to work seamlessly with GTK+ and the rest of the GNOME platform. It will help you create portable code, and most importantly, it will ensure that your application can render text correctly in hundreds of different languages.
Pango Reference Manual
The Pango web site
Interactive notifications in the messaging tray
Notify
The libnotify library provides a convenient API for presenting notifications to the user. Notifications can be simple message or they can allow the user to respond. Notifications made with libnotify will use the appropriate interface in the environment the application is running in. In GNOME 3, notifications are displayed at the bottom of the screen and then put into the messaging tray.
Libnotify Reference Manual
Secure storage for passwords and other data
Keyring
GNOME provides a modern and secure keyring manager to store users' passwords and other sensitive data. Applications can use the keyring manager library to store and access passwords, and users can manage their passwords using GNOME's
The keyring manager provides any number of keyrings, where each keyring can contain any number of keyring items. Items in a keyring store some piece of data, often a password. Each keyring is locked individually, and users must provide a password to unlock the keyring. Once a keyring has been unlocked, the user has access to all of the items in that keyring.
The keyring manager provides access control lists for each keyring item, controlling which applications are allowed access to that item. If an unknown application attempts to access a keyring item, the keyring manager will prompt the user to allow or deny that application access. This helps prevent malicious or poorly-written programs from accessing the user's sensitive data.
Keyring data stored on the file system is encrypted with the AES block cipher, and SHA1 is used for hashes of the item's attributes. Using the attributes hash, the keyring manager is able to look up items requested by applications without ever unlocking the keyring. The keyring has to be unlocked when a matching item is found and accessed.
The keyring manager also provides a session keyring. Items in the session keyring are never stored on disk, and are lost as soon as the user's session ends. The session keyring can be used to store passwords to be used in the current session only.
If you use GIO to access remote servers, you automatically get the benefits of the keyring manager. Whenever GVFS needs to authenticate the user, it provides the option to store the password, either in the default keyring or in the session keyring.
You should use the keyring manager whenever your application needs to store passwords or other sensitive data for users. Using the keyring manager provides a better user experience while still keeping user data safe and secure.
gnome-keyring Reference Manual
libseahorse Reference Manual
Overview of the powerful technologies inside the GNOME platform.
Shaun McCance
shaunm@gnome.org
Germán Póo-Caamaño
gpoo@gnome.org
GNOME Foundation
http://foundation.gnome.org/
GNOME
Overview of the GNOME Platform
GNOME is a powerful but simple desktop environment with a strong focus on usability, accessibility, and internationalization. GNOME is designed to be usable by everybody, regardless of technical expertise, disabilitites, or native language. GNOME makes it easy for people to use their computers.
The GNOME platform provides a comprehensive development environment for graphical applications and other software. GNOME provides a comprehensive developer platform that allow developers to create professional software that is easy to use and aesthetically pleasing. Using the technologies in GNOME, you can create high-quality software to meet and exceed your users' expectations. This document provides a high-level overview of the GNOME platform along with links to detailed documentation on each part of the platform.
Graphics and Multimedia
Core Application Support
Application Technologies
Under the Hood
Topic-oriented help system
Help
Users sometimes need a little help, even with the best-designed applications. GNOME provides a built-in topic-oriented help system using the
When you do need linear manuals, GNOME also supports the industry-standard
Ten Minute Mallard Tour
The Mallard web site
The DocBook web site
An easy to use, efficient and flexible UPnP framework
GUPnP
GUPnP is an object-oriented open source framework for creating UPnP devices and control points, written in C using GObject and libsoup. The GUPnP API is intended to be easy to use, efficient and flexible.
The GUPnP framework consists of the following components/packages:
GSSDP: The low-level library implementing resource discovery and announcement on the network through SSDP protocol.
GUPnP: The core library that implements the UPnP specification: resource announcement and discovery, description, control, event notification, and presentation (GUPnP includes basic web server functionality through libsoup). GUPnP does not include helpers for construction or control of specific standardized resources (e.g. MediaServer); this is left for higher level libraries utilizing the GUPnP framework.
GUPnP A/V: A small utility library that aims to ease the handling and implementation of UPnP A/V profiles.
GUPnP DLNA: A small utility library that aims to ease the DLNA-related tasks such as media profile guessing, transcoding to a given profile, etc.
GUPnP IGD: A library to handle UPnP Internet Gateway Device port mappings.
GUPnP Vala: Vala bindings for GUPnP libraries.
GUPnP Tools: Free replacements of Intel UPnP tools, that use GUPnP. They provides the following client and server side tools which enable one to easily test and debug one's UPnP devices and control points:
Universal Control Point: a tool that enables one to discover UPnP devices and services, retrieve information about them, subscribe to events and invoke actions.
Network Light: a virtual light bulb that allows control points to switch it on and off, change its dimming level and query its current status. It also provides a simple UI to control all the network lights available on the network.
AV Control Point: a simple media player UI that enables one to discover and play multimedia contents available on a network. It is strictly a control point and therefore does not have any playback capabilities of it's own and relies on external UPnP MediaRenderer devices for actual playback.
Upload: a simple commandline utility that uploads files to known MediaServers. Use Universal Control Point for discovering the MediaServers.
The GUPnP framework was born out of frustration with libupnp and its mess of threads. GUPnP is entirely single-threaded (though asynchronous), integrates with the GLib main loop, and provides the same set of features as libupnp while hiding most of the UPnP internals through an elegant object-oriented design.
GUPnP is free software. All libraries are released under the GNU LGPL, while GUPnP Tools are licensed under GNU GPL.
You should use GUPnP whenever you need your code to communicate with any UPnP or DLNA devices. Examples of such devices includes Sony Playstation 3 and Bravia model TVs, Samsung TVs and phones, Microsoft XBox and all modern router etc. The list of such devices is huge and its increasing.
Apart from dealing with existing UPnP devices, GUPnP can very effectively be used to easily create custom home network solutions where devices/services are able to discover and interact with each other without any configuration from user.
For comprehensive information on GUPnP, please visit the
Feature rich toolkit for creating graphical user interfaces
GTK+
GTK+ is the primary library used to construct user interfaces in GNOME. It provides all the user interface controls, or widgets, used in a common graphical application. Its modern, object-oriented API allows you to construct attractive and sophisticated user interfaces without dealing with the low-level details of drawing and device interaction.
In addition to basic widgets, such as buttons, check boxes, and text entries, GTK+ also provides powerful Model-View-Controller (MVC) APIs for tree views, multi-line text fields, and menu and toolbar actions.
Widgets in GTK+ are placed on windows using a box-packing model. Programmers specify only how to pack widgets together in container boxes, rather than position them directly with absolute coordinates. GTK+ ensures that windows are sized correctly to fit their contents, and it automatically handles window resizing.
Because GTK+ offers a flexible API, developing additional widgets for use in GTK+ applications is easy. A number of third-party libraries exist which provide additional widgets, and many developers have created custom, special-purpose widgets for their applications.
GTK+ handles the difficult details of user interfaces and user interaction, and provides a simple yet powerful API which allows you to focus on the details of your application. Applications developed with GTK+ will automatically follow the user's theme and font settings, will interact properly with accessibility technologies, and will behave as users expect.
GTK+ demo tutorial
GTK+ Reference Manual
The GTK+ web site
Playing, creating and manipulating sound, video, and other media
GStreamer
GStreamer is a powerful multimedia library for playing, creating, and manipulating sound, video, and other media. You can use GStreamer to provide sound and video playback, record input from multiple sources, and edit multimedia content. GStreamer supports encoding and decoding numerous formats by default, and support for additional formats can be added with plug-ins.
GStreamer provides a flexible architecture wherein media is processed through a pipeline of elements. Each element may apply filters to the content, such as encoding or decoding, combining multiple sources, or transforming the multimedia content. This architecture allows for an arbitrary arrangement of elements, so that you can accomplish virtually any effect using GStreamer. Furthermore, GStreamer is designed to have low overhead, so it can be used in applications with high demands on latency.
While GStreamer provides a powerful API for manipulating multimedia, it also provides convenient routines for simple playback. GStreamer can automatically construct a pipeline to read and playback files in any supported format, allowing you to use sound and video in your application easily.
The GStreamer architecture allows plugins to add encoders, decoders, and all sorts of content filters. Third-party developers can provide GStreamer plugins which will be automatically available to other applications using GStreamer. Plugins can provide support for other multimedia formats or provide additional functionality and effects.
You should use GStreamer whenever you need to read or play multimedia content in your application, or if your application needs to manipulate sound or video. Using GStreamer makes your application development easy, and it provides you well-tested elements for many of your needs.
The GStreamer Application Development Manual
The GStreamer 0.10 Core Reference Manual
The GStreamer documentation page
The GStreamer web site
Asynchronous file and URI handling with access to file and volume info
GIO Files
GIO provides APIs for asynchronously reading and writing files and other streams. Files are referenced by URIs, and local backends can provide access to more than just local files. When running under the GNOME desktop, GIO uses GVfs to allow access to files over SFTP, FTP, WebDAV, SMB, and other popular protocols. This transparent network file access is free to all applications using GIO.
The GIO file APIs were designed to be used in event-driven graphical interfaces. The non-blocking, asynchronous design means your user interface doesn't hang while waiting for a file. There are also synchronous versions of the APIs available, which are sometimes more convenient for worker threads or processes.
GIO also provides routines for managing drives and volumes, querying file types and icons, and finding applications to open files.
GIO Reference Manual
Powerful networking API built on the GIO stream classes
GIO Networking
Built on top of the stream APIs used for files, GIO provides high-level networking APIs to communicate over TCP/IP and UNIX domain sockets. You can use the GIO networking APIs to connect to a server, listen for events, and read resources. The asynchronous API designs means your application doesn't block waiting for a response.
Lowlevel network support
Highlevel network functionality
Underlying windowing and event handling
GDK
GDK is the low-level library used by GTK+ to interact with the system for graphics and input devices. Although you will rarely use GDK directly in application code, it contains all the necessary functionality to draw objects and text to the screen and to interact with the user with various input devices.
GDK enables you to access events from keyboards, mice, and other input devices, rather than connect to the high-level signals used in GTK+. GDK also provides low-level routines to access drag and drop and clipboard data from the system. When implementing custom controls, you may need to access these features to implement proper user interaction behavior.
GDK provides other functionality which is needed to implement a complete graphical toolkit like GTK+. Since GDK acts as a platform abstraction, allowing GTK+ to run under multiple environments, it provides an API for all of the system functionality needed by GTK+. This includes information about multi-head displays, resolution and color depth, colormaps, and cursors.
You should use GDK whenever you need low-level access to the underlying windowing system, including low-level access to events, windows, and the clipboard. Using GDK for these tasks ensures that your code is portable and integrates with the rest of your GTK+ code. The simple drawing routines in GDK should generally not be used. Instead, you should use the extensive functionality provide by Cairo.
GDK Reference Manual
Common relational database access
GDA
GDA offers a wrapper around relational databases, allowing you to easily store and retrieve data in many different common database systems.
GNOME Data Access Manual
Integration with the desktop-wide address book and calendar
Evolution Data Server
With Evolution Data Server, GNOME provides a single address book and calendar that all applications can use to store and retrieve information. Using Evolution Data Server means that users no longer have to maintain separate lists of contacts in each application, or manually copy events to their calendar.
People use computers increasingly to interact with their friends and colleagues. Applications such as email programs, instant messengers, and telephony and video conferencing applications are used to communicate with others. These applications often provide contact lists to help users. Using Evolution Data Server, applications can store contact information in a single location, allowing all applications to see all the pertinent data about users' contacts.
Applications can also use Evolution Data Server to store and retrieve appointments on the user's calendar. For example, the clock on the panel shows a simple calendar when clicked. If the user has any appointments scheduled, they are shown alongside the calendar. This makes it easy to see upcoming appointments without opening a full calendar application.
Evolution API Reference: libebook
Evolution API Reference: libecal
Standard interprocess communications bus
D-Bus
D-Bus is a cross-desktop message bus for sending events between various applications, the desktop, and low-level components of the system. D-Bus provides a simple API for sending messages to particular services and for broadcasting messages to all interested services. D-Bus enables different types of applications to communicate and integrate with each other and with the desktop, providing better interaction and a richer experience for the user.
D-Bus provides a session and a system bus. The session bus is used by applications in a single user session, allowing them to share data and event notifications and to integrate into the user's desktop. For example, movie players can send a D-Bus message to prevent the screensaver from activating when the user is watching a movie.
The system bus is a single message bus which runs independently of any user sessions. It can communicate with applications in any session, enabling those applications to interact with system components without dealing with low-level system details. The system bus is used to provide important functionality that users expect to work on their systems. For example, the system bus is used to monitor when network interfaces go up or down, when external drives get plugged in, and when laptop batteries are low.
D-Bus is developed jointly on
GNOME provides full support for D-Bus using the GDBus APIs in
D-Bus Tutorial
D-Bus Specification
Stunning graphics and animations with a scene-graph API
Clutter
Clutter is a library that allows creating fast, portable, dynamic, compelling user interfaces.
Clutter uses the
Clutter does not specify any visual style, and does not provide any pre-defined complex user interface control; it lets the developer define what is needed, using a flexible scene graph API, with free-form placement of the scene elements (or "actors") on the main viewport (or "stage").
Clutter comes with pre-defined actors for displaying solid colors, image data, text and custom high-precision 2D drawing using the
Clutter provides an extensible animation framework and graphical effects. An animation is associated with a timeline and changes one or more properties of one or more actors over time, for example their rotation in a particular dimension, scale, size, opacity, etc.
A number of third-party libraries allow integration with other technologies, such as: Clutter-GTK, for embedding a Clutter stage inside a GTK+ application; Clutter-GStreamer, for embedding GStreamer video and audio pipelines; Clutter-Box2D and Clutter-Bullet, for adding physics interaction in both 2D and 3D environments.
The Clutter Cookbook
Clutter Reference Manual
The Clutter web site
Simple audio API for notifications and events
Canberra
Canberra is a simple library for playing audio events and notifications, such as when the user has received a message or an error has occurred. As well as providing a convenient API, Canberra can also work with the accessibility features of the desktop to provide alternate notification for hearing-impaired users.
Canberra Reference
Modern 2D vector drawing canvas
Cairo
Cairo is a 2D graphics library featuring a sophisticated API for drawing vector graphics, compositing images, and rendering anti-aliased text. Cairo provides support for multiple output devices, including the X Window System, Microsoft Windows, and image buffers, allowing you to write platform-independent code to draw graphics on different media.
The Cairo drawing model is similar to those provided by PostScript and PDF. The Cairo API provides such drawing operations as stroking and filling cubic Bézier splines, compositing images, and performing affine transformations. These vector operations allow for rich, anti-aliased graphics without using expensive pixel-based drawing in your application code.
Cairo's rich drawing model allows for high-quality rendering to multiple media. The same API can be used to create stunning on-screen graphics and text, to render images, or create crisp output suitable for printing.
You should use Cairo whenever you need to draw graphics in your application beyond the widgets provided by GTK+. Much of the drawing inside GTK+ is done using Cairo. Using Cairo for your custom drawing will allow your application to have high-quality, anti-aliased, and resolution-independent graphics.
Cairo Manual
The Cairo web site
Support for screen readers and other accessibility tools
ATK
Accessibility is the process of ensuring your application can be used by people with various disabilities. Disabilities come in many forms: visual impairments, movement impairments, hearing impairments, cognitive and language impairments, and seizure disorders. Many people have some sort of disability, and making your application accessibility will allow more people to use your application effectively.
GNOME provides support for accessibility devices using the ATK framework. This framework defines a set of interfaces to which graphical interface components adhere. This allows, for instance, screen readers to read the text of an interface and interact with its controls. ATK support is built into GTK+ and the rest of the GNOME platform, so any application using GTK+ will have reasonable accessibility support for free.
Nonetheless, you should be aware of accessibility issues when when developing your applications. Although GTK+ interfaces provide reasonable accessibility by default, you can often improve how well your program behaves with accessibility tools by providing additional information to ATK. If you develop custom widgets, you should ensure that they expose their properties to ATK. You should also avoid using sound, graphics, or color as the sole means of conveying information to the user.
The GNOME desktop ships with a number of accessibility tools which enable users with disabilities to take full advantage of their desktop and applications. Applications that fully implement ATK will be able to work with the accessibility tools. GNOME's accessibility tools include a screen reader, a screen magnifier, an on-screen keyboard, and
GNOME Accessibility for Developers
ATK Reference
translator-credits