# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	OpenOffice
# source:	https://object.pouta.csc.fi/OPUS-OpenOffice/v3/raw/en_GB.zip
# copyright_short:	http://opus.nlpl.eu/OpenOffice.php
# copyright_long:	http://opus.nlpl.eu/OpenOffice.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Add-in Functions
/text/scalc/01/04060111.xhp
add-ins; functions
functions; add-in functions
Function Wizard; add-ins
Add-in Functions
The following describes and lists some of the available add-in functions.
Add-in concept
description of the $[officename] Calc add-in interface
in the Help.
In addition, important functions and their parameters are described in the Help for the
Shared Library
$[officename] Calc add-in DLL
.
Add-ins supplied
Function Wizard
(choose
Insert - Function
) under the
Add-in
category, plus several of the financial functions.
Analysis Functions Part One
Analysis Functions Part Two
ISLEAPYEAR function
leap year determination
mw added one entry
ISLEAPYEAR
Determines whether a year is a leap year.
If yes, the function will return the value 1 (TRUE); if not, it will return 0 (FALSE).
Syntax:
ISLEAPYEAR( &quot; Date &quot; )
Date
specifies whether a given date falls within a leap year.
The Date parameter must be a valid date according to the locale settings of %PRODUCTNAME.
Example:
=ISLEAPYEAR(A1) returns 1, if A1 contains 29/02/1968, the valid date 29th February 1968 in your locale setting.
You may also use =ISLEAPYEAR( &quot; 29/02/1968 &quot; ) or =ISLEAPYEAR( &quot; 29/02/68 &quot; ).
Never use =ISLEAPYEAR(29/02/68), because this would first evaluate 29 divided by 2 divided by 68, and then calculate the ISLEAPYEAR function from this small number as a serial date number.
YEARS function
number of years between two dates
mw added one entry
YEARS
Calculates the difference in years between two dates.
Syntax:
YEARS(StartDate; EndDate; Type)
StartDate
is the first date
EndDate
is the second date
Type
calculates the type of difference.
Possible values are 0 (interval) and 1 (in calendar years).
MONTHS function
number of months between two dates
mw added one entry
MONTHS
Calculates the difference in months between two dates.
Syntax:
MONTHS(StartDate; EndDate; Type)
StartDate
is the first date
EndDate
is the second date
Type
is the type of difference.
Possible values include 0 (interval) and 1 (in calendar months).
ROT13 function
encrypting text
mw added one entry
ROT13
Encrypts a character string by moving the characters 13 positions in the alphabet.
After the letter Z, the alphabet begins again (Rotation).
By applying the encryption function again to the resulting code, you can decrypt the text.
Syntax:
ROT13(Text)
Text
is the character string to be encrypted.
ROT13(ROT13(Text)) decrypts the code.
DAYSINYEAR function
number of days; in a specific year
mw added one entry
DAYSINYEAR
Calculates the number of days in the year in which the given date occurs.
Syntax:
DAYSINYEAR(Date)
Date
is any date in the desired year.
The Date parameter must be a valid date according to the locale settings of %PRODUCTNAME.
Example:
=DAYSINYEAR(A1) returns 366 days if A1 contains 29/02/1968, a valid date for the year 1968.
DAYSINMONTH function
number of days;in a specific month of a year
mw added one entry
DAYSINMONTH
Calculates the number of days in the month in which the given date occurs.
Syntax:
DAYSINMONTH(Date)
Date
is any date in the desired month of the desired year.
The Date parameter must be a valid date according to the locale settings of %PRODUCTNAME.
Example:
=DAYSINMONTH(A1) returns 29 days if A1 contains 17/02/1968, a valid date for February 1968.
WEEKS function
number of weeks;between two dates
mw added one entry
WEEKS
Calculates the difference in weeks between two dates.
Syntax:
WEEKS(StartDate; EndDate; Type)
StartDate
is the first date
EndDate
is the second date
Type
is the type of difference.
The possible values are 0 (interval) and 1 (in numbers of weeks).
WEEKSINYEAR function
number of weeks;in a specific year
mw added one entry
WEEKSINYEAR
Calculates the number of weeks in a year in which the given date occurs.
The number of weeks is defined as follows: a week that spans two years is added to the year in which most days of that week occur.
Syntax:
WEEKSINYEAR(Date)
Date
is any date in the desired year.
The Date parameter must be a valid date according to the locale settings of %PRODUCTNAME.
Example:
WEEKSINYEAR(A1) returns 53 if A1 contains 17/02/1970, a valid date for the year 1970.
Add-ins through %PRODUCTNAME API
API
.