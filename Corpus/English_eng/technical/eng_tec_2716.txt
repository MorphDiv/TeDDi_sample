# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Next
(PHP 3, PHP 4)
Loads the PHP extension given by the parameter library.
The library parameter is only the filename of the extension to load which also depends on your platform.
For example, the sockets extension (if compiled as a shared module, not the default!) would be called sockets.so on unix platforms whereas it is called php_sockets.dll on the windows platform.
Returns TRUE on success or FALSE on failure.
If the functionality of loading modules is not available (see Note) or has been disabled (either by turning it off enable_dl or by enabling safe_mode in php.ini) an E_ERROR is emitted and execution is stopped.
If dl() fails because the specified library couldn't be loaded, in addition to FALSE an E_WARNING message is emitted.
Use extension_loaded() to test whether a given extension is already available or not.
This works on both built-in extensions and dynamically loaded ones (either through php.ini or dl()).
Example:
if (!extension_loaded('gd')) {if (!dl('gd.so')) {exit;}}
The directory where the extension is loaded from depends on your platform:
Windows - If not explicitly set in the php.ini, the extension is loaded from c:\php4\extensions\ by default.
Unix - If not explicitly set in the php.ini, the default extension directory depends on
whether PHP has been built with --enable-debug or not
whether PHP has been built with (experimental) ZTS (Zend Thread Safety) support or not
the current internal ZEND_MODULE_API_NO (Zend internal module API number, which is basically the date on which a major module API change happened, e.g.
20010901)
Use the extensions statement in your php.ini when operating under such an environment.
However, the CGI and CLI build are not affected!
See also Extension Loading Directives and extension_loaded().
Prev
Home
Next
assert
Up
extension_loaded