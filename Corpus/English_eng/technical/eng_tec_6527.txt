# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	KDE4
# source:	https://object.pouta.csc.fi/OPUS-KDE4/v2/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/KDE4.php
# copyright_long:	http://opus.nlpl.eu/KDE4.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Monitoring I/ O for %1 (%2)
The program '%1 '(PID: %2) is being monitored for input and output through any file descriptor (stdin, stdout, stderr, open files, network connections, etc.). Data being written by the process is shown in red and data being read by the process is shown in blue.
& Attach
& Pause
& Resume
& Detach
Failed to attach to process %1.
Jump to Parent Process
Jump to Process Debugging This One
Show Application Window
Monitor Input & & Output
Resume Stopped Process
Suspend (STOP)
Continue (CONT)
Hangup (HUP)
Interrupt (INT)
Terminate (TERM)
Kill (KILL)
User 1 (USR1)
User 2 (USR2)
Focus on Quick Search
Send Signal
Jump to Parent Process (%1)
Hide Column '%1 '
Show Column '%1 '
Display Units
Kilobytes per second
Kilobytes
Megabytes per second
Megabytes
Gigabytes per second
Gigabytes
Percentage
Display command line options
Divide CPU usage by number of CPUs
Displayed Information
Characters read/ written
Number of Read/ Write operations
Bytes actually read/ written
Show I/ O rate
Show Tooltips
You do not have the permission to renice the process and there was a problem trying to run as root. Error %1 %2
You must select a process first.
You do not have sufficient privileges to change the CPU scheduler. Aborting.
You do not have sufficient privileges to change the CPU priority. Aborting.
You do not have sufficient privileges to change the IO scheduler and priority. Aborting.
You do not have the permission to change the I/ O priority of the process and there was a problem trying to run as root. Error %1 %2
You do not have the permission to change the CPU Scheduler for the process and there was a problem trying to run as root. Error %1 %2
You do not have the permission to kill the process and there was a problem trying to run as root. Error %1 %2
Kill
Interpret output as containing VT100 commands. For console-based programs.
If this is checked then ANSI escape sequences will be interpreted and not displayed. Useful for when monitoring bash.
Interpret ANSI escape sequences
Show the output from processes launched by this process.
Follow fork and clone commands to monitor child processes
Monitor child processes
Pause the process and its output
Stop reading the output from the process. This will cause the process to be blocked, effectively pausing it. The process can be resumed by resuming, detaching or closing the dialog.
Stop monitoring the process
Stop monitoring the process and allow the process to resume running.
Send a SIGTERM signal to the selected process. See What's This for more information. Right click on a process to send other signals.
& Kill Process...
Filter which processes are shown by the text given here. The text can be a partial string match of the Name, Command or Window Title of the process. It can also be a Username or a Process ID number. For example: ksysShow processes containing "ksys" in the name, for example the processes "ksysguard" and "ksysguardd". rootShow processes owned by root. For example init 1234Show the processes with the PID or Parent PID of 1234.
Quick search
Change which processes are shown, and how they are shown. The processes can be further filtered by using the Quick Search text filter. All ProcessesShow all the processes on the system. All Processes, treeShow all the processes on the system, in a hierarchical manner using the parent PID information. System ProcessesShow processes running as root and as a user who cannot login. User ProcessesShow processes running as a non-root user who can login. Own ProcessesShow processes owned by the same user that this process is owned by. Programs OnlyShow processes which are running as a user who can login and are either attached to a TTY or have at least one X11 Window. Technical Information: Processes with multiple threads are just shown as a single process, and not treated any differently. Kernel threads are shown as normal processes, but are actually running inside the kernel and are not real processes. As such, many of the fields (such as Username) do not apply.
All Processes
All Processes, Tree
System Processes
User Processes
Own Processes
Programs Only
Change scheduling priority for:
CPU Scheduler
p, li {white-space: pre-wrap;} The standard time-sharing scheduler for processes without special requirements.
p, li {white-space: pre-wrap;} Normal Scheduling: Default Linux time-sharing (Other) Normal is the standard Linux time-sharing scheduler that is intended for all processes that do not require special static priority real-time mechanisms. The process to run is chosen from the list of other Normal or Batch processes based on a dynamic priority that is determined only inside this list. The dynamic priority is based on the priority level given and increased for each time-quantum the process is ready to run, but denied to run by the scheduler. This ensures fair progress among all Normal processes.
Normal
p, li {white-space: pre-wrap;} For CPU-intensive non-interactive processes. Process is mildly disfavored in scheduling decisions.
p, li {white-space: pre-wrap;} Batch Scheduling (Since Linux 2.6.16.) This policy is similar to Normal, except that this policy will cause the scheduler to always assume that the process is CPU-intensive. Consequently, the scheduler will apply a small scheduling penalty so that this process is mildly disfavored in scheduling decisions. This policy is useful for workloads that are non-interactive, but do not want to lower their nice value, and for workloads that want a deterministic scheduling policy without interactivity causing extra preemptions (between the workload's tasks).
Batch
p, li {white-space: pre-wrap;} Process will run whenever runnable. Higher priority than Normal or Batch. Has Timeslicing.
p, li {white-space: pre-wrap;} Round Robin Scheduling Round Robin is a simple enhancement of FIFO. Everything described below for FIFO also applies to Round Robin, except that each process is only allowed to run for a maximum time quantum.
Round robin
p, li {white-space: pre-wrap;} Process will run whenever runnable. Higher priority than Normal or Batch. No timeslicing.
p, li {white-space: pre-wrap;} First In-First Out Scheduling When a FIFO process becomes runnable, it will always immediately preempt any currently running Normal or Batch process.
FIFO
I/ O Scheduler
p, li {white-space: pre-wrap;} Process's priority is based on the CPU priority.
p, li {white-space: pre-wrap;} Normal Scheduling This is the same as Best Effort scheduling, except that the priority is calculated automatically based on the CPU priority. Processes with a higher priority will take priority for access to the hard disk. Programs running at the same Best Effort/ Normal priority are served in a Round Robin fashion.
p, li {white-space: pre-wrap;} Process can only use the hard disk when no other process has used it very recently.
p, li {white-space: pre-wrap;} Idle Scheduling A program running with Idle I/ O priority will only get disk time when no other program has asked for disk I/ O for a defined grace period. The impact of Idle I/ O processes on normal system activity should be zero. Priority is not applicable to this scheduling class.
Idle
p, li {white-space: pre-wrap;} Process is given higher priority to access the hard disk than Normal.
p, li {white-space: pre-wrap;} Best Effort Scheduling Processes with a higher priority will take priority for access to the hard disk. Programs running at the same Best Effort/ Normal priority are served in a Round Robin fashion.
Best effort
p, li {white-space: pre-wrap;} Process gets immediate access to the hard disk whenever needed, regardless of what else is going on.
p, li {white-space: pre-wrap;} Real Time Scheduling The Real Time scheduling class is given first access to the disk, regardless of what else is going on in the system. Thus the Real Time class needs to be used with some care, as it can starve other processes. As with the Best Effort class, 8 priority levels are defined denoting how big a time slice a given process will receive on each scheduling window.
Real time
Low Priority
High Priority
Script error: Argument to setHtml() was not a string
Script error: Argument to fileExists() was not a string
Script error: Argument to readFile() was not a string
Could not read script '%1 '. Error %2
- Process is doing some work.
- Process is waiting for something to happen.
- Process has been stopped. It will not respond to user input at the moment.
- Process has finished and is now dead, but the parent process has not cleaned up.
The process name.
The user who owns this process.
The controlling terminal on which this process is running.
The priority with which this process is being run. Ranges from 19 (very nice, least priority) to -19 (top priority).
The current CPU usage of the process.
The current total CPU usage of the process.
This is the amount of virtual memory space that the process is using, included shared libraries, graphics memory, files on disk, and so on. This number is almost meaningless.
This is the amount of real physical memory that this process is using by itself. It does not include any swapped out memory, nor the code size of its shared libraries. This is often the most useful figure to judge the memory use of a program.
This is the amount of real physical memory that this process's shared libraries are using. This memory is shared among all processes that use this library.
The command with which this process was launched.
The title of any windows that this process is showing.
The unique Process ID that identifies this process.
The number of bytes read. See What's This for more information.
The number of bytes written. See What's This for more information.
Technical information: The kernel process name is a maximum of 8 characters long, so the full command is examined. If the first word in the full command line starts with the process name, the first word of the command line is shown, otherwise the process name is used.
The user who owns this process. If the effective, setuid etc user is different, the user who owns the process will be shown, followed by the effective user. The ToolTip contains the full information. Login Name/ GroupThe username of the Real User/ Group who created this processEffective User/ GroupThe process is running with privileges of the Effective User/ Group. This is shown if different from the real user. Setuid User/ GroupThe saved username of the binary. The process can escalate its Effective User/ Group to the Setuid User/ Group. File System User/ GroupAccesses to the filesystem are checked with the File System User/ Group. This is a Linux specific call. See setfsuid(2) for more information.
This is the size of allocated address space - not memory, but address space. This value in practice means next to nothing. When a process requests a large memory block from the system but uses only a small part of it, the real usage will be low, VIRT will be high. Technical information: This is VmSize in proc/ */ status and VIRT in top.
Technical information: This is the URSS - Unique Resident Set Size, calculated as VmRSS - Shared, from / proc/ */ statm. This tends to underestimate the'true 'memory usage of a process (by not including i/ o backed memory pages), but is the best estimation that is fast to determine.
The CPU usage of a process and all of its threads.
Technical information: This is the Shared memory, called SHR in top. It is the number of pages that are backed by a file (see kernel Documentation/ filesystems/ proc. txt.)
Technical information: This is from / proc/ */ cmdline
Technical information: For each X11 window, the X11 property _NET_WM_PID is used to map the window to a PID. If a process' windows are not shown, then that application incorrectly is not setting _NET_WM_PID.
Technical information: This is the Process ID. A multi-threaded application is treated a single process, with all threads sharing the same PID. The CPU usage etc will be the total, accumulated, CPU usage of all the threads.
This column shows the IO statistics for each process. The tooltip provides the following information: Characters ReadThe number of bytes which this task has caused to be read from storage. This is simply the sum of bytes which this process passed to read() and pread(). It includes things like tty IO and it is unaffected by whether or not actual physical disk IO was required (the read might have been satisfied from pagecache). Characters WrittenThe number of bytes which this task has caused, or shall cause to be written to disk. Similar caveats apply here as with Characters Read. Read SyscallsThe number of read I/ O operations, i. e. syscalls like read() and pread(). Write SyscallsThe number of write I/ O operations, i. e. syscalls like write() and pwrite(). Actual Bytes ReadThe number of bytes which this process really did cause to be fetched from the storage layer. Done at the submit_bio() level, so it is accurate for block-backed filesystems. This may not give sensible values for NFS and CIFS filesystems. Actual Bytes WrittenAttempt to count the number of bytes which this process caused to be sent to the storage layer. This is done at page-dirtying time. The number in brackets shows the rate at which each value is changing, determined from taking the difference between the previous value and the new value, and dividing by the update interval. Technical information: This data is collected from / proc/ */ io and is documented further in Documentation/ accounting and Documentation/ filesystems/ proc. txt in the kernel source.
Login Name: %1
This user is not recognized for some reason.
%1
Login Name: %1 (uid: %2)
Room Number: %1
Work Phone: %1
Effective User: %1
Setuid User: %1
File System User: %1
Group: %1
Effective Group: %1
Setuid Group: %1
File System Group: %1
%1: %2, owned by user %3
%1 (gid: %2)
%1 (uid: %2)
%1/ s
This process is being debugged by %1 (%2)
Init is the parent of all other processes and cannot be killed.
KThreadd manages kernel threads. The children processes run in the kernel, controlling hard disk access, etc.
%1 Process ID: %2
%1 Process ID: %2 Parent: %3 Parent's ID: %4
%1 Process ID: %2 Parent's ID: %3
Command: %1
Running on: %1
This process was run with the following command: %1
Running on: %1
Nice level: %1 (%2)
Scheduler priority: %1
Scheduler: %1
I/ O Nice level: %1 (%2)
I/ O Class: %1
Process status: %1 %2User CPU usage: %3%System CPU usage: %4%
Number of children: %1 Total User CPU usage: %2% Total System CPU usage: %3% Total CPU usage: %4%
CPU time spent running as user: %1 seconds
CPU time spent running in kernel: %1 seconds
Nice level: %1 (%2)
Memory usage: %1 out of %2 (%3%)
Memory usage: %1
RSS Memory usage: %1 out of %2 (%3%)
RSS Memory usage: %1
Your system does not seem to have this information available to be read.
Shared library memory usage: %1 out of %2 (%3%)
Shared library memory usage: %1
Characters read: %1 (%2 KiB/ s) Characters written: %3 (%4 KiB/ s) Read syscalls: %5 (%6 s⁻ ¹) Write syscalls: %7 (%8 s ⁻ ¹) Actual bytes read: %9 (%10 KiB/ s) Actual bytes written: %11 (%12 KiB/ s)
Name
Username
PID
TTY
Niceness
CPU%
IO Read
IO Write
Virtual Size
Memory
Shared Mem
Command
Window Title
%1 K
%1 M
%1 G
%1%
Renice Process
No.
Could not find kdesu executable.
Could not find setscheduler executable. This should have been installed alongside system monitor.
You do not have the permission to renice the process and there was a problem trying to run as root.
You do not have the permission to set the I/ O priority and there was a problem trying to run as root.