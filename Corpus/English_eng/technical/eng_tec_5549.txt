# language_name_wals:	English
# language_name_glotto:	English
# ISO_6393:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Chapter 33.
Creating Variables
Next
Strings need slightly more effort.
As mentioned earlier, all strings that will be associated with Zend' s internal data structures need to be allocated using Zend's own memory-management functions.
Referencing of static strings or strings allocated with standard routines is not allowed.
To assign strings, you have to access the structure str in the zval.value To assign strings, you have to access the structure str in the zval.value container.
The corresponding type is IS_STRING:
zval *new_string; char *string_contents = "This is a new string variable"; MAKE_STD_ZVAL(new_string); new_string - type = IS_STRING; new_string - value.str.len = strlen(string_contents); new_string - value.str.val = estrdup(string_contents);
zval *new_string; char *string_contents = "This is a new string variable"; MAKE_STD_ZVAL(new_string); ZVAL_STRING(new_string, string_contents, 1);
If you want to truncate the string at a certain position or you already know its length, you can use ZVAL_STRINGL( zval, string, length, duplicate), which accepts an explicit string length to be set for the new string.
This macro is faster than ZVAL_STRING and also binary-safe.
To create empty strings, set the string length to 0 and use empty_string as contents:
new_string - type = IS_STRING; new_string - value.str.len = 0; new_string - value.str.val = empty_string;
MAKE_STD_ZVAL( new_string); ZVAL_EMPTY_STRING(new_string);
Prev
Home
Next
Doubles (Floats)
Up
Booleans