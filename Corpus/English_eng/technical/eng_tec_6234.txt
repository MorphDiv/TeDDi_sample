# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	KDE4
# source:	https://object.pouta.csc.fi/OPUS-KDE4/v2/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/KDE4.php
# copyright_long:	http://opus.nlpl.eu/KDE4.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Your names
Your emails
Profile Dumps
Target
Time
Path
Options
Target command:
Profiler options:
Option
Value
Trace
Jumps
Instructions
Events
Full Cache
Custom
Collect
At Startup
While In
Skip
PLT
Function
Dump Profile
Every BBs
On Entering
On Leaving
Zero Events
Separate
Threads
Recursions
Call Chain
Custom profiler options:
Run New Profile
Info
Dump reason:
Event summary:
Name
Sum
Miscellaneous:
Show
Compare
State
Update
Every [s]:
Counter
Dumps Done
Is Collecting
Executed
Basic Blocks
Calls
Ir
Distinct
ELF Objects
Functions
Contexts
Stack trace:
Sync.
#
Incl.
Called
Location
Start
Zero
Dump
Messages
Kill Run
Clear
Configuration
General
Truncated when more/ longer than:
Precision of percentage values:
Symbols in tooltips and context menus
Maximum number of items in lists:
Cost Item Colors
Automatic
Object:
Class:
File:
Annotations
Context lines in annotations:
Source Folders
Object / Related Source Base
Add...
Delete
& OK
& Cancel
& File
& View
& Layout
Sidebars
Main Toolbar
State Toolbar
Parts Overview
Top Cost Call Stack
The Top Cost Call Stack This is a purely fictional'most probable 'call stack. It is built up by starting with the current selected function and adds the callers/ callees with highest cost at the top and to bottom. The Cost and Calls columns show the cost used for all calls from the function in the line above.
Flat Profile
Profile Dumps This dockable shows in the top part the list of loadable profile dumps in all subdirectories of: current working directory of KCachegrind, i. e. where it was started from, and the default profile dump directory given in the configuration. The list is sorted according to the target command profiled in the corresponding dump. On selecting a profile dump, information for it is shown in the bottom area of the dockable: Options allows you to view the profiled command and profile options of this dump. By changing any item, a new (yet unexisting) profile template is created. Press Run Profile to start a profile run with these options in the background. Info gives detailed info on the selected dump like event cost summary and properties of the simulated cache. State is only available for current happening profiles runs. Press Update to see different counters of the run, and a stack trace of the current position in the program profiled. Check the Every option to let KCachegrind regularly poll these data. Check the Sync option to let the dockable activate the top function in the current loaded dump.
& Duplicate
Duplicate Current Layout Make a copy of the current layout.
& Remove
Remove Current Layout Delete current layout and make the previous active.
& Go to Next
Go to Next Layout
& Go to Previous
Go to Previous Layout
& Restore to Default
Restore Layouts to Default
& Save as Default
Save Layouts as Default
New Open new empty KCachegrind window.
& Add...
Add Profile Data This opens an additional profile data file in the current window.
& Reload
Reload Profile Data This loads any new created parts, too.
& Export Graph
Export Call Graph Generates a file with extension. dot for the tools of the GraphViz package.
& Force Dump
Force Dump This forces a dump for a Callgrind profile run in the current directory. This action is checked while KCachegrind looks for the dump. If the dump is finished, it automatically reloads the current trace. If this is the one from the running Callgrind, the new created trace part will be loaded, too. Force dump creates a file'callgrind. cmd ', and checks every second for its existence. A running Callgrind will detect this file, dump a trace part, and delete'callgrind. cmd'. The deletion is detected by KCachegrind, and it does a Reload. If there is no Callgrind running, press'Force Dump 'again to cancel the dump request. This deletes'callgrind. cmd' itself and stops polling for a new dump. Note: A Callgrind run only detects existence of'callgrind. cmd 'when actively running a few milliseconds, i. e. not sleeping. Tip: For a profiled GUI program, you can awake Callgrind e. g. by resizing a window of the program.
Open Profile Data This opens a profile data file, with possible multiple parts
Show/ Hide the Parts Overview Dockable
Call Stack
Show/ Hide the Call Stack Dockable
Function Profile
Show/ Hide the Function Profile Dockable
Show/ Hide the Profile Dumps Dockable
Relative
Show relative instead of absolute costs
Relative to Parent
Show percentage costs relative to parent
Show percentage costs relative to parent If this is switched off, percentage costs are always shown relative to the total cost of the profile part(s) that are currently browsed. By turning on this option, percentage cost of shown cost items will be relative to the parent cost item. Cost Type Parent Cost Function Cumulative Total Function Self Function Group (*) / Total Call Function Inclusive Source Line Function Inclusive (*) Only if function grouping is switched on (e. g. ELF object grouping).
Cycle Detection
Detect recursive cycles If this is switched off, the treemap drawing will show black areas when a recursive call is made instead of drawing the recursion ad infinitum. Note that the size of black areas often will be wrong, as inside recursive cycles the cost of calls cannot be determined; the error is small, however, for false cycles (see documentation). The correct handling for cycles is to detect them and collapse all functions of a cycle into an artificial function, which is done when this option is selected. Unfortunately, with GUI applications, this often will lead to huge false cycles, making the analysis impossible; therefore, there is the option to switch this off.
Go back in function selection history
Go forward in function selection history
Go Up Go to last selected caller of current function. If no caller was visited, use that with highest cost.
& Up
Primary Event Type
Select primary event type of costs
Secondary Event Type
Select secondary event type for cost e. g. shown in annotations
Grouping
Select how functions are grouped into higher level cost items
(No Grouping)
Split
Show two information panels
Split Horizontal
Change Split Orientation when main window is split.
cachegrind. out* callgrind. out*|Callgrind Profile Data *|All Files
Select Callgrind Profile Data
Could not open the file "%1". Check it exists and you have enough permissions to read it.
Add Callgrind Profile Data
(Hidden)
Hide
Show Absolute Cost
Show Relative Cost
Go Back
Go Forward
Go Up
Layout Count: %1
No profile data file loaded.
Total %1 Cost: %2
No event type selected
(No Stack)
(No next function)
(No previous function)
(No Function Up)
KCachegrind
KDE Frontend for Callgrind/ Cachegrind
(C) 2002 - 2007
Josef Weidendorfer
Author/ Maintainer
Show information of this trace
Source Files
C++ Classes
Function (no Grouping)
(always)
KCachegrind Configuration
The Maximum Number of List Items should be below 500. The previous set value (%1) will still be used.
Choose Source Folder
... that the What's this... help for every GUI widget in KCachegrind contains detailed usage information for this widget? It is highly recommend to read at least these help texts on first use. Request What's this... help by pressing Shift-F1 and clicking on the widget.
... that you can get profile information at instruction level with Calltree when you provide the option --dump-instr=yes? Use the Assembler View for the instruction annotations.
... that you can use Alt-Left/ Right keys of your keyboard to go back/ forward in the active object history?
... that you can navigate in the Callee/ Caller Map View using arrow keys? Use Left/ Right to change to siblings of the current item; use Up/ Down to go one nesting level up/ down. To select the current item, press Space, and to activate it, press Return.
... that you can navigate in the Call Graph View using arrow keys? Use Up/ Down to go one calling level up/ down, alternating between calls and functions. Use Left/ Right to change to siblings of a current selected call. To activate the current item, press Return.
... that you can rapidly locate a function by entering part of its name (case-insensitive) into the edit line of the toolbar and hit return?
... that you can assign custom colors to ELF objects/ C++ Classes/ Source Files for graph coloring in Settings- > Configure KCachegrind...?
... that you can see if debug info is available for a selected function by looking at the location label in the Info tab or the source listing header in the source tab? There must be the name of the source file (with extension). If KCachegrind still does not show the source, make sure that you have added the directory of the source file to the Source Directories list in the configuration.
... that you can configure whether KCachgrind should show absolute event counts or relative ones (percentage display)?
... that you can configure the maximum number of items for all function lists in KCachegrind? Limiting the number of items is done to get a fast reacting GUI. The last item in the list will show you the number of skipped functions, together with a cost condition for these skipped functions. To activate a function with small costs, search for it and select it in the flat profile. Selecting functions with small cost will temporarily add them to the flat profile list.
... that the Coverage tab - in contrast to the Call Lists tab - shows all functions that are calling the selected function (upper part) / are called by the selected function (bottom part), no matter how many function are between them on the stack? Examples: An entry in the upper list for function foo1() with a value of 50% with function bar() selected means that 50% of all the cost of function bar() happened while called from function foo1(). An entry in the bottom list for function foo2() with a value of 50% with function bar() selected means that 50% of all the cost of function bar() happened while calling foo2() from bar().
... that waiting for the tool tip inside of a tree map shows the list of names of the nested rectangles the mouse pointer is over? Items from this list can be selected by pressing the right mouse button.
... that you can constrain the cost counts shown to only a few parts of the whole trace by selecting these parts in the "Trace Selection" Dockable? To generate multiple parts in a profiling run with cachegrind, use e. g. option --cachedumps=xxx for parts of a length of xxx basic blocks (A basic block is a run of not-branching assembler statements inside of your program code).
Active call to '%1 '
Jump %1 of %2 times to 0x%3
Jump %1 times to 0x%2
(cycle)
Abstract Item
Cost Item
Part Source Line
Source Line
Part Line Call
Line Call
Part Jump
Jump
Part Instruction
Instruction
Part Instruction Jump
Instruction Jump
Part Instruction Call
Instruction Call
Part Call
Call
Part Function
Function Source File
Function Cycle
Part Class
Class
Part Source File
Source File
Part ELF Object
ELF Object
Profile Part
Program Trace
%1 from %2
(unknown)
(no caller)
%1 via %2
(no callee)
(not found)
Recalculating Function Cycles...
Cost
Profile Part Overview: Current is '%1 '
Deselect '%1 '
Select '%1 '
Select All Parts
Visible Parts
Hide Selected Parts
Unhide Hidden Parts
Go to '%1 '
Visualization
Partitioning Mode
Diagram Mode
Zoom Function
Show Direct Calls
Increment Shown Call Levels
Draw Names
Draw Costs
Ignore Proportions
Draw Frames
Allow Rotation
Hide Info
Show Info
(no trace loaded)
Jump %1 of %2 times to %3
Jump %1 times to %2
No description available
The Parts Overview A trace consists of multiple trace parts when there are several profile data files from one profile run. The Trace Part Overview dockable shows these, horizontally ordered in execution time; the rectangle sizes are proportional to the total cost spent in the parts. You can select one or several parts to constrain all costs shown to these parts only. The parts are further subdivided: there is a partitioning and an callee split mode: Partitioning: You see the partitioning into groups for a trace part, according to the group type selected. E. g. if ELF object groups are selected, you see colored rectangles for each used ELF object (shared library or executable), sized according to the cost spent therein. Callee: A rectangle showing the inclusive cost of the current selected function in the trace part is shown. This is split up into smaller rectangles to show the costs of its callees.
The Flat Profile The flat profile contains a group and a function selection list. The group list contains all groups where costs are spent in, depending on the chosen group type. The group list is hidden when group type'Function 'is selected. The function list contains the functions of the selected group (or all for'Function' group type), ordered by the costs spent therein. Functions with costs less than 1% are hidden on default.
Show Relative Costs
Show Absolute Costs
Skip Cycle Detection
Cost 2
Hex
Assembler
Source Position
Annotated Assembler The annotated assembler list shows the machine code instructions of the current selected function together with (self) cost spent while executing an instruction. If this is a call instruction, lines with details on the call happening are inserted into the source: the cost spent inside of the call, the number of calls happening, and the call destination. The disassembler output shown is generated with the'objdump 'utility from the'binutils' package. Select a line with call information to make the destination function of this call current.
Go to Address %1
Hex Code
There is no instruction info in the profile data file.
For the Valgrind Calltree Skin, rerun with option
--dump-instr=yes
To see (conditional) jumps, additionally specify
--trace-jump=yes
There is an error trying to execute the command
Check that you have installed'objdump '.
This utility can be found in the'binutils' package.
(No Assembler)
This happens because the code of
does not seem to match the profile data file.
Are you using an old profile data file or is the above mentioned
ELF object from an updated installation/ another machine?
There seems to be an error trying to execute the command
Check that the ELF object used in the command exists.
Call(s) from %1
Call(s) to %1
(unknown call)
Call Graph around active Function Depending on configuration, this view shows the call graph environment of the active function. Note: the shown cost is only the cost which is spent while the active function was actually running; i. e. the cost shown for main() - if it is visible - should be the same as the cost of the active function, as that is the part of inclusive cost of main() spent while the active function was running. For cycles, blue call arrows indicate that this is an artificial call added for correct drawing which actually never happened. If the graph is larger than the widget area, an overview panner is shown in one edge. There are similar visualization options to the Call Treemap; the selected function is highlighted.
Warning: a long lasting graph layouting is in progress. Reduce node/ edge limits for speedup.
Layouting stopped.
The call graph has %1 nodes and %2 edges.
No item activated for which to draw the call graph.
No call graph can be drawn for the active item.
No call graph is available because the following command cannot be run: '%1 '
Please check that'dot 'is installed (package GraphViz).
Error running the graph layouting tool.
There is no call graph available for function '%1 'because it has no cost of the selected event type.
Unlimited
None
max. 2
max. 5
max. 10
max. 15
No Minimum
50%
Same as Node
50% of Node
20% of Node
10% of Node
Top Left
Top Right
Bottom Left
Bottom Right
Top to Down
Left to Right
Circular
Stop Layouting
As PostScript
As Image...
Export Graph
Caller Depth
Callee Depth
Min. Node Cost
Min. Call Cost
Arrows for Skipped Calls
Inner-cycle Calls
Cluster Groups
Compact
Normal
Tall
Graph
Layout
Birds-eye View
Move to Top
Top
Move to Right
Right
Move to Bottom
Bottom
Move to Bottom Left
Move Area To
Hide This Tab
Hide Area
Show Hidden On
(No profile data file loaded)
Types
Callers
All Callers
Caller Map
Source Code
Parts
Call Graph
All Callees
Callee Map
Assembly Code
Information Tabs This widget shows information for the current selected function in different tabs: The Costs tab shows a list of available event types and the inclusive and self costs regarding to these types. The Parts tab shows a list of trace parts if the trace consists of more than one part (otherwise, this tab is hided). The cost of the selected function spent in the different parts together with the calls happening is shown. The Call Lists tab shows direct callers and callees of the function in more detail. The Coverage tab shows the same is the Call Lists tab, but not only direct callers and callees but also indirect ones. The Call Graph tab shows a graphical visualization of the calls done by this function. The Source tab presents annotated source code if debugging information and the source file is available. The Assembler tab presents annotated assembler code if trace information on instruction level is available. For more information, see the What's this help of the corresponding tab widget
(No Data loaded)
(No function selected)
Source (unknown)
Annotated Source The annotated source list shows the source lines of the current selected function together with (self) cost spent while executing the code of this source line. If there was a call in a source line, lines with details on the call happening are inserted into the source: the cost spent inside of the call, the number of calls happening, and the call destination. Select a inserted call information line to make the destination function current.
Go to Line %1
(No Source)
There is no cost of current selected type associated
with any source line of this function in file
Thus, no annotated source can be shown.
Source ('%1 ')
--- Inlined from '%1 '---
--- Inlined from unknown source ---
There is no source available for the following function:
This is because no debug information is present.
Recompile source and redo the profile run.
The function is located in this ELF object:
This is because its source file cannot be found:
Add the folder of this file to the source folder list.
The list can be found in the configuration dialog.
(Thread %1)
(none)
Unknown Type
Show All Items
No Grouping
Distance
Caller
Self
Calling
Callee
List of all Callers This list shows all functions calling the current selected one, either directly or with several functions in-between on the stack; the number of functions in-between plus one is called the Distance (e. g. for function A, B, C there exists a call from A to C when A calls B and B calls C, i. e. A = > B = > C. The distance here is 2). Absolute cost shown is the cost spent in the selected function while a listed function is active; relative cost is the percentage of all cost spent in the selected function while the listed one is active. The cost graphic shows logarithmic percentage with a different color for each distance. As there can be many calls from the same function, the distance column sometimes shows the range of distances for all calls happening; then, in parentheses, there is the medium distance, i. e. the distance where most of the call costs happened. Selecting a function makes it the current selected one of this information panel. If there are two panels (Split mode), the function of the other panel is changed instead.
List of all Callees This list shows all functions called by the current selected one, either directly or with several function in-between on the stack; the number of function in-between plus one is called the Distance (e. g. for function A, B, C there exists a call from A to C when A calls B and B calls C, i. e. A = > B = > C. The distance here is 2). Absolute cost shown is the cost spent in the listed function while the selected is active; relative cost is the percentage of all cost spent in the listed function while the selected one is active. The cost graphic always shows logarithmic percentage with a different color for each distance. As there can be many calls to the same function, the distance column sometimes shows the range of distances for all calls happening; then, in parentheses, there is the medium distance, i. e. the distance where most of the call costs happened. Selecting a function makes it the current selected one of this information panel. If there are two panels (Split mode), the function of the other panel is changed instead.
Instruction Fetch
Data Read Access
Data Write Access
L1 Instr. Fetch Miss
L1 Data Read Miss
L1 Data Write Miss
L2 Instr. Fetch Miss
L2 Data Read Miss
L2 Data Write Miss
Samples
System Time
User Time
L1 Miss Sum
L2 Miss Sum
Cycle Estimation
& Search:
Group
(no trace parts)
Stack Selection
Text %1
Columns
Rows
Always Best
Best
Alternate (V)
Alternate (H)
Horizontal
Vertical
Nesting
Border
Correct Borders Only
Width %1
Shading
Visible
Take Space From Children
Top Center
Bottom Center
No %1 Limit
No Area Limit
Area of '%1 '(%2)
Double Area Limit (to %1)
Halve Area Limit (to %1)
No Depth Limit
Depth of '%1 '(%2)
Depth %1
Decrement (to %1)
Increment (to %1)
Caller Map This graph shows the nested hierarchy of all callers of the current activated function. Each colored rectangle represents a function; its size tries to be proportional to the cost spent therein while the active function is running (however, there are drawing constrains).
Call Map This graph shows the nested hierarchy of all callees of the current activated function. Each colored rectangle represents a function; its size tries to be proportional to the cost spent therein while the active function is running (however, there are drawing constrains).
Appearance options can be found in the in the context menu. To get exact size proportions, choose'Hide incorrect borders'. As this mode can be very time consuming, you may want to limit the maximum drawn nesting level before. 'Best 'determinates the split direction for children from the aspect ratio of the parent. 'Always Best' decides on remaining space for each sibling. 'Ignore Proportions' takes space for function name drawing before drawing children. Note that size proportions can get heavily wrong. This is a TreeMap widget. Keyboard navigation is available with the left/ right arrow keys for traversing siblings, and up/ down arrow keys to go a nesting level up/ down. Return activates the current item.
Go To
Stop at Depth
Depth 10
Depth 15
Depth 20
Decrement Depth (to %1)
Increment Depth (to %1)
Stop at Function
No Function Limit
Stop at Area
50 Pixels
100 Pixels
200 Pixels
500 Pixels
Half Area Limit (to %1)
Split Direction
Skip Incorrect Borders
Border Width
Border 0
Border 1
Border 2
Border 3
Draw Symbol Names
Draw Cost
Draw Location
Draw Calls
Call Map: Current is '%1 '
(no function)
(no call)
Event Type
Short
Formula
Cost Types List This list shows all cost types available and what the self/ inclusive cost of the current selected function is for that cost type. By choosing a cost type from the list, you change the cost type of costs shown all over KCachegrind to be the selected one.
Set Secondary Event Type
Remove Secondary Event Type
Edit Long Name
Edit Short Name
Edit Formula
Remove
New Cost Type...
New%1
New Cost Type %1
Import filter for Cachegrind/ Callgrind generated profile data files
Loading %1
Count
List of direct Callers This list shows all functions calling the current selected one directly, together with a call count and the cost spent in the current selected function while being called from the function from the list. An icon instead of an inclusive cost specifies that this is a call inside of a recursive cycle. An inclusive cost makes no sense here. Selecting a function makes it the current selected one of this information panel. If there are two panels (Split mode), the function of the other panel is changed instead.
List of direct Callees This list shows all functions called by the current selected one directly, together with a call count and the cost spent in this function while being called from the selected function. Selecting a function makes it the current selected one of this information panel. If there are two panels (Split mode), the function of the other panel is changed instead.
Profile Part %1
(no trace)
(no part)
Comment
Trace Part List This list shows all trace parts of the loaded trace. For each part, the self/ inclusive cost of the current selected function, spent in the part, is shown; percentage costs are always relative to the total cost of the part (not to the whole trace as in the Trace Part Overview). Also shown are the calls happening to/ from the current function inside of the trace part. By choosing one or more trace parts from the list, the costs shown all over KCachegrind will only be the ones spent in the selected part(s). If no list selection is shown, in fact all trace parts are selected implicitly. This is a multi-selection list. You can select ranges by dragging the mouse or use SHIFT/ CTRL modifiers. Selection/ Deselection of trace parts can also be done by using the Trace Part Overview Dockable. This one also supports multiple selection. Note that the list is hidden if only one trace part is loaded.
Hide '%1 '
Hide Selected
Show All
Deselect
Select
Go to %1
Run < exec > under cachegrind
Source