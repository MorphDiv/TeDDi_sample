# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Next
(PHP 3 = 3.0.17, PHP 4 = 4.0.1)
This function returns the Levenshtein-Distance between the two argument strings or -1, if one of the argument strings is longer than the limit of 255 characters (255 should be more than enough for name or dictionary comparison, and nobody serious would be doing genetic analysis with PHP).
The Levenshtein distance is defined as the minimal number of characters you have to replace, insert or delete to transform str1 into str2.
The complexity of the algorithm is O( m*n), where n and m are the length of str1 and str2 (rather good when compared to similar_text(), which is O(max(n,m)**3), but still expensive).
In its simplest form the function will take only the two strings as parameter and will calculate just the number of insert, replace and delete operations needed to transform str1 into str2.
A second variant will take three additional parameters that define the cost of insert, replace and delete operations.
This is more general and adaptive than variant one, but not as efficient.
The third variant (which is not implemented yet) will be the most general and adaptive, but also the slowest alternative.
It will call a user-supplied function that will determine the cost for every possible operation.
The user-supplied function will be called with the following arguments:
operation to apply: 'I', 'R' or'D '
actual character in string 1
actual character in string 2
position in string 1
position in string 2
remaining characters in string 1
remaining characters in string 2
The user-supplied function approach offers the possibility to take into account the relevance of and / or difference between certain symbols (characters) or even the context those symbols appear in to determine the cost of insert, replace and delete operations, but at the cost of losing all optimizations done regarding cpu register utilization and cache misses that have been worked into the other two variants.
See also soundex(), similar_text(), and metaphone().
Prev
Home
Next
join
Up
localeconv