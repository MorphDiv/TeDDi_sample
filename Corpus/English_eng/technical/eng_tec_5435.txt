# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Chapter 5.
Security
Next
With PHP security, there are two sides to error reporting.
One is beneficial to increasing security, the other is detrimental.
A standard attack tactic involves profiling a system by feeding it improper data, and checking for the kinds, and contexts, of the errors which are returned.
This allows the system cracker to probe for information about the server, to determine possible weaknesses.
For example, if an attacker had gleaned information about a page based on a prior form submission, they may attempt to override variables, or modify them:
Example 5-11.
Attacking Variables with a custom HTML page
form method=" post "action="attacktarget?username=badfoo password=badfoo" input type="hidden "name="username" value="badfoo "input type="hidden" name="password "value="badfoo" / form
The PHP errors which are normally returned can be quite helpful to a developer who is trying to debug a script, indicating such things as the function or file that failed, the PHP file it failed in, and the line number which the failure occured in.
This is all information that can be exploited.
It is not uncommon for a php developer to use show_source(), highlight_string(), or highlight_file() as a debugging measure, but in a live site, this can expose hidden variables, unchecked syntax, and other dangerous information.
Especially dangerous is running code from known sources with built-in debugging handlers, or using common debugging techniques.
If the attacker can determine what general technique you are using, they may try to brute-force a page, by sending various common debugging strings:
Example 5-12.
Exploiting common debugging variables
form method=" post "action="attacktarget?errors=Y amp;showerrors=1" debug=1 "input type="hidden" name="errors "value="Y" input type="hidden "name="showerrors" value="1 "input type="hidden" name="debug "value="1" / form
Regardless of the method of error handling, the ability to probe a system for errors leads to providing an attacker with more information.
For example, the very style of a generic PHP error indicates a system is running PHP.
If the attacker was looking at an .html page, and wanted to probe for the back-end (to look for known weaknesses in the system), by feeding it the wrong data they may be able to determine that a system was built with PHP.
A function error can indicate whether a system may be running a specific database engine, or give clues as to how a web page or programmed or designed.
This allows for deeper investigation into open database ports, or to look for specific bugs or weaknesses in a web page.
By feeding different pieces of bad data, for example, an attacker can determine the order of authentication in a script, (from the line number errors) as well as probe for exploits that may be exploited in different locations in the script.
A filesystem or general PHP error can indicate what permissions the webserver has, as well as the structure and organization of files on the web server.
Developer written error code can aggravate this problem, leading to easy exploitation of formerly "hidden" information.
There are three major solutions to this issue.
The first is to scrutinize all functions, and attempt to compensate for the bulk of the errors.
The second is to disable error reporting entirely on the running code.
The third is to use PHP 's custom error handling functions to create your own error handler.
Depending on your security policy, you may find all three to be applicable to your situation.
One way of catching this issue ahead of time is to make use of PHP' s own error_reporting(), to help you secure your code and find variable usage that may be dangerous.
By testing your code, prior to deployment, with E_ALL, you can quickly find areas where your variables may be open to poisoning or modification in other ways.
Once you are ready for deployment, by using E_NONE, you insulate your code from probing.
Example 5-13.
Finding dangerous variables with E_ALL
?php if ($username) {/ / Not initialized or checked before usage $good_login = 1;} if ($good_login == 1) {/ / If above test fails, not initialized or checked before usage fpassthru (" / highly / sensitive / data / index.html");}?
Prev
Home
Next
Database Security
Up
Using Register Globals