# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	OpenOffice
# source:	https://object.pouta.csc.fi/OPUS-OpenOffice/v3/raw/en_GB.zip
# copyright_short:	http://opus.nlpl.eu/OpenOffice.php
# copyright_long:	http://opus.nlpl.eu/OpenOffice.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Using Variables
/text/sbasic/shared/01020100.xhp
names of variables
variables; using
types of variables
declaring variables
values;of variables
constants
arrays;declaring
defining;constants
Using Variables
The following describes the basic use of variables in $[officename] Basic.
Naming Conventions for Variable Identifiers
must
be a letter A-Z or a-z.
Numbers can also be used in a variable name, but punctuation symbols and special characters are not permitted, with exception of the underscore character ( &quot; _ &quot; ).
In $[officename] Basic variable identifiers are not case-sensitive.
Variable names may contain spaces but must be enclosed in square brackets if they do.
Examples for variable identifiers:
MyNumber=5
Correct
MyNumber5=15
Correct
MyNumber_5=20
Correct
My Number=20
Not valid, variable with space must be enclosed in square brackets
[My Number]=12
Correct
DéjàVu=25
Not valid, special characters are not allowed
5MyNumber=12
Not valid, variable may not begin with a number
Number,Mine=12
Not valid, punctuation marks are not allowed
Declaring Variables
Dim
statement.
You can declare more than one variable at a time by separating the names with a comma.
To define the variable type, use either a type-declaration sign after the name, or the appropriate key word.
Examples for variable declarations:
DIM a$
Declares the variable &quot; a &quot; as a String
DIM a As String
Declares the variable &quot; a &quot; as a String
DIM a$, b As Integer
Declares one variable as a String and one as an Integer
DIM c As Boolean
Declares c as a Boolean variable that can be TRUE or FALSE
It is very important when declaring variables that you use the type-declaration character each time, even if it was used in the declaration instead of a keyword.
Thus the following statements are invalid:
DIM a$
Declares &quot; a &quot; as a String
a= &quot; TestString &quot;
Type-declaration missing: &quot; a$= &quot;
Once you have declared a variable as a certain type, you cannot declare the variable under the same name again as a different type!
Forcing Variable Declarations
To force declaration of variables, use the following command:
OPTION EXPLICIT
Option Explicit
statement must be the first line in the module, before the first SUB.
Generally, only arrays need to be declared explicitly.
All other variables are declared according to the type-declaration character, or - if omitted - as the default type
Single
.
Variable Types
$[officename] Basic supports four variable classes:
Numeric
variables can contain number values.
Some variables are used to store large or small numbers, and others are used for floating-point or fractional numbers.
String
variables contain character strings.
Boolean
variables contain either the TRUE or the FALSE value.
Object
variables can store objects of various types, like tables and documents within a document.
Integer Variables
Integer variables range from -32768 to 32767.
If you assign a floating-point value to an integer variable, the decimal places are rounded to the next integer.
Integer variables are rapidly calculated in procedures and are suitable for counter variables in loops.
An integer variable only requires two bytes of memory. &quot; % &quot; is the type-declaration character.
Dim Variable%
Dim Variable As Integer
Long Integer Variables
Long integer variables range from -2147483648 to 2147483647.
If you assign a floating-point value to a long integer variable, the decimal places are rounded to the next integer.
Long integer variables are rapidly calculated in procedures and are suitable for counter variables in loops for large values.
A long integer variable requires four bytes of memory. &quot; & &quot; is the type-declaration character.
Dim Variable &
Dim Variable as Long
Decimal Variables
Decimal variables can take positive or negative numbers or zero.
Accuracy is up to 29 digits.
i85284
You can use plus (+) or minus (-) signs as prefixes for decimal numbers (with or without spaces).
If a decimal number is assigned to an integer variable, %PRODUCTNAME Basic rounds the figure up or down.
Single Variables
Single variables can take positive or negative values ranging from 3.402823 x 10E+38 to 1.401298 x 10E-45.
Single variables are floating-point variables, in which the decimal precision decreases as the non-decimal part of the number increases.
Single variables are suitable for mathematical calculations of average precision.
Calculations require more time than for Integer variables, but are faster than calculations with Double variables.
A Single variable requires 4 bytes of memory.
The type-declaration character is &quot; ! &quot; .
Dim Variable!
Dim Variable as Single
Double Variables
Double variables can take positive or negative values ranging from 1.79769313486232 x 10E+308 to 4.94065645841247 x 10E-324.
Double variables are floating-point variables, in which the decimal precision decreases as the non-decimal part of the number increases.
Double variables are suitable for precise calculations.
Calculations require more time than for Single variables.
A Double variable requires 8 bytes of memory.
The type-declaration character is &quot; # &quot; .
Dim Variable#
Dim Variable As Double
Currency Variables
Currency variables are internally stored as 64-bit numbers (8 Bytes) and displayed as a fixed-decimal number with 15 non-decimal and 4 decimal places.
The values range from -922337203685477.5808 to +922337203685477.5807.
Currency variables are used to calculate currency values with a high precision.
The type-declaration character is &quot; @ &quot; .
Dim Variable@
Dim Variable As Currency
String Variables
String variables can hold character strings with up to 65,535 characters.
Each character is stored as the corresponding Unicode value.
String variables are suitable for word processing within programs and for temporary storage of any non-printable character up to a maximum length of 64 Kbytes.
The memory required for storing string variables depends on the number of characters in the variable.
The type-declaration character is &quot; $ &quot; .
Dim Variable$
Dim Variable As String
Boolean Variables
Boolean variables store only one of two values:
TRUE or FALSE.
A number 0 evaluates to FALSE, every other value evaluates to TRUE.
Dim Variable As Boolean
Date Variables
Dateserial
,
Datevalue
,
Timeserial
or
Timevalue
are automatically converted to the internal format.
Date-variables are converted to normal numbers using the
Day
,
Month
,
Year
or the
Hour
,
Minute
,
Second
function.
The internal format enables a comparison of date/time values by calculating the difference between two numbers.
These variables can only be declared with the key word
Date
.
Dim Variable As Date
Initial Variable Values
As soon as the variable has been declared, it is automatically set to the &quot; Null &quot; value.
Note the following conventions:
Numeric
variables are automatically assigned the value &quot; 0 &quot; as soon as they are declared.
Date variables
are assigned the value 0 internally; equivalent to converting the value to &quot; 0 &quot; with the
Day
,
Month
,
Year
or the
Hour
,
Minute
,
Second
function.
String variables
are assigned an empty-string ( &quot; &quot; ) when they are declared.
Arrays
$[officename] Basic knows one- or multi-dimensional arrays, defined by a specified variable type.
Arrays are suitable for editing lists and tables in programs.
Individual elements of an array can be addressed through a numerical index.
must
be declared with the
Dim
statement.
There are several ways to define the index range of an array:
DIM text$(20)
21 elements numbered from 0 to 20
DIM text$(5,4)
30 elements (a matrix of 6 x 5 elements)
DIM text$(5 to 25)
21 elements numbered from 5 to 25
DIM text$(-15 to 5)
21 elements (including 0), numbered from -15 to 5
The index range can include positive as well as negative numbers.
Constants
Constants have a fixed value.
They are only defined once in the program and cannot be redefined later:
CONST ConstName=Expression