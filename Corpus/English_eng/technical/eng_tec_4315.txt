# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
The pcntl_fork() function creates a child process that differs from the parent process only in it's PID and PPID.
Please see your system' s fork(2) man page for specific details as to how fork works on your system.
On success, the PID of the child process is returned in the parent' s thread of execution, and a 0 is returned in the child's thread of execution.
On failure, a -1 will be returned in the parent 's context, no child process will be created, and a PHP error is raised.
Example 1. pcntl_fork() Example
?php $pid = pcntl_fork(); if ($pid == -1) {die("could not fork");} else if ($pid) {/ / we are the parent} else {/ / we are the child}?
See also pcntl_waitpid() and pcntl_signal().
Prev
Home
Next
pcntl_exec
Up
pcntl_signal