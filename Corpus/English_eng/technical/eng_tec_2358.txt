# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
array_intersect_assoc() returns an array containing all the values of array1 that are present in all the arguments.
Note that the keys are used in the comparison unlike in array_intersect().
Example 1. array_intersect_assoc() example
?php $array1 = array ("a "= "green", "b" = "brown", "c "= "blue", "red"); $array2 = array ("a" = "green", "yellow", "red"); $result_array = array_intersect_assoc ($array1, $array2); / * $result_array will look like:
Array ([a] = green) * /?
In our example you see that only the pair "a" = "green "is present in both arrays and thus is returned.
The value "red" is not returned because in $array1 it's key is 2 while the key of "red "in $array2 it is 1.
The two values from the key = value pairs are considered equal only if (string) $elem1 === (string) $elem2.
In otherwords a strict type check is executed so the string representation must be the same.
See also array_intersect(), array_diff() and array_diff_assoc().
Prev
Home
Next
array_flip
Up
array_intersect