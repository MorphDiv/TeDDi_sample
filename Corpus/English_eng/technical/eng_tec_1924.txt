# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	OpenOffice
# source:	https://object.pouta.csc.fi/OPUS-OpenOffice/v3/raw/en_GB.zip
# copyright_short:	http://opus.nlpl.eu/OpenOffice.php
# copyright_long:	http://opus.nlpl.eu/OpenOffice.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

CreateUnoListener Function [Run-time]
/text/sbasic/shared/03132000.xhp
Sun Microsystems, Inc.
converted from old format - fpe dedr: fixed #i31078#
CreateUnoListener function
CreateUnoListener Function [Run-time]
Creates a Listener instance.
Many Uno interfaces let you register listeners on a special listener interface.
This allows you to listen for specific events and call up the appropriate listener method.
The CreateUnoListener function waits for the called listener interface and then passes the interface an object that the interface supports.
This object is then passed to the method to register the listener.
Syntax:
oListener = CreateUnoListener( Prefixname, ListenerInterfaceName )
Example:
The following example is based on a Basic library object.
Dim oListener
oListener = CreateUnoListener( &quot; ContListener_ &quot; , &quot; com.sun.star.container.XContainerListener &quot; )
The CreateUnoListener method requires two parameters.
The first is a prefix and is explained in detail below.
The second parameter is the fully qualified name of the Listener interface that you want to use.
The Listener must then be added to the Broadcaster Object.
This is done by calling the appropriate method for adding a Listener.
These methods always follow the pattern &quot; addFooListener &quot; , where &quot; Foo &quot; is the Listener Interface Type, without the 'X'.
In this example, the addContainerListener method is called to register the XContainerListener:
Dim oLib
oLib = BasicLibraries.Library1 ' Library1 must exist!
oLib.addContainerListener( oListener ) ' Register the listener
The Listener is now registered.
When an event occurs, the corresponding Listener calls the appropriate method from the com.sun.star.container.XContainerListener Interface.
The prefix calls registered Listeners from Basic-subroutines.
The Basic run-time system searches for Basic-subroutines or functions that have the name &quot; PrefixListenerMethode &quot; and calls them when found.
Otherwise, a run-time error occurs.
In this example, the Listener-Interface uses the following methods:
disposing:
Listener base interface (com.sun.star.lang.XEventListener): base interface for all Listener Interfaces
elementInserted:
Method of the com.sun.star.container.XContainerListener interface
elementRemoved:
Method of the com.sun.star.container.XContainerListener interface
elementReplaced:
Method of the com.sun.star.container.XContainerListener interface
In this example, the prefix is ContListener_.
The following subroutines must therefore be implemented in Basic:
ContListener_disposing
ContListener_elementInserted
ContListener_elementRemoved
ContListener_elementReplaced
An event structure type that contains information about an event exists for every Listener type.
When a Listener method is called, an instance of this event is passed to the method as a parameter.
Basic Listener methods can also call these event objects, so long as the appropriate parameter is passed in the Sub declaration.
For example:
Sub ContListener_disposing( oEvent )
MsgBox &quot; disposing &quot;
MsgBox oEvent.Dbg_Properties
End Sub
Sub ContListener_elementInserted( oEvent )
MsgBox &quot; elementInserted &quot;
MsgBox oEvent.Dbg_Properties
End Sub
Sub ContListener_elementRemoved( oEvent )
MsgBox &quot; elementRemoved &quot;
MsgBox oEvent.Dbg_Properties
End Sub
Sub ContListener_elementReplaced( oEvent )
MsgBox &quot; elementReplaced &quot;
MsgBox oEvent.Dbg_Properties
End Sub
You do not need to include the parameter of an event object if the object is not used:
' Minimal implementation of Sub disposing
Sub ContListener_disposing
End Sub
always
be implemented to avoid Basic run-time errors.