# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	Ubuntu
# source:	https://object.pouta.csc.fi/OPUS-Ubuntu/v14.10/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/Ubuntu.php
# copyright_long:	http://opus.nlpl.eu/Ubuntu.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

usage:
None of the providers had a whitelist named '{}'
Environment variables for scripts and jobs
Welcome text to display prior to test selection/execution
Name of the default provider to use
parsed early namespace: %s
parsed full namespace: %s
show program's version number and exit
logging and debugging
be more verbose (same as --log-level=INFO)
enable DEBUG messages on the root logger
display DEBUG messages in the console
LOGGER
enable DEBUG messages on the specified logger (can be used multiple times)
jump into pdb (python debugger) when a command crashes
crash on SIGINT/KeyboardInterrupt, useful with --pdb
too few arguments
caught SystemExit, exiting
caught %r, deciding on what to do next
action for exception %r is %s
Executable %r invoked with %r has crashed
caught runaway exception: %r
starting debugger...
Unable to find any of the executables {}
provider list and development
which providers to load
[Desired Job List]
[Run List]
[Running Local Jobs]
Problem list
[General Statistics]
Known jobs: {}
Selected jobs: {}
[Dependency Report]
Selected jobs have no dependency problems
[Interactivity Report]
automatic
interactive
unknown
[Estimated Duration Report]
Estimated test duration:
automated tests: {}
cannot estimate
manual tests: {}
total: {}
[Validation Report]
Job defined in {}
No problems found
[Requirement Report]
analyze how selected jobs would be executed
run all selected local jobs, required to see true data
do not run local jobs
print general job statistics
print dependency report
print interactivity report
print estimated duration report
print validation report
print requirement report
when coupled with -v, only problematic jobs will be listed
print desired job list
print run list
Configuration files:
- {0} (not present)
Variables:
Sections:
Problems:
- variable {0}: {1}
No validation problems found
check and display plainbox configuration
Using whitelist %r obtained from provider %r
Unable to load whitelist %r: %s
Incorrect pattern %r: %s
job definition options
PATTERN
include jobs matching the given regular expression
exclude jobs matching the given regular expression
WHITELIST
load whitelist containing run patterns
crashing as requested
crash the application
raise an exception
hang the application with a busy loop
development commands
children
list and describe various objects
show object attributes
list objects from the specified group
a debug message
a info message
a warning message
an error message
a critical message
log messages at various levels
Unable to decode input stream, must be valid UTF-8
The following parsers are available:
parse stdin with the specified parser
This command can be used to invoke any of the parsers exposed
 to the `plainbox.parsers` entry point, parse standard input and
 produce a JSON dump of the resulting data structure on stdout.

 Keep in mind that most parsers were designed with the 'C' locale in
 mind. You may have to override the environment variable LANG to
 "C".
Example:
PARSER-NAME
Name of the parser to use
?
Available output formats: {}
Each format may support a different set of options
Available transports: {}
Do you want to resume the previous session?
What do you want to do with that job?
skip
fail
run
Previous session run tried to execute: {}
Skipped after resuming execution
Failed after resuming execution
[ Analyzing Jobs ]
The job database you are currently using is broken
At least two jobs contend for the id {0}
First job defined in: {0}
Second job defined in: {0}
[ Authentication ]
[ Results ]
Saving results to {}
Select an outcome or an action:
comments
pass
test
Allowed answers are: {}
Please enter your comments:
[ Warning ]
There were some problems with the selected jobs
Problematic jobs will not be considered
Estimated duration is {:.2f} for automated jobs.
Estimated duration cannot be determined for automated jobs.
Estimated duration is {:.2f} for manual jobs.
Estimated duration cannot be determined for manual jobs.
[ Running All Jobs ]
Job id: %s
Plugin: %s
Direct dependencies: %s
Resource dependencies: %s
Resource program: %r
Command: %r
Can start: %s
Readiness: %s
Running... (output in {}.*)
Outcome: {}
Comments: {}
run a test job
user interface options
skip tests that require interactivity
don't really run most jobs
output options
FORMAT
save test results in the specified FORMAT (pass ? for a list of choices)
OPTIONS
comma-separated list of options for the export mechanism (pass ? for a list of choices)
FILE
save test results to the specified FILE (or to stdout if FILE is -)
TRANSPORT
use TRANSPORT to send results somewhere (pass ? for a list of choices)
WHERE
where to send data using the selected transport
comma-separated list of key-value options (k=v) to be passed to the transport
There is no job called {!a}
See `plainbox special --list-jobs` for a list of choices
Selected job does not have a command
Leftover file detected: {!a}:
job {} returned {}
command:
run a command from a job
JOB-ID
Id of the job to run
run unit and integration tests
run integration test suite (this verifies checkbox jobs)
run unit tests (this only verifies plainbox core)
abort the test on first failure
run tests quietly
run tests with normal verbosity (default)
run tests verbosely, printing each test case name
special/internal commands
list jobs instead of running them
list jobs with cheksums instead of running them
list all unique resource expressions
print a graph of jobs instead of running them
show resource relationships (for --dot)
refusing to overwrite {!a}
create a new provider (directory)

 Creates a new provider from a built-in skeleton.

 @EPILOG@

 The name of the provider must follow the pattern ``YYYY.example.org:name``
 where ``YYYY`` is a four-digit year when the author of the provider owned
 the domain (here, ``example.org``) and ``name`` is arbitrary identifier
 that is managed by the owner of that domain. The identifier should be
 constrained to ASCII, digits and the dash character.

 This naming scheme allows anyone that ever owned a domain name to come up
 with non-clashing provider identifiers. Those identifiers are going to be
 used in fully qualified names of various objects.

 This command creates a new skeleton test provider for PlainBox. The
 generated content should be edited to fit a particular purpose.
name
provider name, eg: YYYY.example.org:some-name
Storing resource record %r: %s
Local job %s produced job %r that collides with an existing job %s (from %s), the new job was discarded
processing output from a job: %r
local script %s returned invalid RFC822 data: %s
Adding executable %s to nest %s
job[%s] executing %r with env %r
Symlink nest for executables: %s
dependency cycle detected: {}
missing dependency: {!r} ({})
duplicate job id: {!r}
Starting solve
Done solving
Visiting job %s (color %s)
Visiting dependency: %r
Appending %r to solution
Unable to load %s: %s
Unable to import %s: %s
Unable to load resource %s, not inlining
Resource of type %s unknown
Unsupported option: {}
Platform Name
BIOS
Processors
Chipset
Memory
Video (on board)
Video (add-on)
Video memory
Audio
NIC
Wireless
Bluetooth
Packages Installed
Name
Version
Failures summary
Success Rate: {:.2f}% ({}/{})
Failure Rate: {:.2f}% ({}/{})
Skip Rate: {:.2f}% ({}/{})
Fail
Skip
Pass
Summary
Test Descriptions
PASS
FAIL
not supported
Tests Performed
Result
I/O Log
Description
System Info
Test Results
Log Files
System Testing Report
Problem with field {}: {}
Incorrect value of 'estimated_duration' in job %s read from %s
record.origin must be a JobOutputTextSource
record.origin.source.job must be this job
Enabled %r on root logger
Enabled debugging on logger %r
Cannot parse input
StubBox (dummy data for development)
expression {!r} evaluated to a non-true result
expression {!r} needs unavailable resource {!r}
this kind of python code is not allowed: {}
expression did not reference any resources
expression referenced multiple resources
Exception in requirement expression %r (with %s=%r): %r
Expensive DiskJobResult.io_log property access from %s:%d
Encoded %r into string %r
io log generated %r
Running %r
This type of job is not supported
bad job plugin value
Job skipped in dry-run mode
job[%s] extcmd delegate: %r
job[%s] starting command: %s
job[%s] command return code: %r
No exec controller supports job {}
Selected execution controller %s (score %d) for job %r
unset
unsupported kind
Loading configuration from %s
expected a boolean
expected an integer
expected a floating point number
expected a string
does not match pattern: {!r}
must be one of {}
must be set to something
cannot be empty
Cannot find job with checksum {}
Syntax error in job generated from %s: %s
return immediately, only useful when used with pkexec(1)
CHECKSUM
run a job with this checksum
target job specification
NAME=VALUE
environment passed to the target job
generator job specification
also run a job with this checksum (assuming it is a local job)
environment passed to the generator job
Unable to prepare plugin %s: %s
Unable to import %s
Unable to load %r: %s
Cannot load whitelist {!r}: {}
Loading jobs definitions from %r...
Cannot load job definitions from {!r}: {}
Cannot define job from record {!r}: {}
Problem in job definition, field {}: {}
Loaded %r
must look like RFC3720 IQN
must be a sequence of digits separated by dots
no such directory
cannot be relative
Base directory with provider data
Name of the provider
Version of the provider
Description of the provider
Name of the gettext domain for translations
Pathname of the directory with job definitions
Pathname of the directory with whitelists definitions
Pathname of the directory with provider data
Pathname of the directory with provider executables
Pathname of the directory with locale data
Problem in provider definition, field {!a}: {}
???
Committed key/value %r=%r
Looking at line %d:%r
yielding record: %r
Unexpected multi-line value
Job has a duplicate key {!r} with old value {!r} and new value {!r}
Unexpected non-empty line: {!r}
unsupported value for cause
related_job must not be None when cause is {}
related_expression must not be None when cause is {}
undesired
required dependency {!r} did not run yet
required dependency {!r} has failed
resource expression {!r} could not be evaluated because the resource it depends on did not run yet
resource expression {!r} evaluates to false
job cannot be started: {}
.manager accessed
Session not ready, did you call open()?
_commit_resume() finished
Created SessionManager with state:%r and storage:%r
Cannot decompress session data
Cannot decode session text
Cannot interpret session JSON
Resuming from json... (see below)
Unsupported version {}
Constructed new session for resume %r
Invoking early callback %r
Using different session for resume: %r
Starting to restore jobs and results to %r...
Starting to restore metadata...
Starting to restore desired job list...
Starting to restore job list...
Resume complete!
Unknown jobs remaining: {}
Definition of job {!r} has changed
calling update_job_result(%r, %r)
Each flag must be a string
restored metadata %r
Each job id must be a string
calling update_desired_job_list(%r)
'desired_job_list' refers to unknown job {!r}
delay cannot be negative
record data {!r} is not ASCII
record data {!r} is not correct base64
key {!r}
Missing value for key {!r}
object
Value of {} cannot be None
Value of {} is of incorrect type {}
Value for {} not in allowed set {!r}
app_blob is not ASCII
Cannot base64 decode app_blob
app_blob must be either None or bytes
app_id must be either None or str
Job %s result changed to %r
New job defined: %r
Job removed: %r
cannot remove jobs that are on the run list: {}
Enumerating sessions in %s
Found possible session in %r
Created new storage in %r
%r is not a symlink, repository %r must be corrupted
Unable to read symlink target from %r: %r
Removing storage associated with last session %r
Removing symlink associated with last session: %r
Linking storage %r to last session
Cannot link %r as %r: %r
Removing session storage from %r
Forcibly unlinking 'next' file %r
Opened session directory %r as descriptor %d
Opened session state file %r as descriptor %d
Stat'ed session state file: %s
partial read?
Closed descriptor %d
Opened %r as descriptor %d
Opened next session file %s as descriptor %d
partial write?
Unlinking %r
Calling fsync() on descriptor %d
Closing descriptor %d
Renaming %r to %r
connect %r to %r
disconnect %r from %r
No valid options in option string
Unable to import {}: {}
install this provider in the system

 This command installs the provider to the specified prefix.

 @EPILOG@

 Installation Layouts
 ====================

 There are two possible installation layouts: flat, perfect for keeping the
 whole provider in one directory, and unix, which is optimized for
 packaging and respecting the filesystem hierarchy.

 In both cases, a generated file is created at a fixed location:

 {prefix}/share/plainbox-providers-1/{provider.name}.provider

 This file is essential for plainbox to discover providers. It contains
 meta-data collected from the manage.py setup() call.

 For Packaging
 -------------

 System-wide installations should typically use `--prefix=/usr` coupled
 with `--layout=unix`. For packaging you will want to use the `--root=`
 argument to place all of the copied and generated files into your packaging
 system staging area. This will not affect generated content, which only
 respects the prefix argument.

 UNIX Layout
 -----------

 In the unix layout, following transformation is applied:

 @LAYOUT[unix]@

 Flat Layout
 -----------

 @LAYOUT[flat]@
not installed
installation prefix
installation directory layout (default: %(default)s)
install everything relative to this alternate root directory
copying: %s => %s
create a source tarball

 This commands creates a source distribution (tarball) of all of the
 essential provider files. This command takes no arguments and places the
 resulting tarball in the dist/ directory, relative to the ``manage.py``
 file. The tarball name is derived from provider name and version.

 @EPILOG@

 The items included in the tarball are:

 - the manage.py script itself
 - the README.md file
 - the jobs directory, and everything in it
 - the whitelists directory, and everything in it
 - the bin directory, and everything in it
 - the src directory, and everything in it
 - the data directory, and everything in it
 - the po directory, and everything in it

 Any of the missing items are silently ignored.
install/remove this provider, only for development

 This commands creates or removes the ``.provider`` file describing the
 provider associated with this ``manage.py`` script. Unlike ``manage.py
 install`` the provider is installed without copying anything to a
 system-wide location and does not need to be re-executed after every
 change.

 The generated file removed by passing the ``--uninstall| -u`` option.

 @EPILOG@

 By default the .provider file is created in
 ``$XDG_DATA_HOME/plainbox-providers-1/`` directory. The filename is derived
 from the name of the provider (version is not included in the filename).

 Note that the full path of the source directory is placed in the generated
 file so you will need to re-run develop if you move this directory around.
remove the generated .provider file
overwrite existing provider files
Removing provider file: %s
Provider file already exists: {}
Creating provider file: %s
build provider specific executables from source

 This command builds provider specific executables from source code.

 The actual logic on how that is done is supplied by provider authors as a
 part of setup() call inside this manage.py script, as the build_cmd
 keyword argument.

 @EPILOG@

 PlainBox comes with a pluggable system for doing the right thing so,
 hopefully, in most cases, you don't need to do anything. If your src/
 directory has a Makefile or .go source files you should be good to go.

 If the automatic defaults are somehow unsuitable you need to edit manage.py
 so that it specifies the build command.

 IMPORTANT: It is expected that the build command will create binary files
 in the current directory. The build command is executed from within the
 'build/bin' subdirectory (which is created automatically). The relative
 path of the 'src/' directory is available as the $PLAINBOX_SRC_DIR
 environment variable.
clean build results

 This command complements the build command and is intended to clean-up
 after the build process.

 The actual logic on how that is done is supplied by provider authors as a
 part of setup() call inside this manage.py script, as the clean_cmd
 keyword argument

 @EPILOG@

 IMPORTANT: the clean command is executed from the directory with the
 'manage.py' script. The relative path of the src/ directory is available
 as the $PLAINBOX_SRC_DIR environment variable.

 For virtually every case, the following command should be sufficient to
 clean up all build artifacts. It is also the default command so you don't
 need to specify it explicitly.

 setup(
 clean_cmd='rm -rf build/bin'
 )
display basic information about this provider

 This command displays various essential facts about the provider associated
 with the ``manage.py`` script. Displayed data includes provider name and
 other meta-data, all of the jobs and whitelist, with their precise
 locations.
[Provider MetaData]
name: {}
namespace: {} (derived from name)
description: {}
version: {}
gettext domain: {}
[Job Definitions]
{0!a}, from {1}
Some jobs could not be parsed correctly
Please run `manage.py validate` for details
[White Lists]
Errors prevent whitelists from being displayed
[Executables]
perform various static analysis and validation

 This command inspects all of the jobs defined in the provider associated
 with the ``manage.py`` script. It checks for both syntax issues and
 semantic issues. Anything reported as incorrect will likely result in a
 run-time failure.

 @EPILOG@

 Refer to the online documentation for plainbox to understand how correct
 job definitions look like and how to resolve problems reported by
 ``verify``.

 The exit code can be used to determine if there were any failures. If you
 have any, ``manage.py validate`` is something that could run in a CI loop.
NOTE: subsequent jobs from problematic files are ignored
missing definition of required field
incorrect value supplied
useless field in this context
usage of deprecated field
{0}: job {1!a}, field {2!a}: {3}
allowed values are: {0}
All jobs seem to be valid
update, merge and build translation catalogs

 This command exposes facilities for updating, merging and building
 message translation catalogs.
don't actually do anything
actions to perform
do not update the translation template
do not merge translation files with the template
do not build binary translation files
manage.py [--help] [--version] [options]
{}: bad value of {!r}, {}
.__call__() not defined
unknown parser %(parser_name)r (choices: %(choices)s)
argument "-" with mode %r
can't open '%s': %s
cannot merge actions - two groups are named %r
'required' is an invalid argument for positionals
invalid option string %(option)r: must start with a character %(prefix_chars)r
dest= is required for options like %r
invalid conflict_resolution value: %r
mutually exclusive arguments must be optional
positional arguments
optional arguments
show this help message and exit
cannot have multiple subparser arguments
unrecognized arguments: %s
not allowed with argument %s
ignored explicit argument %r
argument %s is required
one of the arguments %s is required
expected one argument
expected at most one argument
expected at least one argument
ambiguous option: %(option)s could match %(matches)s
unexpected option string: %s
%r is not callable
invalid %(type)s value: %(value)r
invalid choice: %(value)r (choose from %(choices)s)
%(prog)s: error: %(message)s
the following arguments are required: %s