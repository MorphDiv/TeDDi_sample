# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Next
(PHP 4 = 4.0.3)
Returns an associative array that corresponds to the fetched row, or FALSE if there are no more rows.
mysql_fetch_assoc() is equivalent to calling mysql_fetch_array() with MYSQL_ASSOC for the optional second parameter.
It only returns an associative array.
This is the way mysql_fetch_array() originally worked.
If you need the numeric indices as well as the associative, use mysql_fetch_array().
If two or more columns of the result have the same field names, the last column will take precedence.
To access the other column( s) of the same name, you either need to access the result with numeric indices by using mysql_fetch_row() or add alias names.
See the example at the mysql_fetch_array() description about aliases.
An important thing to note is that using mysql_fetch_assoc() is not significantly slower than using mysql_fetch_row(), while it provides a significant added value.
Example 1.
An expanded mysql_fetch_assoc() example
?php $conn = mysql_connect( "localhost", "mysql_user", "mysql_password"); if (!$conn) {echo "Unable to connect to DB: ". mysql_error(); exit;} if (!mysql_select_db("mydbname")) {echo "Unable to select mydbname:". mysql_error(); exit;} $sql = "SELECT id as userid, fullname, userstatus FROM sometable WHERE userstatus = 1"; $result = mysql_query($sql); if (!$result) {echo "Could not successfully run query ($sql) from DB: ". mysql_error(); exit;} if (mysql_num_rows($result) == 0) {echo "No rows found, nothing to print so am exiting"; exit;} / / While a row of data exists, put that row in $row as an associative array / / Note:
If you 're expecting just one row, no need to use a loop / / Note:
If you put extract( $row); inside the following loop, you'll / / then create $userid, $fullname, and $userstatus while ($row = mysql_fetch_assoc($result)) {echo $row["userid"]; echo $row["fullname"]; echo $row["userstatus"];} mysql_free_result($result);?
See also mysql_fetch_row(), mysql_fetch_array(), mysql_query(), and mysql_error().
Prev
Home
Next
mysql_fetch_array
Up
mysql_fetch_field