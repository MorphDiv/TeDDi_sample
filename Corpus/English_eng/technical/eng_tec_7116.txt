# language_name_wals:	English
# language_name_glotto:	English
# ISO_6393:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	Ubuntu
# source:	https://object.pouta.csc.fi/OPUS-Ubuntu/v14.10/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/Ubuntu.php
# copyright_long:	http://opus.nlpl.eu/Ubuntu.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

ISO C89 forbids compound literals
;; Combiner statistics: %d attempts, %d substitutions (%d requiring new space),
;; %d successes.
the left operand of "%s" changes sign when promoted
Multiple include guards may be useful for:
poisoning existing macro "%s"
%s
conversion from %s to %s not supported by iconv
iconv_open
no iconv implementation, cannot convert from %s to %s
character 0x%lx is not in the basic source character set
converting to execution character set
character 0x%lx is not unibyte in execution character set
Character %x might not be NFKC
universal character names are only valid in C++ and C99
the meaning of '\\%c' is different in traditional C
In _cpp_valid_ucn but not a UCN
incomplete universal character name %.*s
%.*s is not a valid universal character
'$' in identifier or number
universal character %.*s is not valid in an identifier
universal character %.*s is not valid at the start of an identifier
converting UCN to source character set
converting UCN to execution character set
the meaning of '\\x' is different in traditional C
\\x used with no following hex digits
hex escape sequence out of range
octal escape sequence out of range
the meaning of '\\a' is different in traditional C
non-ISO-standard escape sequence, '\\%c'
unknown escape sequence: '\\%c'
unknown escape sequence: '\\%s'
converting escape sequence to execution character set
character constant too long for its type
multi-character character constant
empty character constant
failure to convert %s to %s
extra tokens at end of #%s directive
#%s is a GCC extension
#%s is a deprecated GCC extension
suggest not using #elif in traditional C
traditional C ignores #%s with the # indented
suggest hiding #%s from traditional C with an indented #
embedding a directive within macro arguments is not portable
style of line directive is a GCC extension
invalid preprocessing directive #%s
"defined" cannot be used as a macro name
"%s" cannot be used as a macro name as it is an operator in C++
no macro name given in #%s directive
macro names must be identifiers
undefining "%s"
missing terminating > character
#%s expects "FILENAME" or <FILENAME>
empty filename in #%s
#include nested too deeply
#include_next in primary source file
invalid flag "%s" in line directive
unexpected end of file after #line
"%s" after #line is not a positive integer
line number out of range
"%s" is not a valid filename
"%s" after # is not a positive integer
invalid #%s directive
registering pragmas in namespace "%s" with mismatched name expansion
registering pragma "%s" with name expansion and no namespace
registering "%s" as both a pragma and a pragma namespace
#pragma %s %s is already registered
#pragma %s is already registered
registering pragma with NULL handler
#pragma once in main file
invalid #pragma push_macro directive
invalid #pragma pop_macro directive
invalid #pragma GCC poison directive
#pragma system_header ignored outside include file
cannot find source file %s
current file is older than %s
_Pragma takes a parenthesized string literal
#else without #if
#else after #else
the conditional began here
#elif without #if
#elif after #else
#endif without #if
missing '(' after predicate
missing ')' to complete answer
predicate's answer is empty
assertion without predicate
predicate must be an identifier
"%s" re-asserted
unterminated #%s
unterminated comment
stdout
%s: %s
too many decimal points in number
fixed-point constants are a GCC extension
invalid digit "%c" in binary constant
invalid digit "%c" in octal constant
invalid prefix "0b" for floating constant
no digits in hexadecimal floating constant
use of C99 hexadecimal floating constant
exponent has no digits
hexadecimal floating constants require an exponent
invalid suffix "%.*s" on floating constant
traditional C rejects the "%.*s" suffix
suffix for double constant is a GCC extension
invalid suffix "%.*s" with hexadecimal floating constant
decimal float constants are a GCC extension
invalid suffix "%.*s" on integer constant
use of C++0x long long integer constant
use of C99 long long integer constant
imaginary constants are a GCC extension
binary constants are a GCC extension
integer constant is too large for its type
integer constant is so large that it is unsigned
missing ')' after "defined"
operator "defined" requires an identifier
("%s" is an alternative token for "%s" in C++)
this use of "defined" may not be portable
user-defined literal in preprocessor expression
floating constant in preprocessor expression
imaginary number in preprocessor expression
"%s" is not defined
assertions are a GCC extension
assertions are a deprecated extension
missing binary operator before token "%s"
token "%s" is not valid in preprocessor expressions
missing expression between '(' and ')'
%s with no expression
operator '%s' has no right operand
operator '%s' has no left operand
':' without preceding '?'
unbalanced stack in %s
impossible operator '%u'
missing ')' in expression
'?' without following ':'
integer overflow in preprocessor expression
missing '(' in expression
the right operand of "%s" changes sign when promoted
traditional C rejects the unary plus operator
comma operator in operand of #if
division by zero in #if
NULL directory in find_file
one or more PCH files were found, but they were invalid
use -Winvalid-pch for more information
%s is a block device
%s is too large
%s is shorter than expected
no include path in which to search for %s
cppchar_t must be an unsigned type
preprocessor arithmetic has maximum precision of %lu bits; target requires %lu bits
CPP arithmetic must be at least as precise as a target int
target char is less than 8 bits wide
target wchar_t is narrower than target char
target int is narrower than target char
CPP half-integer narrower than CPP character
CPP on this host cannot handle wide character constants over %lu bits, but the target requires %lu bits
backslash and newline separated by space
backslash-newline at end of file
trigraph ??%c converted to %c
trigraph ??%c ignored, use -trigraphs to enable
"/*" within comment
%s in preprocessing directive
null character(s) ignored
`%.*s' is not in NFKC
`%.*s' is not in NFC
attempt to use poisoned "%s"
__VA_ARGS__ can only appear in the expansion of a C99 variadic macro
identifier "%s" is a special operator name in C++
raw string delimiter longer than 16 characters
invalid character '%c' in raw string delimiter
unterminated raw string
null character(s) preserved in literal
missing terminating %c character
C++ style comments are not allowed in ISO C90
(this will be reported only once per input file)
multi-line comment
unspellable token %s
macro "%s" is not used
invalid built-in macro "%s"
could not determine file timestamp
could not determine date and time
__COUNTER__ expanded inside directive with -fdirectives-only
invalid string literal, ignoring final '\\'
pasting "%s" and "%s" does not give a valid preprocessing token
ISO C99 requires rest arguments to be used
macro "%s" requires %u arguments, but only %u given
macro "%s" passed %u arguments, but takes just %u
unterminated argument list invoking macro "%s"
function-like macro "%s" must be used with arguments in traditional C
invoking macro %s argument %d: empty macro arguments are undefined in ISO C90 and ISO C++98
duplicate macro parameter "%s"
"%s" may not appear in macro parameter list
macro parameters must be comma-separated
parameter name missing
anonymous variadic macros were introduced in C99
ISO C does not permit named variadic macros
missing ')' in macro parameter list
'##' cannot appear at either end of a macro expansion
ISO C99 requires whitespace after the macro name
missing whitespace after the macro name
'#' is not followed by a macro parameter
"%s" redefined
this is the location of the previous definition
macro argument "%s" would be stringified in traditional C
invalid hash type %d in cpp_macro_definition
while writing precompiled header
%s: not used because `%.*s' is poisoned
%s: not used because `%.*s' not defined
%s: not used because `%.*s' defined as `%s' not `%.*s'
%s: not used because `%s' is defined
%s: not used because `__COUNTER__' is invalid
while reading precompiled header
detected recursion whilst expanding macro "%s"
syntax error in macro parameter list