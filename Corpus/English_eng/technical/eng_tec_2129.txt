# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	OpenOffice
# source:	https://object.pouta.csc.fi/OPUS-OpenOffice/v3/raw/en_GB.zip
# copyright_short:	http://opus.nlpl.eu/OpenOffice.php
# copyright_long:	http://opus.nlpl.eu/OpenOffice.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Array Functions
/text/scalc/01/04060107.xhp
matrices; functions
Function Wizard; arrays
array formulae
inline array constants
formulae;arrays
functions;array functions
editing; array formulae
copying; array formulae
adjusting array ranges
calculating;conditional calculations
matrices; calculations
conditional calculations with arrays
implicit array handling
forced array handling
mw deleted &quot; creating; &quot;
Array Functions
This category contains the array functions.
What is an Array?
An array is a linked range of cells on a spreadsheet containing values.
A square range of 3 rows and 3 columns is a 3 x 3 array:
A
B
C
1
7
31
33
2
95
17
2
3
5
10
50
The smallest possible array is a 1 x 2 or 2 x 1 array with two adjacent cells.
What is an array formula?
A formula in which the individual values in a cell range are evaluated is referred to as an array formula.
The difference between an array formula and other formulae is that the array formula deals with several values simultaneously instead of just one.
Not only can an array formula process several values, but it can also return several values.
The results of an array formula is also an array.
=10*A1:C3
and confirm this entry using the key combination
Command
Ctrl
+Shift+Enter.
The result is a 3 x 3 array in which the individual values in the cell range (A1:C3) are multiplied by a factor of 10.
In addition to multiplication, you can also use other operators on the reference range (an array).
With $[officename] Calc, you can add (+), subtract (-), multiply (*), divide (/), use exponents (^), concatenation ( & ) and comparisons (=, < > , < , > , < =, > =).
The operators can be used on each individual value in the cell range and return the result as an array if the array formula was entered.
{=A1:A2= &quot; &quot; }
and
{=A1:A2=0}
will both return a 1 column 2 row array of cells containing TRUE.
When do you use array formulae?
make the required change to the array formula
.
Array formulae are also a space saving option when several values must be calculated, since they are not very memory-intensive.
In addition, arrays are an essential tool for carrying out complex calculations, because you can have several cell ranges included in your calculations. $[officename] has different maths functions for arrays, such as the MMULT function for multiplying two arrays or the SUMPRODUCT function for calculating the scalar products of two arrays.
Using Array Formulae in $[officename] Calc
You can also create a &quot; normal &quot; formula in which the reference range, such as parameters, indicate an array formula.
The result is obtained from the intersection of the reference range and the rows or columns in which the formula is found.
If there is no intersection or if the range at the intersection covers several rows or columns, a #VALUE! error message appears.
The following example illustrates this concept:
Creating Array Formulae
Function Wizard
, you must mark the
Array
check box each time so that the results are returned in an array.
Otherwise, only the value in the upper-left cell of the array being calculated is returned.
Command
Ctrl
+Enter instead of the Enter key.
Only then does the formula become an array formula.
Array formulae appear in braces (curly brackets) in $[officename] Calc.
You cannot create array formulae by manually entering the braces.
The cells in a results array are autmatically protected against changes.
However, you can edit or copy the array formula by selecting the entire array cell range.
Using Inline Array Constants in Formulae
Calc supports inline matrix/array constants in formulae.
An inline array is enclosed with braces (curly brackets) '{' and '}'.
Elements can be each a number (including negatives), a logical constant (TRUE, FALSE), or a literal string.
Non-constant expressions are not allowed.
Arrays can be entered with one or more rows, and one or more columns.
All rows must consist of the same number of elements, all columns must consist of the same number of elements.
The column separator (separating elements in one row) and the row separator are language and locale dependent.
But in this help content, the ';' semicolon and '|' pipe symbol are used to indicate the column and row separators, respectively.
For example, in the English locale, the ',' comma is used as the column separator, while the ';' semicolon is used as the row separator.
Arrays can not be nested.
Examples:
={1;2;3}
An array with one row consisting of the three numbers 1, 2, and 3.
={1;2;3}
using braces (curly brackets) and semicolons, then press
Command
Ctrl
+Shift+Enter.
={1;2;3|4;5;6}
An array with two rows and three values in each row.
={0;1;2|FALSE;TRUE; &quot; two &quot; }
A mixed data array.
=SIN({1;2;3})
Entered as a matrix formula, delivers the result of three SIN calculations with the arguments 1, 2, and 3.
Editing Array Formulae
Command
Ctrl
+ /, where / is the Division key on the numeric keypad.
Either press F2 or position the cursor in the input line.
Both of these actions let you edit the formula.
Command
Ctrl
+Shift+Enter.
You can format the separate parts of an array.
For example, you can change the font colour.
Select a cell range and then change the attribute you want.
Copying Array Formulae
Select the cell range or array containing the array formula.
Either press F2 or position the cursor in the input line.
Command
Ctrl
+C.
Select a range of cells where you want to insert the array formula and either press F2 or position the cursor in the input line.
Command
Ctrl
+V in the selected space and confirm it by pressing
Command
Ctrl
+Shift+Enter.
The selected range now contains the array formula.
Adjusting an Array Range
If you want to edit the output array, do the following:
Select the cell range or array containing the array formula.
Below the selection, to the right, you will see a small icon with which you can zoom in or out on the range using your mouse.
When you adjust the array range, the array formula will not automatically be adjusted.
You are only changing the range in which the result will appear.
Command
Ctrl
key, you can create a copy of the array formula in the given range.
Conditional Array Calculations
A conditional array calculation is an array or matrix formula that includes an IF() or CHOOSE() function.
The condition argument in the formula is an area reference or a matrix result.
In the following example, the > 0 test of the {=IF(A1:A3 > 0; &quot; yes &quot; ; &quot; no &quot; )} formula is applied to each cell in the range A1:A3 and the result is copied to the corresponding cell.
A
B (formula)
B (result)
1
1
{=IF(A1:A3 > 0; &quot; yes &quot; ; &quot; no &quot; )}
yes
2
0
{=IF(A1:A3 > 0; &quot; yes &quot; ; &quot; no &quot; )}
no
3
1
{=IF(A1:A3 > 0; &quot; yes &quot; ; &quot; no &quot; )}
yes
The following functions provide forced array handling:
CORREL, COVAR, FORECAST, FTEST, INTERCEPT, MDETERM, MINVERSE, MMULT, MODE, PEARSON, PROB, RSQ, SLOPE, STEYX, SUMPRODUCT, SUMX2MY2, SUMX2PY2, SUMXMY2, TTEST.
If you use area references as arguments when you call one of these functions, the functions behave as array functions.
The following table provides an example of forced array handling:
A
B (formula)
B (result)
C (forced array formula)
C (result)
1
1
=A1:A2+1
2
=SUMPRODUCT(A1:A2+1)
5
2
2
=A1:A2+1
3
=SUMPRODUCT(A1:A2+1)
5
3
=A1:A2+1
#VALUE!
=SUMPRODUCT(A1:A2+1)
5
MUNIT function
MUNIT
Returns the unitary square array of a certain size.
The unitary array is a square array where the main diagonal elements equal 1 and all other array elements are equal to 0.
Syntax:
MUNIT(Dimensions)
Dimensions
refers to the size of the array unit.
You can find a general introduction to Array functions at the top of this page.
Example:
Select a square range within the spreadsheet, for example, from A1 to E5.
Array
check box.
Enter the desired dimensions for the array unit, in this case
5
, and click
OK
.
=Munit(5)
formula in the last cell of the selected range (E5), and press
Shift+Command+Enter
Shift+Ctrl+Enter
.
You now see a unit array with a range of A1:E5.
FREQUENCY function
FREQUENCY
Indicates the frequency distribution in a one-column-array.
The function counts the number of values in the Data array that are within the values given by the Classes array.
Syntax:
FREQUENCY(Data; Classes)
Data
is the array of or reference to the set of values to be counted.
Classes
is the array of limit values.
You can find a general introduction to Array functions at the top of this page.
Example:
In the following table, column A lists unsorted measurement values.
Column B contains the upper limit you entered for the classes into which you want to divide the data in column A.
According to the limit entered in B1, the FREQUENCY function returns the number of measured values less than or equal to 5.
As the limit in B2 is 10, the FREQUENCY function returns the second result as the number of measured values that are greater than 5 and less than or equal to 10.
The text you entered in B6, &quot; > 25 &quot; , is only for reference purposes.
UFI: replace table by picture
A
B
C
1
12
5
1
2
8
10
3
3
24
15
2
4
11
20
3
5
5
25
1
6
20
> 25
1
7
16
8
9
9
7
10
16
11
33
Function Wizard
.
Select the
Data
range in (A1:A11), and then the
Classes
range in which you entered the class limits (B1:B6).
Select the
Array
check box and click
OK
.
You will see the frequency count in the range C1:C6.
MDETERM function
determinants
MDETERM
Returns the array determinant of an array.
This function returns a value in the current cell; it is not necessary to define a range for the results.
Syntax:
MDETERM(Array)
Array
is a square array in which the determinants are defined.
You can find a general introduction to using Array functions on top of this page.
MINVERSE function
inverse arrays
MINVERSE
Returns the inverse array.
Syntax:
MINVERSE(Array)
Array
is a square array that is to be inverted.
Example:
Array
field and click
OK
.
MMULT function
MMULT
Calculates the array product of two arrays.
The number of columns for array 1 must match the number of rows for array 2.
The square array has an equal number of rows and columns.
Syntax:
MMULT(Array; Array)
Array
at first place is the first array used in the array product.
Array
at second place is the second array, which must have the same number of rows as the first.
Example:
Array
, then select the second
Array
.
Using
Function Wizard
, mark the
Array
check box.
Click
OK
.
The output array will appear in the first selected range.
TRANSPOSE function
TRANSPOSE
Transposes the rows and columns of an array.
Syntax:
TRANSPOSE(Array)
Array
is the array in the spreadsheet that is to be transposed.
Example:
Shift+Command+Enter
Shift+Ctrl+Enter
.
Or, if you are using the
Function Wizard
, mark the
Array
check box.
The transposed array appears in the selected target range and is protected automatically against changes.
LINEST function
LINEST
Returns a table of statistics for a straight line that best fits a data set.
Syntax:
LINEST(DataY; DataX; LinearType; Stats)
DataY
is a single row or column range specifying the y-coordinates in a set of data points.
DataX
is a corresponding single row or column range specifying the x-coordinates.
If
DataX
is omitted it defaults to
1, 2, 3, ..., n
.
If there is more than one set of variables
DataX
may be a range with corresponding multiple rows or columns.
y = a + bx
that best fits the data, using linear regression (the &quot; least squares &quot; method).
With more than one set of variables the straight line is of the form
y = a + b1*x1 + b2*x2 ... + bn*xn
.
LinearType
is FALSE the straight line found is forced to pass through the origin (the constant a is zero; y = b*x).
If omitted,
LinearType
defaults to TRUE (the line is not forced through the origin).
Stats
is omitted or FALSE only the top line of the statistics table is returned.
If TRUE the entire table is returned.
Command
Ctrl
+Shift+Return rather than just Return).
Example:
DataY
.
If you want, you can enter other parameters.
Select
Array
and click
OK
.
Stats
= 0), will at least show the slope of the regression line and its intersection with the y-axis.
If
Stats
does not equal 0, other results are to be displayed.
Other LINEST Results:
Examine the following examples:
A
B
C
D
E
F
G
1
x1
x2
y
LIN
EST value
2
4
7
100
4,17
-3,48
82,33
3
5
9
105
5,46
10,96
9,35
4
6
11
104
0,87
5,06
#NA
5
7
12
108
13,21
4
#NA
6
8
15
111
675,45
102,26
#NA
7
9
17
120
8
10
19
133
Function Wizard
.
For the LINEST function to work, you must have marked the
Array
check box in the
Function Wizard
.
Next, select the following values in the spreadsheet (or enter them using the keyboard):
DataY
is C2:C8
DataX
is A2:B8
LinearType
and
Stats
are both set to 1.
OK
, $[officename] Calc will fill the above example with the LINEST values as shown in the example.
Formula
Bar corresponds to each cell of the LINEST array
{=LINEST(C2:C8; A2:B8; 1; 1)}
This represents the calculated LINEST values:
slopes, see also regression lines
regression lines;LINEST function
mw made &quot; regression lines &quot; a two level entry
m
of the regression line y = b + m*x for the x1 and x2 values.
The values are given in reverse order; that is, the slope for x2 in E2 and the slope for x1 in F2.
G2:
Intersection b with the y-axis.
standard errors;array functions
MW changed &quot; standard errors &quot;
E3 and F3:
The standard error of the slope value.
G3:
The standard error of the intercept
RSQ calculations
E4:
RSQ
F4:
The standard error of the regression calculated for the y-value.
E5:
The F value from the variance analysis.
F5:
The degrees of freedom from the variance analysis.
E6:
The sum of the squared deviation of the estimated y-values from their linear mean.
F6:
The sum of the squared deviation of the estimated y-value from the given y-values.
LOGEST function
LOGEST
This function calculates the adjustment of the entered data as an exponential regression curve (y=b*m^x).
Syntax:
LOGEST(DataY; DataX; FunctionType; Stats)
DataY
is the y-data array.
DataX
(optional) is the x-data array.
FunctionType
(optional).
If FunctionType = 0, functions in the form y = m^x will be calculated.
Otherwise, y = b * m^x functions will be calculated.
Stats
(optional).
If Stats = 0, only the regression coefficient is calculated.
Example:
See LINEST.
However, no square sum will be returned.
SUMPRODUCT function
scalar products
dot products
inner products
SUMPRODUCT
Multiplies corresponding elements in the given arrays, and returns the sum of those products.
Syntax:
SUMPRODUCT(Array1; Array2; ...
Array30)
Array1; Array2; ...
Array30
represent 1 to 30 arrays whose corresponding elements are to be multiplied.
At least one array must be part of the argument list.
If only one array is given, all array elements are summed.
Example:
A
B
C
D
1
2
3
4
5
2
6
7
8
9
3
10
11
12
13
=SUMPRODUCT(A1:B3; C1:D3)
returns 397.
Calculation:
A1*C1 + B1*D1 + A2*C2 + B2*D2 + A3*C3 + B3*D3
You can use SUMPRODUCT to calculate the scalar product of two vectors.
SUMPRODUCT returns a single number, it is not necessary to enter the function as an array function.
SUMX2MY2 function
SUMX2MY2
Returns the sum of the difference of squares of corresponding values in two arrays.
Syntax:
SUMX2MY2(ArrayX; ArrayY)
ArrayX
is the first array whose elements are to be squared and added.
ArrayY
is the second array whose elements are to be squared and subtracted.
SUMX2PY2 function
SUMX2PY2
Returns the sum of the sum of squares of corresponding values in two arrays.
Syntax:
SUMX2PY2(ArrayX; ArrayY)
ArrayX
is the first array whose arguments are to be squared and added.
ArrayY
is the second array, whose elements are to be squared and added.
SUMXMY2 function
SUMXMY2
Adds the squares of the variance between corresponding values in two arrays.
Syntax:
SUMXMY2(ArrayX; ArrayY)
ArrayX
is the first array whose elements are to be subtracted and squared.
ArrayY
is the second array, whose elements are to be subtracted and squared.
TREND function
TREND
Returns values along a linear trend.
Syntax:
TREND(DataY; DataX; NewDataX; LinearType)
DataY
is the y-data array.
DataX
(optional) is the x-data array.
NewDataX
(optional) is the array of the x-data, which are used for recalculating values.
LinearType
(Optional).
If
LinearType
= 0, then lines will be calculated through the zero point.
Otherwise, offset lines will also be calculated.
The default is
LinearType
< > 0.
Example:
Array
field. click
OK
.
The trend data calculated from the output data is displayed.
GROWTH function
exponential trends in arrays
GROWTH
Calculates the points of an exponential trend in an array.
Syntax:
GROWTH(DataY; DataX; NewDataX; FunctionType)
DataY
is the y-data array.
DataX
(optional) is the x-data array.
NewDataX
(optional) is the x-data array for which the values are recalculated.
FunctionType
(optional).
If FunctionType = 0, functions in the form y = m^x will be calculated.
Otherwise, y = b*m^x functions will be calculated.
Example:
Array
and click
OK
.