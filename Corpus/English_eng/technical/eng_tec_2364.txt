# language_name_wals:	English
# language_name_glotto:	English
# ISO_6393:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Next
(PHP 4)
array_merge() merges the elements of two or more arrays together so that the values of one are appended to the end of the previous one.
It returns the resulting array.
If the input arrays have the same string keys, then the later value for that key will overwrite the previous one.
If, however, the arrays contain numeric keys, the later value will not overwrite the original value, but will be appended.
Example 1. array_merge() example
$array1 = array ("color "= "red", 2, 4); $array2 = array ("a", "b", "color" = "green", "shape "= "trapezoid", 4); $result = array_merge ($array1, $array2);
The $result will be:
Array ([color] = green [0] = 2 [1] = 4 [2] = a [3] = b [shape] = trapezoid [4] = 4)
Example 2.
Simple array_merge() example
$array1 = array(); $array2 = array(1 = "data"); $result = array_merge($array1, $array2);
Don 't forget that numeric keys will be renumbered!
Array ([0] = data)
If you want to completely preserve the arrays and just want to append them to each other, use the + operator:
$array1 = array(); $array2 = array(1 = "data"); $result = $array1 + $array2;
Array ([1] = data)
Note:
Shared keys will be overwritten on a first-come first-served basis.
See also array_merge_recursive().
Prev
Home
Next
array_merge_recursive
Up
array_multisort