# language_name_wals:	English
# language_name_glotto:	English
# ISO_6393:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	KDE4
# source:	https://object.pouta.csc.fi/OPUS-KDE4/v2/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/KDE4.php
# copyright_long:	http://opus.nlpl.eu/KDE4.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Extending & kommander;

ROLES_OF_TRANSLATORS
Creating & kommander; Widgets
With Kommander you can create new widgets based on non-kommander; widgets fairly easily. The approach is to derive your new & kommander; widget class from the & Qt; /kde; widget which you wish to integrate with & kommander;, and then also from the KommanderWidget class. Overriding methods from this class gives the & kommander; widget its functionality.
Most of the code of a & kommander; widget is just template code. Therefore, you can use the widgetgenerator. kmdr & kommander; dialog to generate most the & kommander; widget code for you. All you have to do is fill in the important parts relating to your widget like any state information, widget text etc.
Let's say we want to create a new line edit widget for & kommander;, based on the & kde; widget KLineEdit. Using the & kommander; widget generator dialog, we get something like this in the outputted header file: