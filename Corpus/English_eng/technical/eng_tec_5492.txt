# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Chapter 2.
A simple tutorial
Next
Now that PHP has grown to be a popular scripting language, there are more resources out there that have listings of code you can reuse in your own scripts.
For the most part the developers of the PHP language have tried to be backwards compatible, so a script written for an older version should run (ideally) without changes in a newer version of PHP, in practice some changes will usually be needed.
Two of the most important recent changes that affect old code are:
The deprecation of the old $HTTP_*_VARS arrays (which need to be indicated as global when used inside a function or method).
The following autoglobal arrays were introduced in PHP 4.1.0.
They are: $_GET, $_POST, $_COOKIE, $_SERVER, $_ENV, $_REQUEST, and $_SESSION.
The older $HTTP_*_VARS arrays, such as $HTTP_POST_VARS, still exist and have since PHP 3.
External variables are no longer registered in the global scope by default.
In other words, as of PHP 4.2.0 the PHP directive register_globals is off by default in php.ini.
The preferred method of accessing these values is via the autoglobal arrays mentioned above.
Older scripts, books, and tutorials may rely on this directive being on.
If on, for example, one could use $id from the URL http: / /www.example.com / foo.php?id=42.
Whether on or off, $_GET[ 'id'] is available.
Prev
Home
Next
Dealing with Forms
Up
What 's next?