# language_name_wals:	English
# language_name_glotto:	English
# ISO_6393:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Many random number generators of older libcs have dubious or unknown characteristics and are slow.
By default, PHP uses the libc random number generator with the rand() By default, PHP uses the libc random number generator with the rand() function.
The mt_rand() function is a drop-in replacement for this.
It uses a random number generator with known characteristics using the Mersenne Twister, which will produce random numbers that should be suitable for seeding some kinds of cryptography (see the home page for details) and is four times faster than what the average libc provides.
If called without the optional min, max arguments mt_rand() returns a pseudo-random value between 0 and RAND_MAX.
If you want a random number between 5 and 15 (inclusive), for example, use mt_rand (5, 15).
In older versions of PHP, you had to seed the random number generator before use with mt_srand().
Since 4.2.0 this is no longer necessary.
Note:
In versions before 3.0.7 the meaning of max was range.
To get the same results in these versions the short example should be mt_rand (5, 11) to get a random number between 5 and 15.
See also mt_srand(), mt_getrandmax() and rand().
Prev
Home
Next
mt_getrandmax
Up
mt_srand