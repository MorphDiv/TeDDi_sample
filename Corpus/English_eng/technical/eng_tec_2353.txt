# language_name_wals:	English
# language_name_glotto:	English
# ISO_6393:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
array_diff_assoc() returns an array containing all the values from array1 that are not present in any of the other arguments.
Note that the keys are used in the comparison unlike array_diff().
Example 1. array_diff_assoc() example
?php $array1 = array ("a "= "green", "b" = "brown", "c "= "blue", "red"); $array2 = array ("a" = "green", "yellow", "red"); $result = array_diff_assoc ($array1, $array2); / * The result is:
Array ([b] = brown [c] = blue [0] = red) * /?
In our example above you see the "a" = "green "pair is present in both arrays and thus it is not in the ouput from the function.
Unlike this, the pair 0 = "red" is in the ouput because in the second argument "red "has key which is 1.
Two values from key = value pairs are considered equal only if (string) $elem1 === (string) $elem2.
In other words a strict check takes place so the string representations must be the same.
Note:
Please note that this function only checks one dimension of a n-dimensional array.
Of course you can check deeper dimensions by using, for example, array_diff_assoc( $array1[0], $array2[0]);.
See also array_diff(), array_intersect(), and array_intersect_assoc().
Prev
Home
Next
array_count_values
Up
array_diff