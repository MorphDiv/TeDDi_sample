# language_name_wals:	English
# language_name_glotto:	English
# ISO_6393:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Next
(PHP 4 = 4.0.1)
Sets a user function (error_handler) to handle errors in a script.
Returns the previously defined error handler (if any), or FALSE on error.
This function can be used for defining your own way of handling errors during runtime, for example in applications in which you need to do cleanup of data / files when a critical error happens, or when you need to trigger an error under certain conditions (using trigger_error())
The user function needs to accept 2 parameters: the error code, and a string describing the error.
From PHP 4.0.2, an additional 3 optional parameters are supplied: the filename in which the error occurred, the line number in which the error occurred, and the context in which the error occurred (an array that points to the active symbol table at the point the error occurred).
Note:
Instead of a function name, an array containing an object reference and a method name can also be supplied. (Since PHP 4.3.0)
Note:
The following error types cannot be handled with a user defined function:
E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR and E_COMPILE_WARNING.
The example below shows the handling of internal exceptions by triggering errors and handling them with a user defined function:
Example 1.
Error handling with set_error_handler() and trigger_error()
?php / / redefine the user error constants - PHP 4 only define ("FATAL",E_USER_ERROR); define ("ERROR",E_USER_WARNING); define ("WARNING",E_USER_NOTICE); / / set the error reporting level for this script error_reporting (FATAL | ERROR | WARNING); / / error handler function function myErrorHandler ($errno, $errstr, $errfile, $errline) {switch ($errno) {case FATAL: echo "b FATAL / b [$errno] $errstr br \n"; echo" Fatal error in line ".$errline. "of file ".$errfile; echo", PHP ".PHP_VERSION. "(".PHP_OS .") br \n"; echo "Aborting... br \n"; exit(1); break; case ERROR: echo" b ERROR / b [$errno] $errstr br \n"; break; case WARNING: echo "b WARNING / b [$errno] $errstr br \n"; break; default: echo "Unkown error type: [$errno] $errstr br \n"; break;}} / / function to test the error handling function scale_by_log ($vect, $scale) {if (!is_numeric($scale) | | $scale = 0) trigger_error("log(x) for x = 0 is undefined, you used: scale = $scale", FATAL); if (!is_array($vect)) {trigger_error("Incorrect input vector, array of values expected", ERROR); return null;} for ($i=0; $i count($vect); $i++) {if (!is_numeric($vect[$i])) trigger_error("Value at position $i is not a number, using 0 (zero)", WARNING); $temp[$i] = log($scale) * $vect[$i];} return $temp;} / / set to the user defined error handler $old_error_handler = set_error_handler("myErrorHandler"); / / trigger some errors, first define a mixed array with a non-numeric item echo "vector a\n"; $a = array(2,3 ,"foo",5.5,43.3,21.11); print_r($a); / / now generate second array, generating a warning echo "----\nvector b - a warning (b = log(PI) * a)\n"; $b = scale_by_log($a, M_PI); print_r($b); / / this is trouble, we pass a string instead of an array echo "----\nvector c - an error\n"; $c = scale_by_log("not array",2.3); var_dump($c); / / this is a critical error, log of zero or negative number is undefined echo "----\nvector d - fatal error\n"; $d = scale_by_log($a, -2.5);?
vector a Array ([0] = 2 [1] = 3 [2] = foo [3] = 5.5 [4] = 43.3 [5] = 21.11) --- - vector b - a warning (b = log(PI) * a) b WARNING / b [1024] Value at position 2 is not a number, using 0 (zero) br Array ([0] = 2.2894597716988 [1] = 3.4341896575482 [2] = 0 [3] = 6.2960143721717 [4] = 49.566804057279 [5] = 24.165247890281) --- - vector c - an error b ERROR / b [512] Incorrect input vector, array of values expected br NULL --- - vector d - fatal error b FATAL / b [256] log(x) for x = 0 is undefined, you used: scale = -2.5 br Fatal error in line 36 of file trigger_error.php, PHP 4.0.2 (Linux) br Aborting... br
It is important to remember that the standard PHP error handler is completely bypassed. error_reporting() settings will have no effect and your error handler will be called regardless - however you are still able to read the current value of error_reporting It is important to remember that the standard PHP error handler is completely bypassed. error_reporting() settings will have no effect and your error handler will be called regardless - however you are still able to read the current value of error_reporting and act appropriately.
Of particular note is that this value will be 0 if the statement that caused the error was prepended by the @ error-control operator.
Also note that it is your responsibility to die() if necessary.
If the error-handler function returns, script execution will continue with the next statement after the one that caused an error.
Note:
If errors occur before the script is executed (e.g. on file uploads) the custom error handler cannot be called since it is not registered at that time.
See also error_reporting(), restore_error_handler(), trigger_error(), user_error()
Prev
Home
Next
restore_error_handler
Up
trigger_error