# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Next
The socket extension implements a low-level interface to the socket communication functions based on the popular BSD sockets, providing the possibility to act as a socket server as well as a client.
For a more generic client-side socket interface, see fsockopen() and pfsockopen().
When using these functions, it is important to remember that while many of them have identical names to their C counterparts, they often have different declarations.
Please be sure to read the descriptions to avoid confusion.
Those unfamiliar with socket programming can find a lot of useful material in the appropriate Unix man pages, and there is a great deal of tutorial information on socket programming in C on the web, much of which can be applied, with slight modifications, to socket programming in PHP.
The UNIX Socket FAQ might be a good start.
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
No external libraries are needed to build this extension.
The socket functions described here are part of an extension to PHP which must be enabled at compile time by giving the --enable-sockets option to configure.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
The socket extension was written to provide a useable interface to the powerful BSD sockets.
Care has been taken that the functions work equally well on Win32 and Unix implementations.
Almost all of the sockets functions may fail under certain conditions and therefore emit an E_WARNING message describing the error.
Sometimes this doesn 't happen to the desire of the developer.
For example the function socket_read() may suddenly emit an E_WARNING message because the connection broke unexpectedly.
It' s common to suppress the warning with the @ -operator and catch the error code within the application with the socket_last_error() function.
You may call the socket_strerror() function with this error code to retrieve a string describing the error.
See their description for more information.
Note:
The E_WARNING messages generated by the socket extension are in english though the retrieved error message will appear depending on the current locale (LC_MESSAGES):
Warning - socket_bind() unable to bind address [98]:
Die Adresse wird bereits verwendet
Example 1.
Socket example:
Simple TCP / IP server
This example shows a simple talkback server.
Change the address and port Change the address and port variables to suit your setup and execute.
You may then connect to the server with a command similar to: telnet 192.168.1.53 10000 (where the address and port match your setup).
Anything you type will then be output on the server side, and echoed back to you.
To disconnect, enter 'quit'.
#! / usr / local / bin / php -q ?php error_reporting (E_ALL); / * Allow the script to hang around waiting for connections. * / set_time_limit (0); / * Turn on implicit output flushing so we see what we're getting * as it comes in. * / ob_implicit_flush (); $address = '192.168.1.53'; $port = 10000; if (($sock = socket_create (AF_INET, SOCK_STREAM, 0)) 0) {echo "socket_create() failed: reason: ". socket_strerror ($sock). "\n";} if (($ret = socket_bind ($sock, $address, $port)) 0) {echo "socket_bind() failed: reason:". socket_strerror ($ret). "\n";} if (($ret = socket_listen ($sock, 5)) 0) {echo "socket_listen() failed: reason: ". socket_strerror ($ret). "\n";} do {if (($msgsock = socket_accept($sock)) 0) {echo "socket_accept() failed: reason:". socket_strerror ($msgsock). "\n"; break;} / * Send instructions. * / $msg = "\nWelcome to the PHP Test Server. \n ". "To quit, type'quit '.
To shut down the server type 'shutdown'.\n"; socket_write($msgsock, $msg, strlen($msg)); do {if (FALSE === ($buf = socket_read ($msgsock, 2048))) {echo "socket_read() failed: reason: ". socket_strerror ($ret). "\n"; break 2;} if (!$buf = trim ($buf)) {continue;} if ($buf == 'quit') {break;} if ($buf == 'shutdown') {socket_close ($msgsock); break 2;} $talkback = "PHP:
You said '$buf'.\n"; socket_write ($msgsock, $talkback, strlen ($talkback)); echo "$buf\n";} while (true); socket_close ($msgsock);} while (true); socket_close ($sock);?
Example 2.
Socket example:
Simple TCP / IP client
This example shows a simple, one-shot HTTP client.
It simply connects to a page, submits a HEAD request, echoes the reply, and exits.
?php error_reporting (E_ALL); echo "h2 TCP / IP Connection / h2 \n"; / * Get the port for the WWW service. * / $service_port = getservbyname ('www', 'tcp'); / * Get the IP address for the target host. * / $address = gethostbyname ('www.example.com'); / * Create a TCP / IP socket. * / $socket = socket_create (AF_INET, SOCK_STREAM, 0); if ($socket 0) {echo "socket_create() failed: reason:". socket_strerror ($socket). "\n";} else {echo "OK.\n";} echo "Attempting to connect to '$address' on port '$service_port'.. ."; $result = socket_connect ($socket, $address, $service_port); if ($result 0) {echo "socket_connect() failed.\nReason: ($result) ". socket_strerror($result). "\n";} else {echo "OK.\n";} $in = "HEAD / HTTP / 1.0\r\n\r\n"; $out = ''; echo "Sending HTTP HEAD request.. ."; socket_write ($socket, $in, strlen ($in)); echo "OK.\n"; echo "Reading response:\n\n"; while ($out = socket_read ($socket, 2048)) {echo $out;} echo "Closing socket.. ."; socket_close ($socket); echo "OK.\n\n";?
Prev
Home
Next
snmpwalkoid
Up
socket_accept