# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/en.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP Manual
Prev
Next
(PHP 3, PHP 4)
strtok() splits a string (arg1) into smaller strings (tokens), with each token being delimited by any character from arg2.
That is, if you have a string like "This is an example string" you could tokenize this string into its individual words by using the space character as the token.
Example 1. strtok() example
$string = "This is an example\nstring"; / * Use tab and newline as tokenizing characters as well * / $tok = strtok($string," \n "); while ($tok) {echo "Word=$tok br "; $tok = strtok(" \n ");}
Note that only the first call to strtok uses the string argument.
Every subsequent call to strtok only needs the token to use, as it keeps track of where it is in the current string.
To start over, or to tokenize a new string you simply call strtok with the string argument again to initialize it.
Note that you may put multiple tokens in the token parameter.
The string will be tokenized when any one of the characters in the argument are found.
The behavior when an empty part was found changed with PHP 4.1.0.
The old behavior returned an empty string, while the new, correct, behavior simply skips the part of the string:
Example 2.
Old strtok() behavior
$first_token = strtok( '/ something',' / '); $second_token = strtok(' / '); var_dump ($first_token, $second_token); / * Output: string(0) "" string(9) "something "* /
Example 3.
New strtok() behavior
$first_token = strtok( '/ something',' / '); $second_token = strtok(' / '); var_dump ($first_token, $second_token); / * Output: string(9) "something "bool(false) * /
Also be careful that your tokens may be equal to "0".
This evaluates to FALSE in conditional expressions.
See also split() and explode().
Prev
Home
Next
strstr
Up
strtolower