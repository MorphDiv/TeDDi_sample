# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	conversation
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	ca
# source:	https://ca.talkbank.org/data-orig/CMU/08/owen.cha
# copyright_short:	https://sla.talkbank.org/TBB/ca
# copyright_long:	CABank: MacWhinney, B., & Wagner, J. (2010). Transcribing, searching and data sharing: The CLAN software and the TalkBank data repository. Gesprachsforschung, 11, 154-173.
# sample_type:	whole
# comments:	NA
oh wow, a bunch of stuff is an illegal memory reference now . 8052_12305
yeah the we have to explicitly check for null . 12305_15732
when we compute the address of a struct and stuff like that . 15732_18870
oh my god . 18870_21183
⌈xxx .
⌊also, he thought about that case that I was saying 20684_24399
right . 25680_27250
where if you allocate like an array of arrays . 27250_28736
okay . 28736_29600
and you get a bunch of null array pointers that's ⌈invalid so .
⌊yeah . 32451_33194
yeah so whenever we +... 33194_34763
so in the IR there are a bunch of places where I get 34763_37818
and after I get that we just have to check for ⌈null . 38811_42692
⌊well . 42692_43352
you can just read from the address (..) to do an implicit check . 43352_46779
I guess . 46779_48265
you can . 48265_49296
like a compare ? 49296_50001
yeah . 50001_51154
there might even be an instruction cuz it's six eighty six 51154_53838
oh like (..) die if it's null ? 55119_56112
yeah . 56112_57060
um . 57060_58257
whatever we can do that in the end . 58257_60115
what was that case you were talking about 60115_61684
um (..) for (..) array bounds checking . 63170_68166
so <instead of> (..) like instead of (..) doing 68166_73906
and then like compare with zero . 80054_82162
and then C move less than something 82162_85423
oh (..) ⌈okay yeah . 87030_91571
⌊so if it's less than zero 91571_92603
otherwise it'll be fine . 95203_97144
and that will make the control flow a lot better . 97144_99828
okay . 99828_101025
it'll also make the instructions shorter . 101025_103088
right . 103088_104286
⌈um . 104286_106803
⌊that's why it it'll be much more efficient 106803_110518
oh also allocation with new tau of N 112337_116257
what what does it do now if you try to do that ? 118403_122573
like ⌈new (..) int brackets minus one . 122684_127021
⌊it'll +... 127021_127680
what does it do ? 127680_129166
I think so it 129166_131561
⌊ oh wouldn't it +... 134162_136186
but calloc is +... 136186_136846
calloc is a ⌈signsig . 136846_138043
⌊signsig it's is unsigned, isn't it ? 138043_139242
so that would be . 139242_139985
so it would be something ginormous (4.0) . 139985_141221
yeah . 141221_141676
it would be ≋ 141676_142585
hhh . 142585_143162
the max int . 143162_143800
okay . 143800_144814
uh which is +... 144687_147371
two to the thirty one minus one . 147371_150138
at least (4.) . 150138_150881
well . 154103_155112
times the size of the object (..) 155112_156582
well no sixteen gigs can't +... 162814_166324
oh no size T is sixty four bits isn't it . 166324_170039
no he said it was thirty two . 170039_171813
what ? 171813_172557
I thought it was the machine word size . 172557_174126
well in the handout it said that 174126_176355
xxx . 178379_180442
that doesn't make a whole lotta sense . 180442_181928
I know but that's what he said . 181928_184118
I I'm pretty sure that's wrong actually . 184118_186802
it could be . 186802_188659
I remember I tried looking once xxx . 188659_196832
anyway um (...) so this array layout stuff 196832_206453
um (..) so (..) I guess the implication is that the typechecker 208516_216606
cuz that doesn't go . 221519_223748
I think so . 223748_224696
there's a whole section on that . 224696_228373
it just the array layout section ? 228373_231112
yeah . 231112_231633
it just says arrays generated by C cannot be returned to L
blah dee blah . 235653_236396
so (..) it doesn't ⌈say what to do . 236396_238337
⌊ xxx (..) so it's unspecified . 238337_241847
it doesn't say what to do about it . 241847_243045
so it's unspecified . 243045_245812
yay . 245812_246927
unspecified behavior (..) um . 246927_251672
right so these optimizations . 251672_255116
um most of I say we d ehh huh . 255116_262364
we've already done a couple of them . 262364_263478
we've already done instruction selection all right . 263478_266162
yeah parts of it ⌈xxx . 266162_267648
⌊wait aligning jump targets ? 267648_271446
seriously ? 271446_271984
xxx . 271984_274047
um (..) generating good code for conditions or loops . 274047_278012
aligning jump targets . 278012_279702
you can do that with an assembler directive (..) 279702_281932
so that doesn't cost us anything so let's just do that . 284987_287549
yeah . 287549_288702
so anyway we've already done most of that 288702_290643
um (...) .
xxx .
I dunno if we were really brave we could try like using L E
yeah that should be it could be a uh final pass thing
well it depends on all the operands being registers . 315214_318475
so (..) I mean as long as I the code is generated in a
right well I mean (...) for something like an expression two
yeah I don't know . 340645_343284
I'm sure that the register allocation in G C C is really
I don't really want to know (..) how bad G C C is . 356370_364710
uh constant folding and propagation (..) I think we should do that
common subexpression elimination I don't want to do that . 377054_381883
yeah how many do we have to pick from that list ? 381883_383491
three . 383491_384522
so we've already got one of um and I say j I just say we do
well we kind of so we have instruction selection (..) but we also
really ?
well that's like the first thing on the list . 397776_404174
well no that's different . 404174_405122
there was one thing I did to improve instruction selection for
oh yeah the munching into a specific thing thing (..) um (..)
so we can look at maybe doing register coalescing . 416845_423986
whate whatever if it's in the notes then fine but I don't
yeah also size T is long unsigned int . 429438_434018
so that's sixty four bits . 434018_436247
what is he smoking ? 436247_438187
I dunno . 438187_439302
look on the fish machines . 439302_441902
xxx find the file . 441902_448052
what it's (..) oh but it has to be sixty four bits !
that doesn't make any sense it's like the size of a thing in
and like if it's sixty four on mine it'll be sixty four . 455277_458909
it does not make any sense . 458909_460850
the whole point of sixty four bit is so you can have stuff that's
so then (..) negative one as an unsigned sixty four bit int is what
terabytes ?
er no . 470343_472944
four gigs squared . 472944_475999
no sk squared (..) no it's . 475999_480086
it's so minus one interpreted as unsigned is two to the
two to the sixty five minus one (...) it's sixty four bit . 492142_497259
what no minus (..) oh y oh so that's two to the thirty two
sixty four bits of all ones . 501141_505078
no it depends on what your it depends on what size the
so that would make it sixty four bits of ones (..) wait no it
it passes it as thirty two bits to calloc ? 524751_528838
yeah . 528838_531067
well then it'll be (..) two to the thirty two . 531067_533502
minus one (..) times . 533502_538786
the size of the stuff . 538786_540727
so two to the thirty is one gig . 540727_546383
two to the thirty two minus one is about four gigs . 546383_549271
so it's four gigs times the size of the thing . 549271_551956
yeah (..) so if it's an int it's sixteen gigs . 551956_554473
whatever it . 554473_556786
the point is that doesn't make sense . 556786_558559
ah that's disgusting though (..) so like every time (...) you
well (..) for all of this we basically just seg fault if it's
yeah I guess but still . 578993_581761
so we can add a new I R thing that's like (..) if this
every time you dereference an array ? 585393_588115
that's bad . 588115_590716
well every other language does it . 590716_592823
I suppose . 592823_595135
um (..) anyway other optimizations ?
what other ones are there ? 595135_601451
um (...) constant propagation . 601451_610201
that's part of (..) constant folding . 610201_612142
um (..) I dunno (..) my main concern is how we're gonna come up
I know like these are pretty well defined
I could (..) I'm pretty sure I could go on for like half a page
the if thing was like (...) just obvious . 630923_636950
so (..) um . 636950_641697
and remember I said about the if thing (..) early on I was like
the jump less than or equal whatever . 648467_651811
yeah I know . 651811_652842
you were like nnn . 652842_653957
I just forgot how awesome pattern matching was . 653957_655732
okay . 655732_659984
oh should describe each optimization how you implemented it any
he didn't provide us a benchmark suite . 670592_672821
whatever . 672821_676415
seriously . 676415_677280
maybe when he releases the tests . 677280_680335
also maybe we can just make a thing that's only effective on
yeah . 683474_684793