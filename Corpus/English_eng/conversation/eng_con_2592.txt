# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	1998
# mode:	written
# genre_broad:	conversation
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	ca
# source:	https://ca.talkbank.org/data-orig/MICASE/lel/lel295ju035.cha
# copyright_short:	https://sla.talkbank.org/TBB/ca
# copyright_long:	CABank: MacWhinney, B., & Wagner, J. (2010). Transcribing, searching and data sharing: The CLAN software and the TalkBank data repository. Gesprachsforschung, 11, 154-173.
# sample_type:	whole
# comments:	NA
let me ask a question . 1795_2495
&=pause_while_setting_up_computer_projection xxx operate the power .
is that readable ? 3275_11395
no +/.
+, yeah +/.
+, with the lights off you can read it +... 12755_21515
that's okay ? 21515_21895
I can make it a little bigger too . 22135_23515
it's much better if it's green on black or yellow on black but at the moment I can't find where they've hidden the &-uh colors so I won't &-uh waste time on that +... 24605_33665
but I do wanna do some stuff on there so okay &-um &=pause_while_adjusting_computer little bigger +... 35825_49705
is that doable ? 52995_53695
(0.6) who's tried to compile code on maize ? 54835_61995
just one two +... 63475_64475
lemme show you an interesting error . 67475_69315
&-um you know when you compile code you get all these crazy error messages and you look at them and you say what the hell does that mean . 70535_77215
&-um they actually all say something most of them are even understandable if you look at them for long enough . 77915_85735
(0.6) &-uh (0.6) xxx (0.6) big mistake never use Windows NT . 116815_118475
(0.7) still can't see xxx (0.9) don't move Daniel (0.9) okay . 118915_142035
close enough . 142515_144195
&-um (0.9) .
the font's too big .
yeah but if the font's &~s smaller then you can't read it easily . 152795_155375
okay this'll do . 155935_157595
(0.13) okay so here's some interesting C codes . 162235_171635
&-uh trust me they work . 172275_173335
let's compile them . 173975_174975
(0.9) now watch it'll work and I'll be embarrassed . 184525_185825
it's supposed to break . 186125_186705
(0.5) fast isn't it ? 187585_192265
work +/.
+, okay here we go . 192285_194445
and we get this funky error message which says +... 195585_197965
&{l=READING CC prime dot c@l line twelve error seventeen oh five function prototypes are an ANSI feature . 200885_207725
&}l=READING okay and several people have sent me messages and several people have seen this in the labs . 208585_212285
and &~i what the hell's it saying ? 213135_215335
anybody have a guess ? 215715_216535
it's actually telling you something . 217955_219675
&-uh you got something xxx . 220215_221175
that wasn't much of a guess . 222295_223675
&{l=READING are an ANSI feature . 225915_227395
&}l=READING and I keep talking about how C is this family of languages and there's traditional C and ANSIC and objective C and all these different things called C . 227795_236335
this compiler is telling you that it is not an ANSIC compiler . 237055_240955
it turns out that on a_lot_of the CAEN not all but a_lot of the CAEN &-um Hewlett Packard workstations the default compiler is not an ANSIC compiler . 242255_254095
which means you hand it our codes which are written in ANSIC and it gives you little error messages . 254775_258955
this is a common problem . 260855_263215
Visual Studio will give you some of the same problems if it thinks your code is something other than ANSIC it sometimes tries to guess it'll give you mysterious error messages your code will be perfect . 263915_274995
and it will be yelling at you that it's not right . 275595_277435
okay ?
a_lot_of compilers have that problem . 278035_280435
&~th there are all these different slightly different versions of things and the people who wrote this compiler or the people who installed it by default didn't think you would want to write ANSIC they're fools because no one should use anything other than ANSIC anymore but no matter . 281645_298065
it can be fixed . 298605_299365
(0.9) this compiler you can tell it to use ANSIC with this little minus capital a@l little a@l thingy called a flag . 307865_315325
okay ? 316565_316665
&-um that's true of all the compilers you deal with . 317565_321805
you may get on a Sun sometime Sun is pretty +//. 322105_325105
the Sun workstations are pretty standard xxx you get the ANSIC compiler but you may get on a Sun workstation and run your code and it gives you an error message and you're sure there's no error . 325535_336375
okay ?
Suns just two years ago by default wouldn't compile ANSIC you hadta tell them specially compile ANSIC for me . 338215_344955
so the point is these slight differences among versions of the language do impact us in a practical way . 345695_352675
the various compilers make different assumptions about &-uh &-um what you want it to do . 353155_358175
they're very presumptuous . 358595_359595
okay . 360955_361295
so I wanted to address that since &-uh some of you had experienced it . 363075_367155
(0.6) now we'll turn the lights back on and talk about loops . 368815_375035
&=pause_while_raising_projection_screen okay . 391945_392285
so this is what I wanna talk about today . 392985_395205
loops . 396605_396645
we talked about loops a little bit when we talked about just algorithms in general without looking at computer code we talked about algorithms we talked about ways of +//. 396945_408425
we talked about the idea of writing down steps of instructions which will then be executed by a machine . 408545_413405
carried out by a machine to solve some interesting problem . 414285_417285
and we mentioned sometimes you wanna loop . 417665_419325
you wanna repeat something over and over . 419455_421535
subject to some control . 422375_423715
&=pause_while_writing over and over . 428175_443215
&=pause_while_writing and we'll sort_of call out three particular kinds of loop . 449055_452575
and I'll list them now and then we'll describe them in in a bit of &-uh of detail there's something called a while@q loop . 453235_459935
and by the way you'll find words in +//. 462395_464655
you'll &-uh +//. 464795_464975
I'm gonna use words while@q do_while@q for@q you'll find these words in C . 465175_469095
but I'm not talking about C I'm talking about algorithms in general . 469475_473855
okay the while@q loop is a a fairly standard construct in developing algorithms . 474265_479945
as is something called a for@q loop as is something called a do_while@q . 480565_483425
the names vary a little bit but the ideas of what they do are the same . 483885_487565
what the while@q loop lets us do is execute a bunch of code over and over as long as some condition is true . 488705_495145
&=pause_while_writing as long as some condition is true . 513075_515255
&=pause_while_writing at the top of the loop . 517195_526255
okay ? 527275_527295
and I'll fill in what that means a little bit in a minute . 527395_529835
&=pause_while_writing what's a condition ? 545585_546385
well we already know what conditions are we've seen conditions when talking about branching constructs . 546565_551365
if X is less than Y that's a condition &=pause_while_writing do_while@q . 551565_559205
this is exactly the same as a while@q loop except the condition is is checked at the bottom of the loop . 559465_566905
&=pause_while_writing as long as some condition is true . 582385_584545
&=pause_while_writing at the bottom of the loop . 586605_593005
&=pause_while_writing it's basically the only way they differ . 594305_600645
one of them is checking something at the top and I'll show you what top means but it's the top of the loop the other is checking at the bottom . 601165_608385
is at the bottom of the loop . 609345_610665
&=pause_while_writing and what the for loop does is it repeats a chunk of code over and over a specified number of times . 611725_634925
&=pause_while_writing so it repeats a block .
&=pause_while_writing I organize my loops this way all the time I think I'll sort_of make that a new structure . 672885_676965
for example when we look at Matlab Matlab has something called a for@q loop but it's really like what most languages call a for_each@q loop . 678585_685485
but we'll see that in the fullness of time . 687145_689525
for the moment if I can say that for the moment think about for loops as loops that simply repeat something a specified number of times . 691665_700105
let's look at a a while@q loop +... 701575_703195
here's what while loops look like . 703915_708295
not what C while loops look like just what the idea of a while@q loop looks like . 708715_712435
we have some condition &=pause_while_writing and while it's true I execute some block of code called the loop body . 713665_731725
&=pause_while_writing we loosely refer to this as the top of the loop sort_of right above the loop body and this is the bottom of the loop . 746465_752265
&=pause_while_writing a task to do I check some condition . 753245_771285
and that can depend on quantities that I've just calculated these are +//. 771585_775205
this condition isn't determined a_priori it's determined as the program runs . 776245_780725
I come into this loop I check the condition . 782265_784165
if it's true I do this work whatever it is . 784485_787385
<okay and> I come down to the bottom of the loop I come back to the top of the loop and I check the condition again . 788265_794085
and if it's true I do this . 794565_796105
do this work . 796485_796885
I get to the bottom of the loop I come back to the top and I check this condition again and if it's true I do this . 797525_802665
so I keep doing this over and over until eventually I do this I come to the bottom of the loop come back up here and the condition is false . 803265_812045
then I don't do this I'm just done with this whole +... 812965_815605
construct and I go on to whatever my next instruction is in my algorithm . 817425_820305
so I keep executing this loop xxx as long as the condition is true at the top of the loop . 821225_827325
doesn't matter if the condition becomes false in the middle of the loop I only check it at the top . 828745_833965
that sometimes leads to some confusion . 835685_837525
only check right here at the top doesn't matter what it does in the middle +... 837865_841125
such a beast easily leads to the dreaded endless loop . 841865_847685
I could very easily have some condition like while one is equal to one do this . 850035_855775
then I just do this forever . 856815_858455
because one is never not equal to one so my condition's always true I just stay here forever . 859595_865555
my program never exits &-uh in the old days that sucked up your CPU allocation and and you &-uh crashed and burned and it was real money . 866115_875775
these days your computer just sits there and people +... 875925_878965
loosely say things like it's locked up well it's not locked up it's just doing that over and over . 879265_885605
&=pause_while_erasing_board computers love to do things over and over . 886425_891445
&=pause_while_erasing_board those semantics again +... 906685_908265
this body is executed over and over . 911845_913845
&=pause_while_writing until the condition is false at the top . 914565_928065
&=pause_while_writing I don't know what word that is but &~s it's interesting . 947355_949515
&=laughs:multiple &=pause_while_writing if that condition is always true this loop runs forever . 950695_958575
&=pause_while_writing a condition that's always true is for example one equals one or lots_of others . 960155_972895
it's very easy to trap yourself . 973095_974835
<you have> you have to watch for that very carefully . 976615_978555
the loop will run forever unless maybe I can have an escape hatch . 979955_984715
&=pause_while_writing that most languages provide &-um is a way to jump out_of the middle of this loop . 985355_1001195
and this is called breaking out_of the loop . 1002895_1004975
&=pause_while_writing (be)cause we break out_of the middle of the loop . 1014755_1017435
&=pause_while_writing somehow . 1023575_1024075
&=pause_while_writing and frequently we want to write code that does that I'll show you a sample of a code that does that . 1028535_1032555
and so the general picture is I do this as long as this condition is true but I might have an escape hatch in here in the middle someplace where I might wanna say boy things are all bollixed@n$part up let's quit out_of +//. 1033915_1044455
let's quit this it's not working and I might have some way to jump out . 1044735_1047915
we'll see in C there's a statement called break that does exactly that +... 1048535_1052175
let's write an algorithm with a while@q loop . 1053075_1056535
&=pause_while_writing I'm gonna write an algorithm to check primeness of a number . 1075785_1078485
is primeness a word +..? 1078725_1079625
well I guess it's +//. 1082945_1084225
I guess it is a word (be)cause it's being tape recorded and it'll be put out in this big &-uh compendium and everything so primeness is now a word . 1084345_1090565
&=pause_while_writing it's my word so I can spell it any way I damn well please . 1102385_1104845
&=laughs:multiple I'm gonna have a number I'm gonna call it let me be consistent here &=pause_while_reading I have a number I'm going to call it num ooh how original . 1105665_1126505
&=pause_while_writing I'm gonna check the primeness of num . 1135435_1136935
sounds like the title of a science fiction novel . 1137355_1140075
how am I gonna do this ? 1140855_1143975
I'm gonna write an algorithm to do this . 1144115_1145875
I'm gonna first deal with the special case +... 1147035_1149435
if num is one it's prime . 1152215_1154975
&=pause_while_writing okay and I'll be done and I'll stop . 1159615_1163295
&=pause_while_writing if num is not one I'm gonna do something else down here . 1167935_1170715
so otherwise num is not one . 1172435_1173915
what I'm gonna do it's not the slickest thing to do when testing for primeness but it works and it will illustrate the idea I'm just gonna take every possible divisor . 1174795_1183895
from num minus one num minus two all the way down to one gonna call these D and I'm gonna see if I can divide this number by that divisor . 1185065_1197165
if I can divide num by a divisor and that divisor is not one then the number is not prime (be)cause I just divided it by something . 1198145_1207025
so let me set this up D will be my divisor I'll let it start at num minus one I don't wanna check num because I know num is divisible by num +... 1208495_1220835
&-um so I'll start one less and then I'll do a while@q loop . 1222435_1227915
while num is not divided &=pause_while_writing by D okay so there's my condition while the number is not divisible by my divisor check the next divisor and I'll simply do that by saying go down by one . 1230805_1254985
(0.7) so I'll come in here let's give a an example say num is ten I'll come in here I'll say my first divisor is nine +... 1262185_1270485
is ten divisible by nine ? 1273645_1275125
no +... 1275225_1276025
so num is not divisible by nine so do this go on down to the next divisor eight . 1277565_1281965
okay ? 1284245_1284325
is ten divisible by eight ? 1284945_1287085
no go on down . 1287205_1288285
eventually it'll have counted down to is ten divisible by five ? 1288505_1292525
you betcha . 1292625_1293245
so I'll have I'll (ha)ve come in I'll set D to five come to the top of the loop and I'll check this condition . 1294125_1302645
is ten divisible by five ? 1303505_1304925
yes . 1305065_1305405
okay ? 1306565_1307025
so the condition's not true num's not divisible by D and I'll fall out_of the loop . 1307225_1313565
I'll be done . 1314165_1314725
once I'm done I just wanna find out what D is . 1316555_1319655
if D is one lemme not write it that way lest it confuse with C syntax then num was prime . 1322235_1330395
&=pause_while_writing otherwise it's not . 1331675_1336815
if D is not one then D is bigger than one and it's not prime . 1337895_1342155
oh I'll squeeze it in here . 1345455_1346595
&=pause_while_writing otherwise not prime +... 1347275_1352175
the reason I'm guaranteed that this loop will finish is I know everything's divisible by one . 1356355_1361975
eventually this divisor will be one we'll have walked all the way down to one then I'll get out_of this loop because num is divisible by one . 1362555_1371495
so <I don't have> I don't have any concern about the endless loop and when I'm done I can +//. 1372695_1377335
I actually have two interesting pieces of information . 1377755_1379935
I know if this num is prime or not and I actually know its largest divisor . 1381595_1385695
(be)cause I fall out_of this loop soon as I find a divisor of num . 1386455_1390295
so let's look at the lovely C code to do that &=pause_while_lowering_screen see if this is readable otherwise xxx this looks okay . 1391475_1402675
okay here's some C code to do this +... 1461965_1463825
and now I've gone from my algorithm to C code and that means I hafta deal with all of the annoying details you hafta deal with when you're writing real code . 1464045_1476485
so I hafta include header files like S T D I O dot H . 1476625_1481985
I hafta declare a main function . 1482005_1483505
I hafta do all this garbage which only exists for the computer and not for my algorithm +... 1483685_1488325
I print out using print f@l I ask the code to &-uh +//. 1489975_1493115
the code asks for a positive number uses scan f@l to get that number (0.5) scan f@l percent i@l ampersand num so I read in a number right there if the number's negative or zero code stops okay ? 1493575_1512095
that's sort_of all just details of getting information in . 1512595_1515255
here's where the real algorithm starts there's the special case . 1516095_1519255
if one equals num print out that it's prime and we're done . 1520135_1524295
(0.10) here's the rest of it (0.6) oh look I don't have a laser but I have a red crayon &=laughs:multiple initialize the divisors first set D to num minus one and then here's the while@q loop . 1533495_1549795
this is C's version of the while@q loop this is how you express the while@q loop in C . 1550595_1554315
while parens condition then a block of code between an opening bracket and a closing bracket . 1557345_1563425
inside that is the loop body which is just D equals D minus one . 1564805_1568245
the condition says num percent D not equal to zero . 1568925_1572665
well num percent D that's the divisor of number num divided by D if that's zero they divided each_other and I wanna stop . 1574325_1582945
if that's not zero there's a remainder D +//. 1583615_1587255
num is not divisible by D and I keep going . 1587735_1589775
once I'm done I have this if that I have down here . 1591275_1594295
if D is bigger than one print f@l &-uh such and such is not prime and I actually also print out D because it's the largest divisor . 1594915_1605135
of that number . 1605495_1605955
so that's interesting . 1606315_1606935
if D is &-uh equal to one then I'm in the else clause down here and I print out that the number is prime . 1608545_1615765
(0.21) compile this beast (0.5) notice +... 1636205_1640485
you've got Visual Studio you've got the command+line version of Visual Studio which you called c@l out showed you CC at the beginning of the class on some of the machines . 1641205_1651805
my compiler was called EGCS which is pronounced eggs the guy in the back of the room won't like that . 1652425_1657905
&-um there are lots_of C compilers they're all made by different people but they all do the same thing . 1658225_1663845
okay I've compiled my program I can run it . 1664915_1667035
it asks for a positive integer I give it minus two . 1668615_1673375
so it doesn't do anything . 1674635_1675735
it looked and it saw I gave it minus two and it's +//. 1676475_1678975
didn't &-uh +//. 1679295_1679755
refused to check its primeness . 1680495_1682015
let's give it an interesting number twenty three checks if it's prime it says it is prime . 1682575_1687195
okay well everybody knew that . 1688495_1689635
but how about one thousand two hundred and three ? 1690415_1693055
well it's not prime it's divisible by four hundred and one as everyone could immediately see . 1694065_1698765
&=laughs:multiple okay .
okay so the point is the code works it does what I say it doesn't do +//. 1699445_1704065
it doesn't &~wor I don't know that it works because I ran it on a_couple_of cases and it came out right . 1704225_1709265
I know that it works (be)cause I've looked at this algorithm and I've thought about it . 1709925_1713285
and I'm sure that that algorithm will find primes +... 1714065_1716945
I don't care how many times I run a test through this code I'll never be sure . 1719635_1724015
but if I look at that algorithm carefully I can be sure about it . 1725675_1728875
(0.7) and it's a nice usable while@q loop . 1731015_1749515
so once again I have this piece of code not a complicated piece of code in this case but it could be as complicated as you want I can put anything in there . 1737975_1748235
piece of code that I wanted to be executed as long as a condition was true . 1749015_1752455
lemme show you another code with a much more complicated thing inside this while@q loop . 1753435_1759115
okay ? 1760055_1760275
and and I'm really excited by prime numbers today so I'm gonna show you another prime number code . 1760455_1765135
(0.8) this one I think it should do xxx the code I just showed you &-um it asks for a number you give it the number it checks if it's prime if it's prime it says yes if it's not prime it says no and then it ends . 1777715_1788515
well maybe I'd like to check a_lot_of numbers for primeness . 1789315_1791855
what I would like to do then is write a code that looks like this . 1792695_1797135
(0.10) &=computer_company_website_on_overhead by the way I do not get any money for these shameless advertisements sorry about that . 1807665_1811725
sorry that I don't get money and sorry that I'm exposing you to shameless advertisements +... 1811725_1816525
(0.6) here's the way this code is gonna look now this code in some sense is is is less pure as an algorithm (be)cause really what I wanna deal with is some issues of interacting with the person . 1825545_1835865
I wanna write a code that looks like this . 1836445_1837945
&=pause_while_writing I want this one to keep asking for input until the &-uh human running the thing inputs garbage . 1850565_1859165
&=pause_while_writing so I'm gonna write a code that looks like this now . 1860925_1868745
&=pause_while_writing get num from human . 1870625_1874985
that's an interesting phrase . 1877485_1878425
&-um &=pause_while_writing lemme actually number the steps inside here just so you can see them distinctly . 1900825_1905245
and then after you've done that get another number . 1907105_1910025
&=pause_while_writing it's gotten another num from the human and it checks if it's positive or not . 1911625_1924945
if it is checks if it's prime and asks for another number . 1925745_1928865
and just keeps going . 1929245_1930045
what makes this loop stop ? 1931205_1932445
the human types in something that's not positive or else is gibberish . 1933345_1937365
so we get out_of this loop when the number that comes in from the human is not positive +... 1938425_1943525
now +... 1944565_1946705
this is a few lines of C code involving some scan_fs@n and print_fs@n I didn't write them out in detail here (be)cause I don't care about those details when I'm thinking about my algorithm . 1949205_1958325
same with this these are pretty much the same lines . 1959915_1962195
this is interesting what goes here ? 1962995_1964595
that . 1967215_1967475
&=pause_while_writing right there . 1971915_1973975
the whole thing . 1974455_1975075
essentially as is +... 1975875_1977055
now I'm not gonna write it in here because that would obscure this if I had all that detail written right here it would be harder for me to look at this and be sure it's right . 1980705_1992745
now it's not too bad it's not really very many lines but here is a task all of its own and I really don't need to think about how this task occurs while I'm describing this task . 1993425_2005645
I just need to know +//. 2006305_2006985
somehow I need a way to check if a number's prime or not . 2007005_2009925
okay ?
I want to think that way I want to separate problems that can be separated the human mind is finite and I can't think about everything at once . 2011245_2020565
neither can you . 2022105_2022785
(0.7) let's plunge ourselves into darkness once again and look at this new code called prime loop . 2029605_2036145
or prime loops or something like that . 2036905_2039485
(0.20) okay all the standard garbage include standard IO start main somehow declare some variables num and D then print f@l input a positive integer negative to quit in in large red letters . 2059235_2071635
it scans that in . 2072335_2073355
now notice what I'm doing . 2073775_2074835
this is a C detail not an algorithm detail but it's an important one +... 2076455_2080135
scan f@l percent i@l address of num so I ask the &-uh machine to read input from the keyboard and try and interpret it as an integer . 2083835_2091455
if it succeeds +... 2092495_2093515
scan f@l will return one . 2094295_2096595
so I can check did scan f@l equal one or not ? 2097415_2100695
if it did I'm okay but if it didn't the user typed gobbledygook . 2100975_2105475
okay ? 2107175_2107275
what I do in that case right here is I set num to minus one . 2107435_2110915
because that'll force the rest of the code to quit . 2111555_2113915
so I check whether scan f@l worked or not . 2115015_2117195
that's pretty important when you +//. 2117335_2118815
when a human is typing input into the machine . 2119375_2121615
(be)cause humans sometimes make mistakes +... 2121895_2123555
then +...
below that here's this big while@q loop . 2130355_2134115
it's this loop . 2134655_2135675
it's just this loop . 2136455_2138715
while num is bigger than zero now I threw in some bells and whistles print out some information and stuff but it's really just this loop while num is bigger than zero and then all of a sudden we see this task . 2139815_2154155
check if the number's prime or not and it looks exactly like this . 2154555_2157815
check the special case of num equals one . 2158615_2160935
set D to num minus one . 2162275_2164255
do this while@q loop while &~w while num percent D is not zero . 2165105_2169485
reduce D by one throughout +//. 2170165_2172585
through that loop . 2172905_2173345
when I fall out_of the bottom of that loop I know if &-uh the number's prime or not and I print out that answer . 2173745_2181385
so I've literally cut and pasted the C code that I wrote for this and stuck it right into this step . 2182385_2188745
(0.7) once I know if the number is prime or not it's time to get a new number . 2195805_2198865
(0.5) if one is not equal to scan f@l then scan f@l tries to get a number from the keyboard . 2200005_2207845
if scan f@l succeeds it returns one (be)cause it read one number nothing happens here I'm at the end of the outer while@q loop I go back up make sure the number that came in is positive find out if it's prime get another number end of the outer while@q loop go on up check the number's positive and so on . 2208555_2228495
on the other hand if scan f@l failed here (be)cause somehow someone typed gobbledygook I execute a statement called break . 2229635_2237515
I said we could have an escape a little escape hatch from inside a loop and here's an example of it . 2238235_2245395
that's why I wrote it this way just to show an example of break if scan f@l didn't get a good number we should just quit . 2245535_2252715
what this break does is jump out_of the enclosing while . 2253515_2257475
so it jumps out_of this loop and we're done we execute the statements that follow which just print quitting and finish up +... 2259795_2267335
couple of things one I have a while@q loop inside a while@q loop . 2271155_2275295
I can have <while loops inside> while loops inside while loops . 2276135_2278855
I can put loops inside each_other . 2279375_2282015
that's frequently very useful for a_lot_of things we do it is crucial . 2282355_2288035
you can't do a_lot_of very interesting things without putting loops inside loops . 2288535_2293775
all I've done here is put this loop inside that loop . 2294475_2301535
second was the fact that once I had this I made sure it worked I knew it worked I could pretty much chuck it right in here and I knew that any errors I had with this code would be due to this other stuff not this . 2306265_2320445
I trusted this step . 2321005_2322145
this step was right . 2322825_2323825
&=pause_while_lowering_projection_screen oh let me run that code so let me once again plunge us into darkness (0.5) (be)cause I especially want to show you what happens when I input garbage . 2330145_2342545
what I'm talking about . 2343785_2344685
&=pause_while_setting_up_computer okay input a positive integer . 2359465_2360865
alright &-uh twenty three's good says it +//. 2361665_2364245
is it prime it checks okay &~i it did this . 2364545_2367745
<it did this> it did this it told me that it's prime and now it's down here . 2368105_2373085
and I give it another number . 2373985_2374965
hundred and twenty seven boy I'm good at picking primes aren't I ? 2376505_2380665
it got a number went up to the top the number was positive so it checked if it's prime or not and told me . 2382875_2389955
and now it's sitting down here again waiting for another number . 2391135_2394195
hundred and twenty three it's not prime +... 2395495_2400355
I input a hundred and twenty three we went up here it's positive it checks if it's prime or not it says oh oh I'm &~s &-uh a hundred and twenty three is not prime it's divisible by forty one . 2402235_2413015
now if I put in say minus thirty +//. 2414295_2418435
twenty three it quits . 2418895_2419975
okay because it's set up the following way . 2420875_2424455
it just read minus twenty three it went up here asked is minus twenty three positive no so don't do the loop body just jump down we're done with this step do whatever comes next . 2425085_2437645
(0.6) let's run it again I'm very curious about &-uh ten thousand two hundred and thirty four darn it's not prime asking for a positive integer . 2443005_2454325
now what prevents me from typing this ? 2454745_2457345
AWF semicolonoids@n okay which I type all the time nothing prevents me from typing that and nothing prevents that from getting sucked in to this step right here . 2458845_2469925
get num from human . 2470565_2471585
that's done with that scan f@l . 2472365_2473885
but the scan f@l easily looks at AWF semicolonoids@n and says you are not a number . 2474525_2480545
and so that scan f@l does not return one it did not read a number and I hit that break statement . 2482465_2488705
I jump out_of this loop right here and go on to the next step . 2489445_2493285
okay ? 2494205_2494265
very important to check your +//. 2494665_2497125
the return from that scan f@l . 2498185_2499845
if I hadn't checked the return from that scan f@l this code would actually enter an infinite loop and run forever . 2500045_2506205
I'd lose all control . 2506905_2507965
okay ? 2508805_2509065
yeah . 2510185_2510525
what if you write &-uh one hundred and seven A B C xxx . 2510805_2513265
tell me what you want ? 2513785_2516505
one hundred and seven A B C . 2517065_2518545
one hundred and seven A B C that's actually a good question . 2518965_2522005
what's it gonna do ? 2523225_2523885
&=unintelligible_answers:multiple no it's not gonna quit it's gonna find this number . 2526065_2528505
it's gonna ignore this junk but when it +//. 2529405_2531485
when scan f@l starts looking for a number I told it to look for a number it just looks for digits until it sees something that's not a digit and then it says okay that was the number and it'll ignore this . 2532045_2541725
it'll do a hundred and seven . 2541825_2543285
okay ? 2544285_2544505
what if it was one oh a@l seven ? 2545385_2548325
I'm sorry ? 2548625_2549185
one oh a@l seven ? 2549385_2550265
hang on on that one (be)cause it did something interesting . 2550645_2552825
okay I told you it would do a hundred and seven and it did hundred and seven is prime and then it said input a positive integer where was it it was right here and then suddenly it quit I didn't type anything . 2554195_2566895
xxx again .
hundred and +... 2567135_2571375
make it exactly the same hundred and seven A B C . 2571375_2575795
I will hit enter once it'll tell you a hundred and seven is prime and quit . 2576695_2580215
what did it do ? 2581015_2581535
well it saw &~tho the digits one zero seven then it saw something that wasn't a digit but took a hundred and seven as a number everything was cool then it went back to read more information . 2582375_2593215
well that A B C doesn't disappear . 2594235_2595915
that A B C was &~w sitting there waiting to be read in . 2597235_2600035
it started trying to read a number immediately got A and it said this isn't a number can't read a number . 2600855_2608115
and it stops . 2608555_2609035
okay +..? 2609695_2609855
sorry yours was . 2612835_2613715
one oh a@l seven . 2614275_2618595
one oh capital a@l seven . 2618595_2619415
any predictions ? 2619795_2621695
&=unintelligible_answers:multiple ten is not prime and stop . 2623695_2626295
because it's gonna read this number &~s it looks at this oh that's a digit cool that's a digit cool that's not a digit that must be the number ten then that A doesn't go away it still sitting there waiting to be read . 2626555_2637895
so right here I read ten it's positive I check that it's prime it's not right here I then try and get more input and it actually reads that A and says this is not a number quits . 2638845_2653945
okay ? 2654945_2655185
yeah .
can we go back to the C code issue xxx +/. 2655725_2658205
sure +/.
+, the &-um scan f@l thing I don't quite understand how that's working . 2658865_2661305
+, ⌈ this is +//.
+, ⌊ how is ⌋ I mean .
we need two of these that's what we need . 2664965_2667085
here's the deal +... 2668065_2670365
scan f@l (0.5) some of this is detail that that &-uh a &~li I'm gonna give you a little detail that we're gonna talk about again later &-um (be)cause some of this is detail about the way C ANSIC is structured to treat data coming in . 2675245_2694585
we have this scan f@l +... 2694925_2697145
oops I turned the lights up too bright you can't see sorry +... 2700605_2703005
let's try this &=pause_while_moving_projector_screen is that readable ? 2711035_2711615
the &~i the idea behind these lights was we could use the blackboard on the edges and still read that I don't know if it worked . 2713115_2719295
&=pause_while_writing the code comes to this point scan f@l percent i@l address of number . 2720555_2728955
what that makes it do is it starts reading every key I press . 2729395_2733255
okay like one two three A B C . 2734195_2737895
scan f@l has been told (be)cause I told it look for a number . 2739325_2742345
look for an integer . 2743205_2743805
well <that's part of an integer> that's part of an integer that's part of an integer this is not . 2744225_2750205
so it stops reading data after it's read that and it's got a hundred and twenty three . 2750905_2756745
but I pressed those keys . 2757685_2759585
that data is still sitting there waiting to go into the code . 2760065_2762565
hasta do with the way C actually is structured to treat data coming in it just has these characters flying in at it +... 2763895_2770615
okay ?
so it knew to stop reading the number (be)cause it saw an A but it's still waiting because maybe the next thing you're gonna do is ask for a character . 2772455_2779875
ask for a letter . 2780735_2781275
in this code the next thing we do is we go around the loop and we hit this again . 2782375_2787655
so I've told it to look for an integer the next thing coming in is the A that I already typed . 2788835_2794255
and nothing is forgotten nothing is thrown away . 2795655_2797675
it reads the A and it says that's not the start of an integer . 2798835_2802015
I'm being given garbage . 2803255_2804275
so scan f@l fails it reads nothing . 2805155_2807635
it does not put any information in the place where this variable stores its bit pattern doesn't read anything doesn't put anything there . 2808555_2817035
instead this function returns a value of &~zer of &-um zero . 2818005_2825125
I really should check that but it doesn't return one that's the important thing . 2826105_2830585
it's either zero or minus one I forget . 2830925_2832725
what if you type a space between one of those ? 2833565_2836505
hang on a second . 2836605_2837165
&-um so the point is that scan f@l returns a value and this whole bit of text right here scan f@l double quote percent i@l comma ampersand num close+parens that whole thing evaluates to zero (be)cause it didn't read anything . 2837525_2857545
one is not equal to zero . 2858405_2860025
that's a true statement so I get out . 2861665_2864325
something bad happened . 2864685_2865665
(0.6) you &~nee you may need to go and actually play with this code and look at it a little to see this . 2871425_2875445
&=students_getting_up_to_leave lemme answer this guy's question . 2876005_2877305
I was just asked what if I do this one twenty three space A B C . 2878585_2884945
any predictions ? 2885685_2886285
&=unintelligible_answers:multiple what ? 2887725_2888825
put in another xxx +/.
+, <whoa whoa> whoa whoa whoa .
silence silence . 2890865_2893185
what ? 2893425_2893565
put in another +/. 2893685_2894265
+, oh after the space ? 2895545_2896505
+, yeah +/.
+, oh okay that's good . 2896745_2898045
(0.5) seven space five . 2902065_2903625
tells me they're both prime . 2904925_2905945
okay ? 2906945_2907165
it read the seven it saw the space it knows that's not part of a number so it got seven it came around the loop tried to read another number the five was already sitting there . 2907825_2918285
there's actually nothing very magical about pressing that return key . 2919345_2923445
oh there was a hand up ⌈ over here ⌉ . 2925105_2926305
⌊ do a decimal ⌋ .
what ? 2926865_2927265
try a decimal .
alright . 2927545_2928765
one last test for those who wanna stay . 2929105_2930905
(0.5) &-uh how about ten point two . 2932305_2937925
it gets to ten it sees <the period> the period is not part of an integer stops scanning the ten got the ten comes around again trying to read an integer it sees a period . 2938765_2951885
period is not part of an integer it quits . 2952385_2954485
&=students_leave:SS 