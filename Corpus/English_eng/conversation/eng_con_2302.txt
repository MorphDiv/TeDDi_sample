# language_name_wals:	English
# language_name_glotto:	English
# iso639_3:	eng
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	conversation
# genre_narrow:	NA
# writing_system:	Latn
# special_characters:	NA
# short_description:	ca
# source:	https://ca.talkbank.org/data-orig/CMU/08/megan.cha
# copyright_short:	https://sla.talkbank.org/TBB/ca
# copyright_long:	CABank: MacWhinney, B., & Wagner, J. (2010). Transcribing, searching and data sharing: The CLAN software and the TalkBank data repository. Gesprachsforschung, 11, 154-173.
# sample_type:	whole
# comments:	NA
ok so I'll just record . 0_2593
um . 2593_4533
what were we talking about ? 4533_7333
I was gonna check the kernal spec . 7333_9173
I can't figure out any of (th)em that get past the t_i_d other
a p_c_p . 14891_15598
oh p_c p_i_d . 15598_17916
p_i_d yeah sorry . 17916_19260
yeah I did a search and there's no p_i_d in the whole thing . 19260_23552
like the letters p@l i@l d@l . 23552_27212
um . 27212_29284
xxx this but . 29284_33144
exec yields sleep none of those have p_i_d-s . 33144_38774
xxx doesn't have a p_i_d just a status pointer . 38774_43307
oh by the way it turns out status is an integer not a +... 43307_48015
yeah I noticed ⌈that . 48015_49873
⌊yeah so I changed that . 49873_51646
xxx well then what about your t_c_b-s like . 51391_57647
t_i_d-s ? 57647_58590
when you're vanishing and you're not the last . 58590_60414
yeah . 60414_61390
thread . 61390_62004
yeah . 62004_62740
can't someone try to look you up while your vanishing . 62740_65286
(..) yeah ? 65286_72093
um but when do you want to look someone up for yield . 72093_79422
as so many times we're passing in a t@l and castwoi runflag only
yup . 84780_85152
at which point in time what happens ? 85152_87381
you either get put into a queue um or 87381_92211
but if you're in a queue then you're not in vanish . 93325_96259
right . 96259_96919
or no you might be in a queue ? 96919_100263
in which case they just yell to you when you &~f finish vanishing . 100263_104228
I'm worried about times when you have to look up somebody . 104228_107283
mmhm . 107283_108808
and work with them but they're t_c_b-s been freed or 108808_112895
well we remove it from the hashmap <before its um> before its
yeah what if I look it up ? 123380_125980
then it yields to us (..) or somehow (..) some sort of vanish . 125980_132296
or if they're looking it up while we are removing it from the
but then that's just a hashmap block . 137126_138862
I think we should definitely lock the ⌈hashmap both maps . 138862_142289
⌊well . 142289_143941
if we wouldn't set up doing the scheduler 143941_144973
mmhm . 147861_148687
so there's really no waste conditions with the scheduler and other
actually no there are . 153517_154593
(be)cause the other processes other processors . 154593_156960
yeah . 156960_157869
um but the p@l has a mutex inside of the um scheduler . 157869_168356
so we can't lock ⌈up the . 168356_170957
⌊oh hm . 170956_174754
I mean if we use the processor a lot . 174754_176695
hm . 176695_179378
but . 179378_180327
(...) uh definitely think that we should lock it . 180493_195315
uh . 195315_196430
because if you're in the middle of removing 196430_200434
(...) hm slightly tricky . 207614_222929
that was good sushi by the way . 222929_226273
thanks . 226273_228669
um I mean it wasn't good just delicious . 228669_232756
&=laughs oh ok . 232756_234363
um hm (..) so there's really two places we look up t_i_d-s . 234363_253272
castwoi and in uh ⌈scheduler . 253272_256782
⌊scheduler ? 256782_257154
and both are locked 257154_261695
mmhm . 273584_274494
so what if we lock the add and the remove with a processor lock↓ ? 274494_281757
I'm fine wi(th) that . 281757_284153
um . 284153_289355
the only thing is if we lock add or remove with a processor lock ? 289355_293070
yeah . 293070_293813
um when we go to remove uh 293813_297240
mmhm . 307149_307892
and then we go to uh we get a timer interupt 307892_311319
we also I we also have the disabled context switch . 313259_316314
we also do dis so we disable context switch 316314_319286
I'm tempted to always link those together but there are cases 321061_323745
but yeah yeah 325110_329318
yeah that (woul)d be fine for that . 333776_336088
eh I'm really okay with it . 336088_339682
okay . 339682_341047
yeah . 341047_343563
um do you interface a bunch of fails with vanishes ? 343563_350456
standardin no ? 350456_354171
because the errors that I've been running into with Simics now 354171_359994
I haven't really started to debug yet . 361851_363132
I uh took me a bit of time to get everything up . 363132_368045
I mean I do have a bunch of vanishes 368045_369985
in exception handlers okay that could . 372214_374443
in the page fault general protection fault 374443_377498
yeah (be)cause um Simics 385672_389553
some really high number . 399047_400123
really . 400123_401237
and I'm like huh . 401237_402390
wait is it ? 402390_404042
maybe two hunrded and thirty . 404042_405984
triple fault really ? 405984_407099
um so . 407099_409821
yes it does vanish inside of exception file exception handler . 409821_415477
but that's so weird that it would treat xxx . 415477_418737
slightly weird . 418737_419442
oh something else is um . 419442_421299
I'm thinking hang on this 421299_427615
mmhm . 431990_432899
we kinda have code around that you know that initializes them and 432899_436614
and that feels slightly dangerous . 437274_442021
okay . 442021_444705
I don't know . 444705_445819
I mean its not so many that I feel like we actually needed like 445819_450156
it just xxx . 451975_455236
like right now &~t t_c_b-s are only created in two places 455236_459406
not thread fork just fork . 462273_463947
t_c_b-s ? 463947_465722
oh you said b_c_p-s . 465722_467208
sorry I meant to say t_c_b . 467208_468777
okay . 468982_469725
t_c_b-s are in uh third fork and . 469725_470180
and the initial . 470180_473152
initial and p_c_b-s are in fork and initial . 473152_475260
right . 475260_476867
and that's probably not going to change . 476867_478065
hm . 478065_479346
okay . 479346_481658
that's cool . 481658_485745
das ist cool . 485745_488013
hm . 488013_493668
yeah that shouldn't change . 493668_494950
triple fault (th)at's weird . 494950_498172
(be)cause like there's a bunch of different things 498172_503949
hm . 505807_507664
I mean the weird thingy is that 507664_509688
mhmm . 515344_516458
is way out of bounds 516458_517490
which is not . 519885_521288
is it two two something ? 521288_522653
wait is it an i_d_t ? 522653_525170
did it say i_d_t or does it say like l_d_t or g_d_t ? 525170_529833
i_d_t . 529833_530372
an(d) does it say general protection fault ? 530372_533177
maybe . 533177_534170
yeah that's my code prints out general protection fault 534170_537885
yeah yeah that's right . 543002_544777
and that i_d_t is printed in hex . 544777_547749
it's in hex ? 547749_553239
oh that's really out of range then . 553239_555347
yeah I think that's I'm not sure where that's coming from . 555347_562610
I think it might be coming from a vanish . 562610_566408
is it two two zero ? 566408_567977
I think so yeah . 567977_570085
that's coming from +... 570085_571821
is it whenever you call shell ? 571821_574543
or whenever you set up the int ? 574543_576651
I was getting the exact same thing . 576651_578137
alright . 578137_578880
I was getting . 578880_580161
well . 580161_582595
I don't know which one that was from . 582595_586105
I initially I was the one that set up the p_c_b correctly in um the
okay . 593452_594734
so xxx anything and actually no it would get it +... 594734_598699
it was weird what happened was +... 598699_601921
so I forgo(t) I didn't do that correctly . 601921_603407
so I didn't setup who the queues correctly . 603407_605469
mmhm . 605469_606174
and uh I would get into a infinite loop 606174_608979
mmhm . 615872_616987
and then it would check it to see its valid . 616987_618723
and it would dereference it . 618723_619549
that would cause pace page fault . 619549_621035
xxx and ⌈eventually that would . 621035_623802
⌊and it would skip the call to p_d_e . 623802_624462
ah because it tries to dereference a p_d_e 624462_630034
I should check and make sure the p_d_e is in kernal memory . 631232_633917
okay . 633917_634781
that's what the problem is there . 634781_636517
I mean fixing the init is fix that . 636517_639861
maybe we should make a note of that just so we don't forget it . 639978_642002
yeah . 642002_642745
we should like record our conversations you know xxx xxx . 642745_646088
&=laughs so that we can just play (th)em back later as notes . 646088_649349
yeah we should definitely listen to them . 649349_651661
that's true . 651661_653147
rip off Megan having to listen to us now . 653147_655665
hi Megan . 655665_656491
&=laughs . 656491_657977
um . 657977_661116
dududu . 661116_662231
lets vote an(d) just . 662231_664581
oh woah ! 664581_665119
that guy just did an amazing dive . 665119_667348
oh so the i_d_e check in to make sure its in bounds ? 667348_671230
p_d_e . 671230_674119
oh p_d_e sorry . 674119_675355
p_d_e . 675355_677091
okay . 677091_684893
yeah I should probably go over page faults 684893_690549
xxx . 691830_694059
so that we make sure that everything is safe . 694059_700003
you don't run end up in an infinite loop like that . 700003_703513
I'm trying to nap safe for now . 703513_704999
like I checked stock . 704999_706197
I check t_c_b in there . 706197_707805
one to get its p_c_b I check its p_c_b . 707805_709745
yeah . 709745_710656
min . 710656_711399
we should make a corrupted kernel stack 711399_714621
mmhm . 717676_718298
(be)cause this seems to be like common checks like 718298_720156
a canary ? 725440_726350
um a static integer where you put at the beginning of a structure .
oh . 730519_731057
and at the end of the structure 731057_732171
that's interesting . 733907_736258
I've never heard of that . 736258_736880
what would we define it to be ? 736880_740595
just something really weird that wouldn't come up normally . 740595_743074
well that might not come up normally . 743074_745053
it would just be a random integer . 745053_747654
hm . 747654_749761
like canaries in the land mine or uh not land mine . 749761_753726
⌈in a +... 753726_754219
⌊in a yeah . 754219_754962
man I wish that uh +... 754962_757563
was that hexidecimal that you used for the seventeen ? 757563_761073
(be)cause then you could spell Gabe . 761073_762847
dead Gabe . 762847_765243
or Gabe beef . 765243_767594
Gabe beef that'd be cool . 767594_771764
um . 771764_772795
yeah . 772795_775850
yeah . 775850_778079
so the like seventy pages of Japanese culture reading 778079_781877
uhhuh . 782537_783280
turned out to be the wrong reading . 783280_784561
oh no . 784561_786336
I mean it was necessary . 785820_786684
its just we were supposed to read an article 786684_789246
uhhuh . 790028_791597
so oh well . 791597_792257
oops . 792257_792878
it took me seven hours . 792878_794076
I can't read . 794076_796183
anyway so um . 796183_797791
I know the feeling I can't do any of that kind of stuff . 797791_800763
so if I have two mutexes and wait no . 800763_805593
I added one mutex and one semafor . 805593_808937
there already was one mutex 808937_810673
yes . 813395_814221
I added the mutex for queues ? 814221_816617
okay . 816617_817610
you know to for adding those queues 817610_819096
yeah . 823266_824585
um yeah and that seemed to make sense . 824585_829043
when I add somebody's when someone's when I read child ? 829043_834078
mmhm . 834078_835276
um I add its semafor to ours . 835276_838414
okay . 838414_840727
I go through each of the lists 840727_843328
oh okay . 846755_848984
and then I add them onto our lists . 848984_850220
okay that makes sense . 850220_852615
not in that order, but thats basically what I do . 852616_854352
yeah . 854352_854928
I mean first I change their parent . 854928_855754