# language_name_wals:	Japanese
# language_name_glotto:	Japanese
# ISO_6393:	jpn
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Jpan
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/ja.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

以下の記述は、PHP 4でのみ有効です。
基底クラスの関数や変数を参照したり、まだ特定のインスタンスを持たな いクラスの関数を参照したりできると便利であるような場合があります。 演算子:: はこのような場合に使用されます。
上の例では、関数example()がクラスAでコールされていますが、クラスA のオブジェクトはありません。このため、$a- example()のように書くこと はできません。代わりに、example()を「クラス関数」、つまり、そのク ラスのオブジェクトではなく、クラス自体の関数としてとしてコールしま す。
クラス関数はありますが、クラス変数はありません。実際、コールをする 時点ではオブジェクトは存在しません。つまり、クラス関数はどのオブジェ クト変数も使用することはできません。(しかし、ローカル変数やグロー バル変数は使用可能です。)また、$this を使用することはできません。
上の例では、クラスBは関数example()を再定義しています。クラスAの元 の定義は隠され、::演算子を使用してクラスAのexample()の実装を明示的 に参照しない限り利用できなくなっています。これを行うには、 A::example()と書いて下さい。(実際には、次節で示すように parent::example()と書く必要があります。)
この状況では、カレントのオブジェクトがあり、オブジェクト変数を保持 することが可能です。つまり、オブジェクト関数の内部で使用された場合、 $this およびオブジェクト変数を使用することが可能です。