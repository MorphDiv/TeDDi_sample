# language_name_wals:	Japanese
# language_name_glotto:	Japanese
# ISO_6393:	jpn
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Jpan
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/ja.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

パーサと実行は、二つの完全に分割されたステップになりました。ファイ ル中のコードの実行は、ファイル全体と必要なものが全て完全にパースさ れるまで行われません。
この分割により PHP 4では requireやincludeで読み込まれるファイルが 構文的に完全であることが新たに必要となっています。PHP 4では、制御 構造の異なる制御部をファイル境界をまたいで配置することはできません。 このため、 for ループまたは while ループ、 if 命令または switch ブロックをあるファイルで開始し、 else 、 endif, case 、 break 命令を別のファイ ルに置くことはできません。
ループまたは他の制御構造の中で追加のコードを読み込むことは、PHP 4 では、全く問題ありません。制御用のキーワードや対応する波括弧 {...} だけは、同じコンパイル単位(ファイルまたは eval() された文字列)の中に置く必要があります。
しかし、配布されているコードではこうした記法は非常に悪いスタイルで あるとみなされているようなので、この制約の影響は大きくないはずです。
使用ができなくなった他の機能としては、PHP 3ではほとんど使用され ていませんが、requireで読みこまれたファイルから値を返すというもの があります。includeで読み込まれたファイルから値を返すことは PHP 4でも可能です。