# language_name_wals:	Japanese
# language_name_glotto:	Japanese
# iso639_3:	jpn
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Jpan
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/ja.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

do..while ループは、論理式のチェックが各反復の 最初ではなく最後に行われること以外は、 while ループと 全く同じです。通常の while ループとの主な差は、 do..while ループは最低1回の実行を保証されていることです。 一方、通常の while ループは、実行されないかもしれません。 (論理式は各反復の最初でチェックされるので、 最初から値が FALSE である場合はループの実行は すぐに終わります。)
do..while ループの構文は次の一つのみです。
上記のループは必ず一度だけ実行されます。その原因は、最初の反復の後、 論理値のチェックを行った際に値が FALSE と なり($iは0より大きくない)、ループの実行が終了するためです。
優れたCプログラマは、コードブロック中での実行中止が可能な do..while ループの別の使用法について熟知している かもしれません。 これは、 do..while (0)でコードを括り、 break 文を使用する方法です。次のコードは、この方法の例を示しています。
この例をすぐに理解できなかったり、全く理解できなかったりしても 問題ありません。この'機能'を使用しなくても スクリプトコードを書くことができますし、強力なスクリプトでさえ 作成することが可能です。