# language_name_wals:	Japanese
# language_name_glotto:	Japanese
# iso639_3:	jpn
# year_composed:	NA
# year_published:	2014
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Jpan
# special_characters:	NA
# short_description:	GNOME
# source:	https://object.pouta.csc.fi/OPUS-GNOME/v1/raw/ja.zip
# copyright_short:	http://opus.nlpl.eu/GNOME.php
# copyright_long:	http://opus.nlpl.eu/GNOME.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

あらまし
フィルター
汎用
汎用フィルターは他の分類に入れられないフィルターを集めた雑多な袋詰めです。 ふくろのなかみは、



common
common
common
明るさの最大値
概観
明るさの最大値フィルターでノイズを軽減
元画像


画像のどの画素でも、 その明度を周囲 3times;3 の範囲の 8 つの画素のうち最も明るい画素の値に一致させます。 そのため明るい画素が明るい領域に加わってゆきます。 しかし周りが明るいところの暗い画素は消えてしまいます。 全方向拡張により 1 個でも明るい画素があるとそれがもっと大きめの明るい領域に膨らみます。
さらに込み入った画像では明るい領域が拡張され同一物で強調され何やら大粒の画素のモザイクぼかしのようになります。

背景が単色ならこのフィルターはノイズを取り除きます。
フィルターの呼び出し方
画像ウィンドウのメニューより
common
common
common
common
common
common
明るさの最小値
明るさの最小値フィルターの適用例


画像のどの画素でも、 その明度を周囲 3times;3 の範囲の 8 つの画素のうち最も暗い画素の値に一致させます。 そのため暗い画素が暗い領域に加わってゆきます。 しかし周りが明るいところで孤立した暗い画素は 9 個の画素からなる大きな
この画像では検討された画素は赤枠で、 検討された行列は緑の枠で示してあります。 処理のしくみや 3times;3 行列の扱い方については既に理解されているとして話をすすめます。
大きめの暗い領域がつぎのように 1 個の画素の全方向拡張により現れます。
フィルターを 3 回繰り返し適用しました。
さらに込み入った画像では暗い領域が拡張され同一物で強調され何やら大粒の画素のモザイクぼかしのようになります。 ここではフィルターを 3 度かけました。
もちろん背景がその上に描かれたものよりも暗ければ、 やがて背景色が画像全体を覆うことになるでしょう。
画像ウィンドウのメニューより
使用例
テキストを明るさの最小値で拡張
ネオン効果を明るさの最小値で拡張
common
localized
common
common
common
common
common
common
common
common
common
common
common
common
common
common
コンボリューション行列...
ここは数学者の独壇場です。 フィルターはほとんどがコンボリューション行列を使用しています。
コンボリューション (二次元畳み込み) 行列とは何なのでしょう。 数学の小道具をちょっとばかり知っていただければ大まかな理解が可能です。 コンボリューションとは行列式を
コンボリューション行列フィルターは

画像でフィルターはそのあらゆる画素についてつぎつぎと検討します。 そのときの画素を
つぎに簡単な例をご紹介します。
この図の左にあるのが画像の行列です。 各画素の値が書き込まれています。 端緒画素は赤枠で囲ってあります。 カーネルによる処理が及ぶのは緑の枠で囲ってある画素です。 右にあるのがコンボリューションによる結果です。
この計算で何が起きているかご説明いたしましょう。 フィルターはカーネルの作用領域のすべての画素を左から右へ上から下へ順番に読みとります。 カーネルに相応する部分の値とそれぞれ掛け合わされそれらの和を求めます。 端緒画素は (40times;0)+(42times;1)+(46times;0) + (46times;0)+(50times;0)+(55times;0) + (52times;0)+(56times;0)+(58times;0) = 42 となります。 (このフィルターは元画像に直接作用せずその複製に結果を記録します。) 画像のほうでは端緒画素が 1 ピクセル下に移動しました。
画像ウィンドウのメニューより
オプション

行列
これは 5times;5 行列を表しています。 それぞれの数値記入欄に直接任意の数値を入れてください。
約数
計算結果をこの数で除算します。 1 は計算結果を変更しない値ですがめったに使われないでしょう。 行列の大きさである 9 や 25 は画素の値の平均で割ります。
オフセット
この値は除算のあとで加わります。 負の値が出てよい場合に便利です。 ここに負の値も設定できます。
境界
端緒画素が画像の縁にあるとカーネルの一部が画像からはみ出してしまいます。 このときフィルターはどうすべきかを設定します。
左から順に、 元画像、
拡張
カーネルのはみ出した部分は無視されます。
回り込み
カーネルのはみ出した部分は反対側の縁の画素を読み取りますので、 一方の辺で消えた画素がもう一方の辺で復活することになります。
切抜き
画像の縁の画素は変更されず切り抜かれます。
チャンネル
ここでフィルターの作用対象に 1 つまたは複数のチャンネルを選べます。
正規化
このオプションを有効にすると
アルファ加重
このオプションを無効にするとこのフィルターは透明度を考慮しませんが、 ぼかしがかかったときに加工痕が現れるおそれがあります。
カーネル行列の設計は高度な数学の裏打ちがあります。 出来合いのものがウェブ上で見付かるはずです。 それらの例を少しばかりご覧ください。
シャープ化
ぼかし
輪郭強調
輪郭抽出
エンボス加工
島本良太 (SimaMoto,RyōTa) <liangtai\.s16\@gmail\.com>, 2009-2013.