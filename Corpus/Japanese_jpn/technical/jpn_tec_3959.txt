# language_name_wals:	Japanese
# language_name_glotto:	Japanese
# iso639_3:	jpn
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Jpan
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/ja.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

(PHP 3, PHP 4)
指定された引数を format に基づいてバイナリ文 字列にパックします。データを含むバイナリ文字列を返します。
この関数のアイデアは、Perlからのものであり、フォーマット指定用のコー ドは、Perlと全く同様に動作します。フォーマット文字列は、フォーマッ トコードの後にオプションの反復指定用引数が続いている形式となってい ます。反復指定用引数は、整数値または入力データの最後まで反復を指定 する * のどちらかを指定することができます。 a, A, h, H の場合、反復 数はそのデータ引数が取得する文字の数を指定します。反復数が @ の場合、 次のデータを置く場所の絶対位置を表します。その他の場合、反復数はデー タ引数が使われる数を指定し、結果のバイナリ文字列にパックされます。 現在、実装されているものを以下に示します。
a NUL で埋めた文字列
A 空白で埋めた文字列
h 16進文字列, 下位バイトが先
H 16進文字列, 上位バイトが先


s signed short (常に 16 ビット、マシンバイトオーダー)
S unsigned short (常に 16 ビット、マシンバイトオーダー)
n unsigned short (常に 16 ビット、ビッグインディアンバイトオーダー)
v unsigned short (常に 16 ビット、リトルインディアンオーダー)
i signed integer (サイズおよびバイトオーダーはマシンに依存)
I unsigned integer (サイズおよびバイトオーダーはマシンに依存)
l signed long (常に 32 ビット、マシンバイトオーダー)
L unsigned long (常に 32 ビット、マシンバイトオーダー)
N unsigned long (常に 32 ビット、ビッグインディアンバイトオーダー)
V unsigned long (常に 32 ビット、リトルインディアンバイトオーダー)
f float (サイズおよび表現はマシン依存)
d double (サイズおよび表現はマシン依存)
x NUL バイト
X 1バイト戻る
@ 絶対位置まで NUL で埋める
例 1 pack() で文字列をフォーマットする
この結果のバイナリ文字列の長さは6バイト長で、バイト列 0x12, 0x34, 0x78, 0x56, 0x41, 0x42となります。
符号付及び符号無しの区別は関数 unpack() にのみ 影響を与え、関数 pack() は符号付及び符号無しの フォーマットコードに関して同じ結果を与えるということに注意して下 さい。
PHP は内部的に値をマシン依存の大きさの符号付の integer 値として保持することにも注意して下さい。 このように保持するには大きすぎる符号無しの値を与えた場合、 float に変換する際にしばしば期待外れの結果となります。