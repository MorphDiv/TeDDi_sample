# language_name_wals:	Japanese
# language_name_glotto:	Japanese
# ISO_6393:	jpn
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Jpan
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/ja.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHPのリファレンスにより二つの変数が同じ内容を参照することが可能で す。つまり、以下のようなものを実行した場合です。
注意 ここで、 $a と $b は完全に同じ で、 $a が $b を指しているわけ ではなく、その逆でもありません。 $a と $b は同じ場所を指しているのです。
同じ構文は、リファレンスを返す関数や new 演算子で も使用可能です。(PHP 4.0.4 以降)
注意 演算子を使用しないとオブジェクトのコピーが 生成されます。もし $this をクラスの中で使用すると、 この変数は、そのクラスの現在のインスタンスを指します。 無しに値を割り当てるとインスタンス(つまりオブジェクト) のコピーが生成され、 $this はコピーを指すことに なります。この挙動が望ましくない場合もあるでしょう。というのも普通は パフォーマンスとメモリ効率の面から考えて動作するインスタンスは一つ で十分だからです。
@new のように使用することにより、コンストラクタ におけるエラーを @ 演算子を使用することが できますが、これは、 new 命令を用いた場合は 動作しません。これは、Zend Engineの制限であり、パースエラーを 発生します。
リファレンスの第2の使用法は、変数のリファレンス渡しです。この場合、 関数でローカル変数が作成され、コール側の変数と同じ内容へのリファレ ンスとなります。例を示します。
リファレンスの第3の使用法は、 リファレンスによる返り値 です。