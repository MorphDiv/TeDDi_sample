# language_name_wals:	Japanese
# language_name_glotto:	Japanese
# iso639_3:	jpn
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Jpan
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/ja.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

(PHP 3ではなく)PHP 4には、Perlや他の言語とよく似た foreach 構文があります。これにより 配列要素に関する反復処理が容易になります。この構造には、 2種類の構文があります。2番目の構文はあまり知られていませんが、 最初の構文の便利な拡張になっています。
最初の形式は、 array_expression で指定した配列に 関してループ処理を行います。各ループにおいて現在の要素の値が $value に代入され、内部配列ポインタが一つ前に 進められます。(よって、次のループでは次の要素を見ることになります。)
2番目の形式も同様ですが、各ループで現在の要素のキーが変数 $key に代入されるところが異なります。

注意 foreach の実行開始時に内部配列ポインタは、 配列の先頭要素を指すように自動的にリセットされます。 このため、 foreach ループの前に reset() をコールする必要はありません。

注意 foreach は、指定した配列自体に対してではなく、 そのコピーに対して処理を行うことに注意して下さい。このため、 each() 文のように配列のポインタ位置が変更され ることはなく、返される配列要素への変更は、元の配列には反映されま せん。
注意 foreach は、'@' によりエラーメッセージ出力を抑 制する機能をサポートしていません。
既にご存知かと思いますが、以下の文は機能的に等価です。
使用法を示すためにその他の例を示します。