# language_name_wals:	Japanese
# language_name_glotto:	Japanese
# ISO_6393:	jpn
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Jpan
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/ja.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

(PHP 4 = 4.0.3)
xslt_process() 関数は、新規XSLT拡張の中心関数で す。引数バッファの概念により、ほとんど全ての型の入力ソースを用い てXSLT変換を実行可能です。引数バッファは、Sablotron XSLTプロセッ サ(現在、この拡張モジュールがサポートする惟一のXSLTプロセッサ)か ら得た概念です。
xslt_process() 関数で変換する最も簡単な方法は、 XMLファイルをXSLTファイルで変換し、結果を新しいXMLドキュメント(ま たはHTMLドキュメント)を含む3番目のファイルに出力することです。 これをsablotronを行うのは、かなり簡単です。
例 1 XMLファイルとXSLファイルを新規XMLファイルに変換するために xslt_process() を使用する
この機能は優れていますが、特にWeb環境では、結果を直接出力したい場 合があります。そこで、 xslt_process() の3番目の 引数を省略した場合(またはその引数にNULL値を指定した場合)、ファイ ルに書き込む替わりに自動的にXSLT変換後の出力を返します。

例 2 XMLファイルとXSLファイルを結果XMLデータを含む変数に変換するため に xslt_process() を使用する
上の二つのケースは、XSLT変換の最も簡単な場合です。これは、多くの 場合には通用しますが、時々、データベースまたはソケットのような外 部ソースからXMLとXSLTコードを取得する場合があります。このような場 合、XMLまたはXSLTデータを変数に有することになります。 実用アプリケーションでは、これらをファイルにダンプする際のオーバー ヘッドは大きいと言えます。このような場合こそ、XSLT "argument" 構文が役に立ちます。 xslt_process() 関数のXMLおよびXSLT引数としてファ イルの替わりに引数配列( xslt_process() 関数の5番 目のパラメータ)で指定した値に置換される"argument place holders"を指定することが可能です。 以下にファイルを全く使用せずにXMLおよびXSLTを結果変数に処理する例 を示します。

例 3 XMLデータを含む変数とXSLTデータを含む変数をXMLデータ出力結果を 含む変数に変換するために xslt_process() を使用 する
最後に、 xslt_process() 関数の最後の引数は、XSLT ドキュメントに渡したいあらゆる引数です。これらのパラメータは、 xsl:param name="parameter_name" 命令を用いて XSLファイルの中でアクセスすることが可能です。