# language_name_wals:	Japanese
# language_name_glotto:	Japanese
# iso639_3:	jpn
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Jpan
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/ja.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

代入演算子の基本となるものは "=" です。この演算子に関して最初に思 い付く意味は"等しい"であるかもしれません。しかし、そうではありませ ん。本当は、左オペランドに右オペランドの式の値を設定する("得て代入 する")ことを意味します。
代入式の値は、代入される値です。つまり、"$a = 3" の値は、3です。 これにより、以下のようなトリッキーなことができるようになります。
基本代入演算子に加えて、全てのバイナリ演算子および文字列演算子に関 して「複合演算子」があります。この演算子により、式の値を使用し、式 の結果にその値を設定することができます。例えば、
代入は、元の変数を新しい変数にコピーする(値による代入)ため、 片方の変数に対する変更はもう片方に影響を与えないということに注意し て下さい。この動作により、密なループの内側で大きな配列のようなもの をコピーする必要がある場合には問題を生じる可能性があります。 PHP 4 では、 $var = $othervar; 構文により参照による代入をサポートしていますが、PHP 3 ではサポート しません。'参照による代入'は、両方の変数が同じデータを指し、コピー を行わないことを意味します。参照に関する詳細については、 リファレンスの説明 も 参照下さい。