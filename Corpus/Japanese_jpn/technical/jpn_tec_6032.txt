# language_name_wals:	Japanese
# language_name_glotto:	Japanese
# ISO_6393:	jpn
# year_composed:	NA
# year_published:	2014
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Jpan
# special_characters:	NA
# short_description:	GNOME
# source:	https://object.pouta.csc.fi/OPUS-GNOME/v1/raw/ja.zip
# copyright_short:	http://opus.nlpl.eu/GNOME.php
# copyright_long:	http://opus.nlpl.eu/GNOME.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

Hiroyuki Sekihara <hiroyuki\.sekihara\@gmail\.com>, 2010
松澤 二郎 <jmatsuzawa\@gnome\.org>, 2010, 2012_
external ref='figures/jhbuild_sample_dot_output.png' md5='af9fe7edb29fcaefeadfb2f5987aa6e4'
JHBuild マニュアル







JHBuild はバージョン管理システムを利用して、GNOME デスクトップ全体をビルドするのに使用されるツールです。JHBuild は他のプロジェクトをビルドするようにカスタマイズすることもできます。
はじめに
JHBuild は
JHBuild のオリジナルは
JHBuild は、ウェブサイトや FTP サイト上の tarball、Zip アーカイブだけでなく、
JHBuild は、ディストリビューションのパッケージ管理システムを置き換えるものではありません。JHBuild は、インストール先を prefix によって分離することにより、システムの他の部分に影響を及ぼすことなくソフトウェアをビルドするのを簡単にします。
さあ、はじめましょう
JHBuild でソフトウェアをビルドする前に、いくつかのセットアップを実行する必要があります。JHBuild には前提条件となるいくつかのソフトウェアがあるので、モジュールの取得やビルドに必要な、それらのツールをインストールする必要があります。
JHBuild のインストール
JHBuild には Python の実行環境が必要です。Python &gt;= 2.3 がインストールされていることを確認してください。
JHBuild のダウンロードは、

これにより、現在のディレクトリ配下に


上記の手順が正常に終了すると、JHBuild を起動するための小さなシェルスクリプトが、

常に

JHBuild の設定
JHBuild は、設定ファイルによる設定が可能です。設定ファイルのデフォルトの場所は
サンプルの設定では、
設定変数については、

あるリポジトリにたいして、リポジトリの場所を指定するディクショナリ (訳注:Python の辞書型のこと。他言語での連想配列に相当) です。この変数はモジュール開発者にとって便利です。デフォルトでは、JHBuild は匿名アクセスでリポジトリからコードをチェックアウトします。ディクショナリのキーはリポジトリの略称で、値は代わりとなるリポジトリの場所をあらわす文字列です。以下は記述例です。
repos['git.gnome.org'] = 'ssh://

モジュールセットの名前を指定する文字列、または文字列のリスト(配列)です。これは JHBuild に含まれるファイル名(パスと拡張子を除く)、または 外部で管理されているモジュールセットの完全な HTTP URL のどちらでも構いません。HTTP URL のモジュールセットは、ローカルにキャッシュされます。ふたつ以上のモジュールセットに同じ名前のモジュールが存在する場合は、最後のモジュールセットのモジュールが優先します。JHBuild により提供されるモジュールセットは、その時の GNOME の開発リリースに合わせて更新されます。

ビルドするモジュールを指定する文字列のリストです。

ソースツリーを展開するディレクトリを指定する文字列です。

モジュールのインストール先を指定する文字列です。




ビルドの前提条件
モジュールをビルドする前に、いくつかのビルドツールをインストールする必要があります。ビルドするモジュールにもよりますが、共通のビルドツールには、GNU Autotools (
JHBuild の

このコマンドが何かメッセージを表示した場合は、メッセージを参考に、お使いのディストリビューションのリポジトリから必要なパッケージをインストールしてください。さまざまなディストリビューション用の
JHBuild を使用する
セットアップが完了すれば、JHBuild でソフトウェアをビルドできます。設定ファイルの

JHBuild は、各モジュールのダウンロード、configure、コンパイル、そしてインストールを行います。どこかのステージでエラーが発生した場合、JHBuild はメニューを表示して、どうするか確認します。選択肢としては、シェルを起動してエラーを修正する、各ステージからビルドを再実行する、そのモジュールをビルドしない、エラーを無視して処理を続行する、などがあります。
あるモジュールをビルドしなかった場合、そのモジュールに依存するモジュールのビルドも失敗することになります。
以下は、表示されるメニューの例です。
[1] Rerun phase build
 [2] Ignore error and continue to install
 [3] Give up on module
 [4] Start shell
 [5] Reload configuration
 [6] Go to phase "wipe directory and start over"
 [7] Go to phase "configure"
 [8] Go to phase "clean"
 [9] Go to phase "distclean"


もしビルドの途中で JHBuild がキャンセルされた場合、

1つ(または複数)のモジュールを、依存関係を無視してビルドするために、JHBuild は

モジュールの開発を活発に行っているときは、ソースの作業ディレクトリにいることがよくあります。

JHBuild がビルドしようとするモジュールと依存関係、その他のビルドされるモジュールの一覧を取得するには、

特定のモジュールの情報を取得するには、

ビルドせずにソフトウェアのソースをダウンロード、更新だけを行うには、

その後で、JHBuild はソースのダウンロードや更新をせずに、すべてをビルドできます。

JHBuild と同じ環境で特定のコマンドを実行するには、

JHBuild と同じ環境でシェルを起動するには、

JHBuild と GNOME
このセクションは、GNOME のビルド、インストール、および実行に関するガイダンスです。
GNOME のビルド
GNOME をビルドするには、以下に示すいくつかの開発用パッケージが必要となります。
DocBook XML DTD と XSLT スタイルシート。これらは、XML カタログ (
X ライブラリ
Samba の
bzip2 の

ディストリビューションのパッケージをインストールする場合、お使いのディストリビューションに適用できるなら、対応する
単独の GNOME アプリケーションの実行
ここでは、単独の GNOME アプリケーションを実行する方法について説明します。アプリケーションを現在のデスクトップ環境で実行します。アプリケーションを JHBuild で構築した GNOME で実行する方法については、
JHBuild のシェルを起動します。JHBuild のシェルには、必要となるすべての環境変数が設定されています。

実行するアプリケーションが正しいことを確認します。たとえば、次のコマンドで確認します。

アプリケーションを実行します。

あるいは、

GNOME デスクトップ環境の起動
JHBuild GNOME を起動するための新しいアカウントを作成します。ホームディレクトリに保存されたユーザー設定に起因する問題を回避するために、異なるユーザーアカウントで JHBuild GNOME を起動することを推奨します。このマニュアルでは、新しいアカウントを
新しく作成した


JHBuild が動作することを確認します。

GNOME をディスプレイマネージャーから起動するためのセットアップ
JHBuild の GNOME をビルド、およびインストールします。
システムサービスを有効にします。JHBuild GNOME は、

以下の内容で GNOME の起動スクリプト、
#!/bin/sh

GNOME=


ディスプレイマネージャーに新しいセッションエントリを追加するために、
[Desktop Entry]
Name=GNOME (JHBuild)
Comment=This session logs you into GNOME testing session
TryExec=/usr/bin/gnome-jhbuild-session
Exec=/usr/bin/gnome-jhbuild-session
Icon=
Type=Application

ディスプレイマネージャーから GNOME を起動する
JHBuild GNOME を起動するには、ディスプレイマネージャーで GNOME (JHBuild) セッションを選択してから、
Buildbot との統合

Buildbot スレーブ を設定する
Buildbot スレーブは、JHBuild の通常インストールのバリエーションであり、Buildbot マスターへのリクエストを提供します。Buildbot のカスタマイズを追加する前に、JHBuild をセットアップして、ほとんどのモジュールを正常にビルドできるようにしておくことを推奨します。
Buildbot コマンドは、

このステップが1度正常に完了すると、
かわりの設定ファイルを使用することはできません。
jhbuildbot_master = 'build.gnome.org:9070'
jhbuildbot_slavename = 'slavename'
jhbuildbot_password = 'password'


コマンドリファレンス
JHBuild は CVS などのツールに似たコマンドラインシンタックスを使用します。

JHBuild のグローバルオプションは次のとおりです。

デフォルトの

設定ファイルに記述されたモジュールセットではなく、別のモジュールセットを使用します。このオプションは、モジュールセットが JHBuild のモジュールセットフォルダーにある場合は相対パスで指定できます。それ以外の場所にある場合は、絶対パスで指定します。

ユーザーに入力を求めません。無人でビルドを行い、ビルドが中断されないようにする場合に、このオプションは便利です。

コマンドごとのオプションについては、以下で説明します。
autobuild




このオプションは、報告先である JhAutobuild の URL を指定します。

このオプションを指定すると、JHBuild はより詳細に出力します。
bootstrap



利用可能なオプションについては、
build


コマンドラインでモジュール名が指定されなかった場合、設定ファイルの

モジュールをビルドする前に、

モジュールをビルドする前に、

モジュールをビルドした後に、

モジュールをビルドした後に、

モジュールをビルドした後に、

git モジュールにたいしては、モジュールをビルドする前に、
このオプションは、コミットされていないあらゆる変更を削除します (訳注: gitで管理される追跡対象のファイルは削除されません)。

弱い依存関係にあるモジュールをビルドしません。

モジュールをビルドするときに、ネットワークにアクセスしません。ビルドのダウンロードステージ、および更新ステージをスキップします。ネットワークアクセスなしではモジュールをビルドできない場合、ビルドは失敗します。

指定したモジュールをビルドしません。依存関係のビルドをスキップするのに使用します。



リストの先頭からではなく、指定したモジュールから開始します。このオプションはビルドを中断した場合などに便利です。

バージョン管理システムでサポートされていれば、ビルドの前にソースツリーを指定した日時に更新します。ISO の日時フォーマットで指定します。例

Xvfb によりシミュレートされたものではなく、実際の X サーバーでグラフィカルなテストを実行します。

ビルドが失敗した場合に、バージョン管理システムがサポートしていれば、ビルドを再試行する前に、強制的にチェックアウトして

ひとつ以上の依存関係のビルドに失敗した場合でも、強制的にモジュールのビルドを試みます。

ビルドポリシー上ビルドが不要でも、指定のモジュールをビルドします。

依存関係がオプションとなるモジュールは、目的のモジュールをビルドするのに必須ではありません。このオプションはオプションの依存関係にあるモジュールを強制的にビルドします。

指定された相対時間より最近にインストールされたモジュールをスキップします。

インストールされていないシステムの依存モジュールを無視します。単独のシステムの依存モジュールを無視するには、そのモジュールを
make


このオプションは、
buildone



コマンドラインで、少なくともひとつのモジュールを指定しなければなりません。
checkbranches



チェックするブランチを指定します。

clean


利用可能なオプションについては
dot



dot コマンドの出力は、dot ユーティリティにパイプすることにより、PostScript ファイルを生成することができます:

PNG イメージを生成することもできます:

JHBuild dot コマンドの出力例
gui


グラフィカルなインターフェースの描画には GTK を使用しているので、追加のサポートライブラリが必要です。
info


このコマンドはモジュールの名前、タイプ、依存関係、依存するパッケージ、JHBuild で最後にインストールされた日時を表示します。もし可能なら、そのモジュールの CVS リポジトリやダウンロード元の URL などの、具体的な情報も表示されます。
コマンドにモジュールが指定されなかった場合、モジュールセットで定義されたすべてのモジュールについての情報が表示されます。
list




ビルドの依存関係に関わらず、モジュールセットのモジュールをすべて一覧します。

モジュールがブランチとして設定されている場合、モジュール名とともにブランチ名が表示されます。

このオプションは JHBuild にたいして、オプショナルな依存関係の一覧を強制します。
rdepends



モジュールの横に、依存関係のパスを表示します。

指定されたモジュールと直接の依存関係にあるモジュールに、表示を限定します。
run


GNOME をビルドするのに JHBuild を使用する場合、このコマンドは X の起動スクリプトなどで便利です。

指定したモジュールの、ビルドディレクトリでコマンドを実行します。

指定したモジュールの、ソースディレクトリでコマンドを実行します。
sanitycheck


以下のチェックが含まれます:
チェックアウト先とインストール先が書き込み可能か。
必要なビルドツールがインストールされているか。
さまざまなバージョンの
XML カタログに DocBook の DTD と スタイルシートが含まれているか。
shell


このコマンドは次のコマンドと同等です。

このシェルがアクティブなときは、環境変数
 if [ -n "$UNDER_JHBUILD" ]; then
 PS1="[jhbuild] $PS1"
 fi
これにより、あなたの bash シェルは、通常のプロンプトの前に
sysdeps

ビルド中に使用する、インストール済みシステムパッケージの一覧。JHBuild は、これらのモジュールをビルドせずに、代わりにシステムパッケージを使用します。
必須パッケージの一覧。ビルドを始めるにあたり、このパッケージがお使いのシステムで提供されている必要があります。
オプションパッケージの一覧。対応するシステムパッケージが見つからないか、古すぎます。JHBuild は、指定のモジュールをビルドします。




tinderbox




uninstall


update



updateone



設定ファイルリファレンス
設定ファイルの
変数にブール値をセットする場合、以下の例で示す構文が使用されます。
use_local_modulesets = True
変数に文字列をセットする場合、以下の例で示す構文が使用されます。
autogenargs = '--disable-static --disable-gtk-doc'
リストへ設定値をセットする場合、以下の例で示す構文が使用されます。
skip = ['mozilla'、'pulseaudio']
ディクショナリへ設定値をセットする場合、以下の例で示す構文が使用されます。
repos['git.gnome.org'] = 'ssh://username@git.gnome.org/git/'
設定変数

ブール値です。



特定のモジュールで使用するブランチを指定するディクショナリです。あるモジュールのあるブランチで変更を加えている場合に、モジュールセットで定義されたブランチではなく、その変更を加えたブランチをビルドするときなどに便利です。
ブランチの定義の仕方は、バージョン管理システムに依存します。
CVS: リビジョンを指定します。例:
Bazaar: モジュールブランチの URI を指定します。例:
Git: タプル で指定します。先頭要素はオプションのリポジトリ(または None 値)、2 番目の要素はブランチ名を指定します。例:
シンプルな例
branches['modulename'] = (None, 'branchname')
Subversion: モジュールブランチの URI を指定します。例:

ビルドディレクトリの名前を生成するための、

ビルドツリーの親ディレクトリを指定する文字列です。デフォルトは

どのビルドスクリプトを使用するかを指定する文字列です。推奨の設定はデフォルトの

どのモジュールをビルドするかを指定する文字列です。利用可能なオプションは、要求されたモジュールをすべてビルドする

ソースツリーを展開するディレクトリを指定する文字列です。

バージョン管理されているディレクトリにたいして、どのようにチェックアウトを行うかを指定する文字列です。デフォルトは



cvs をサポートするために、どのプログラムを使用するかを指定する文字列です。

ローカルミラーのディレクトリを指定する文字列です。JHBuild は指定されたディレクトリにリポジトリのローカルミラーを作成します。ミラーは複数のリポジトリグループによって共有することができ、ローカルのクローンにたいしてハードリンクが使用されるため領域と時間の節約につながります。





依存ツリーを計算するときに、推奨される依存関係を無視するかどうかを指定するブール値です。デフォルトは

ユーザーと対話するかどうかを指定するブール値です。この値を












モジュールの名前と、

チェックアウトモードをモジュールごとに指定するためのディクショナリです。この設定はグローバルな

モジュールの名前と、

モジュールの名前と、

モジュールの名前とブール値をマッピングするディクショナリです。モジュールに

モジュールの名前と、追加の環境変数と値のディクショナリをマッピングするディクショナリです。モジュールのためにコマンドを実行するときに使用されます。



モジュールセットのあるディレクトリを指定する文字列です。デフォルトは JHBuild のソースの

ビルドの実行を、Linux では

ブール値です。

ネットワークにアクセスするかどうかを指定するブール値です。この設定は CVS モジュールのチェックアウトと更新、および tarball のダウンロードと、モジュールセットの更新に影響を与えます。

通知デーモンを使用して、通知を発行するかどうかを指定するブール値です。

ブール値です。

Zenity を使用して、システムトレイにアイコンを表示するかどうかを指定するブール値です。

ブール値です。

ブール値です。


サブプロセスの出力を、綺麗にプリントするかどうかを指定するブール値です。CVS の出力のみをサポートします。この指定により問題が発生する場合は無効にしてください。デフォルトは

JHBuild がコマンドを実行する前に表示する文字列です。文字列中の



ブール値です。

特定のリポジトリにたいして、かわりのリポジトリロケーションを指定するディクショナリです。この設定変数は、モジュール開発者にとって便利です。デフォルトでは、JHBuild は匿名のリポジトリロケーションから、コードをチェックアウトします。ディクショナリのキーはリポジトリの略称で、値はリポジトリロケーションの文字列です。例:


文字列型です。もし指定された場合、背後のバージョン管理システムがサポートしていれば、JHBuild はビルドの前に、ソースツリーを指定された日付に更新します。ここで指定できるのは ISO の日付書式です。例:

subversion をサポートするために、どのプログラムを使用するかを指定する文字列です。


文字列型です。指定された場合、tarball を



ブール値です。

GNOME のバージョン管理システムから、オンザ フライでモジュールセットを取得するのではなく、JHBuild のソースコードと一緒にチェックアウトしたモジュールセットを使用するかどうかを指定するブール値です。デフォルトは

グラフィックテストを

その他の設定ファイルの構造
上述の変数に加えて、以下の文字列が設定ファイルで指定できます:

環境をあらわすディクショナリです。この環境は JHBuild により 生成されたプロセスに引き渡されます。

os.environ['CFLAGS'] = '-O0 -g'




設定ファイルを処理した後、JHBuild は

モジュールセットファイルの構文
JHBuild は モジュール間の依存関係を XML ファイルに記述します。RELAX-NG スキーマと文書型定義は、JHBuild の
モジュールセットファイルのトップレベル要素は、
モジュールソース
すべてのモジュールの完全な場所を記述するのではなく、いくつかの "モジュールソース" をモジュールセットに記述し、モジュール定義において名前でそのソースを参照するようにします。モジュールセットから冗長な情報を減らすだけでなく、モジュールにたいする別のソースを指定するのも簡単になります (CVS や Subversion では、開発者やユーザーがさまざまなリポジトリアクセス手段を使用するのはよくあることです)。

&lt;repository name="





&lt;branch
 [ repo="
すべての属性には実用的なデフォルト値があり、それらはモジュールとリポジトリの定義に依存します。以下は、一般的な属性についての説明です。



その他の属性については、以下で説明します。
Bazaar
このリポジトリタイプは、Bazaar リポジトリを定義します。Bazaar 1.16 以降を推奨します。
&lt;repository type="bzr" name="launchpad.net"
 href="lp:"/gt;
追加の属性は:
さらに

&lt;repository type="bzr" name="launchpad.net"
 href="lp:"
 trunk-template="~bzr-pqm/%(module)s/bzr.dev"
 branches-template="~bzr-pqm/%(module)s/%(branch)s"/gt;
上記のリポジトリにたいする、
&lt;branch repo="launchpad.net"
 module="bzr"
 checkoutdir="bzr-next"/gt;
&lt;branch repo="launchpad.net"
 module="bzr"
 branch="2.2"
 checkoutdir="bzr-beta"/gt;
CVS
このリポジトリタイプは、CVS リポジトリを定義します。


&lt;repository type="cvs" name="tango.freedesktop.org"
 cvsroot=":pserver:anoncvs@anoncvs.freedesktop.org:/cvs/tango"
 password=""/gt;
追加の属性は:
Darcs
このリポジトリタイプは、Darcs リポジトリを定義します。
&lt;repository type="darcs" name="telepathy.freedesktop.org"
 href="http://projects.collabora.co.uk/darcs/telepathy/"/gt;
Git
このリポジトリタイプは、Git リポジトリを定義します。
&lt;repository type="git" name="git.freedesktop.org"
 href="git://anongit.freedesktop.org/git/"/gt;



&lt;branch repo="git.freedesktop.org" module="swfdec/swfdec"
 checkoutdir="swfdec"
 revision="
Mercurial
このリポジトリタイプは、Mercurial リポジトリを定義します。
&lt;repository type="hg" name="hg.gtk-vnc"
 href="http://gtk-vnc.codemonkey.ws/hg/" /gt;
&lt;branch repo="hg.gtk-vnc" module="outgoing.hg" checkoutdir="gtk-vnc"/gt;
Monotone
このリポジトリタイプは、Monotone リポジトリを定義します。



&lt;repository type="mtn" name="pidgin.im"
 server="pidgin.im" database="pidgin.im.mtn"
 defbranch="im.pidgin.pidgin"/gt;
Subversion
このリポジトリタイプは、Subversion リポジトリを定義します。
&lt;repository type="svn" name="svn.gnome.org" default="yes"
 href="http://svn.gnome.org/svn/"/gt;

&lt;branch revision="gnome-2-20"/gt;

System
このリポジトリタイプは、擬似的なシステムリポジトリを定義するのに使用します。システムリポジトリは、
&lt;repository type="system" name="system"/gt;
Tarballs
このリポジトリタイプは、tarball のリポジトリを定義します。
&lt;repository type="tarball" name="dbus/dbus-python"
 href="http://dbus.freedesktop.org/releases/dbus-python/"/gt;



JHBuild に同梱されているモジュールセットでは、
&lt;branch module="dbus-python-0.80.2.tar.gz" version="0.80.2"
 repo="dbus/dbus-python"
 hash="md5:2807bc85215c995bd595e01edd9d2077" size="453499"gt;
 &lt;patch file="dbus-glib-build.patch" strip="1" /gt;
&lt;/branchgt;
また、tarball の
他のモジュールセットのインクルード
JHBuild では
&lt;include href="

参照されるモジュールセットからインポートされるのはモジュール定義だけで、モジュールソースはインポートされません。複数階層のインクルードもできますが、インクルードのループはできません(今のところループの処理は実装されていません)。
モジュールの定義
モジュールセットファイルで使用できるモジュール定義には、さまざまな種類があり、そのリストは簡単に拡張できます。以下に記載するのは、最も一般的なものです。
基本的にモジュール定義は、モジュールをどうやって取得するかを記述する

モジュールリストを生成した後で、
autotools

&lt;autotools id="




%(srcdir)s/%(autogen-sh)s --prefix %(prefix)s --libdir %(libdir)s %(autogenargs)s

cmake

&lt;cmake id="
distutils

&lt;distutils id="
linux

&lt;linux id="
perl


&lt;perl id="
systemmodule

&lt;systemmodule id="
システムモジュールが pkg-config ファイルを提供していない場合は、依存対象を特定するために


&lt;systemmodule id="
waf



&lt;waf id="
testmodule

&lt;testmodule id="

noxvfb オプションが設定されていない場合、テストのために Xvfb サーバーが起動されます。
metamodule

例えば、meta-gnome-desktop は GNOME デスクトップの主要コンポーネントに依存しているので、実際には完全なデスクトップをインストールするよう JHBuild に指定することになります。
&lt;metamodule id="

非推奨となった要素
cvsroot


&lt;cvsroot name="



svnroot


&lt;svnroot name="



非推奨となったモジュールタイプ
このセクションでは、既存のモジュールセットでは使用されているものの、今後の使用は非推奨の要素について説明します。
tarball
この非推奨な要素は、

&lt;tarball id="



その他の属性、および
スキップするモジュールを、リストで指定します。これは

このオプションは、モジュールセットにおいて依存モジュールとなるシステムパッケージをインストールします。システムパッケージは、
HTML ファイルを出力するディレクトリです。
JHBuild を実行する前に、
推奨の依存関係をビルドしません。
James
Henstridge
C.J.
Adams-Collier
Frederic
Peters
David
Turner
2004、2008
James Henstridge
JHBuild マニュアル v0.5
2008年1月
JHBuild マニュアル v0.1
2007年8月
$
git clone git://git.gnome.org/jhbuild
...
cd jhbuild
./autogen.sh
make install
PATH=$PATH:~/.local/bin
repos
moduleset
modules
checkoutroot
prefix
autogenargs
makeargs
もしこのコマンドが何らかのメッセージを表示した場合、以下の2つのうちどちらかの方法でエラーを修正することができます:

完了したら、

ビルドツールの依存関係には、
jhbuild build
選択:
jhbuild build gtk+
jhbuild build --start-at=pango
jhbuild buildone gtk+
jhbuild update
jhbuild list
jhbuild info gtk+
jhbuild update
jhbuild build --no-network
program
jhbuild run
jhbuild shell
which gedit

gedit &
jhbuild run gedit

/opt/gnome
rm -rf
ln -s /var/run/dbus
rm -rf
ln -s /var/lib/dbus/machine-id
jhbuild bot --setup
jhbuild
global-options
command
command-arguments
--no-interact
jhbuild autobuild
--autogen
--clean
--distcheck
module
--skip=
--start-at=
reporturl
--report-url=
--verbose

--check
--dist
--no-network
tags
--tags=
date
-D
--no-xvfb
--try-checkout
--no-poison
--force
--build-optional-modules
time
--min-age=
-D
--direct
jhbuild buildone
jhbuild checkbranches
branch
--branch=
jhbuild -m gnome-2.20 checkbranches
jhbuild clean
jhbuild dot
--soft-deps
--clusters
jhbuild gui
jhbuild info
-a
-r
-s
--list-optional-modules
jhbuild rdepends
--dependencies
--direct
jhbuild run
--in-builddir
--in-checkoutdir
argument
jhbuild run $SHELL

jhbuild rdepends
uninstall
jhbuild tinderbox
directory
--output=
-C
-N
-f
jhbuild uninstall
jhbuild updateone
branches
buildroot
buildscript
build_policy
checkout_mode
copy_dir
cvs_program
installprog
interact
makecheck
makeclean
makedist
makedistcheck
modulesets_dir
nobuild
nobuild
nonetwork
nonotify
nopoison
notrayicon
noxvfb
autobuild
pretty_print
progress_bar
quiet_mode
skip
sticky_date
svn_program
tarballdir
trycheckout
use_lib64
xvfbargs
os.environ
autotools、gnome-doc-utils がインストールされていない場合は、以下の方法で JHBuild をインストールします:
make -f Makefile.plain
make -f Makefile.plain install
JHBuild の GNOME を実行するには、2つの方法があります:
ネストされたウィンドウ
ディスプレイマネージャ。
GNOME をネストされたウィンドウで実行するためのセットアップ


Xephyr -ac -screen 800x600 :1 2gt; /dev/null &
成功した場合、黒い背景のウィンドウが表示されます。確認したら
以下の内容で GNOME の起動スクリプト

chmod u+x ~/.local/bin/gnome-jhbuild-xephyr-session
GNOME をネストされたウィンドウで実行する


#
環境変数
export DISPLAY=:1
GNOME を起動します:
gnome-jhbuild-xephyr-session
成功した場合は、JHBuild の GNOME が Xephyr ウィンドウに表示されます。不成功の場合は、端末ウィンドウの出力を確認してください。
モジュールをビルドする前に、常に
alwaysautogen
Arch
このリポジトリタイプは、Arch リポジトリを定義します。

&lt;repository type="arch" name="rhythmbox"
 archive="rhythmbox-devel@gnome.org--2004"
 href="http://web.rhythmbox.org/arch/2004"/gt;
Ant

&lt;ant id="
ant でビルドするモジュールの例
arch-archive


&lt;arch-archive name="

