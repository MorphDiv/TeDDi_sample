# language_name_wals:	Japanese
# language_name_glotto:	Japanese
# iso639_3:	jpn
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Jpan
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/ja.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

(PHP 4 = 4.0.5)
udm_find() は成功時に結果リンクID、エラー時に FALSE を返します。
検索を行います。最初の引数はセッション、次の引数はクエリ本体です。 検索の実行は、探す単語を入力し、投稿ボタンを押すだけで可能です。 例えば、"mysql odbc"。この例で引用符は他のテキストから区別するた めに使用されており、クエリに引用符 "を使用する必要はありません。 mnoGoSearchは、単語"mysql" かつ/または単語"odbc"を含む全ての文書 を見付けます。最も大きな重みを有する文書が最初に表示されます。検 索モードにALLを使用している場合、検索は入力した単語(とその他の単 語)を共に含む文書を返します。モードANYを使用している場合、検索は、 入力した単語のどれかを含む文書のリストを返します。より高度な結果 を得たい場合には、クエリ言語を使用することも可能です。この場合は、 検索フォームで検索モード"bool"を選択する必要があります。
mnoGoSearch では次の演算子が使用可能です。
- 論理積。例えば、"mysql odbc"。 mnoGoSearch は、単語 "mysql" および単語 "odbc" を含む全てのURLを見付けます。
| - 論理和。例えば、"mysql|odbc"。 mnoGoSearch は、単語 "mysql" または単語 "odbc"を含む全てのURLを見 付けます。
~ - 論理否定。例えば、"mysql ~odbc"。 mnoGoSearch は、単語 "mysql" を含み、同時に単語 "odbc" を含まない全てのURLを探します。~は、指定した単語 を結果から除外するだけであることに注意して下さい。クエリ "~odbc" は何も見付けません!
() - より複雑なクエリを作成するためのグループ化コマンド。例えば、 "(mysql | msql) ~postgres"。クエリ言語は、簡単で あり、同時に強力です。クエリは通常の論理式と同等と考えて下さい。