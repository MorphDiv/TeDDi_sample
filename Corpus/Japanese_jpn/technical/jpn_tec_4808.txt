# language_name_wals:	Japanese
# language_name_glotto:	Japanese
# iso639_3:	jpn
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Jpan
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/ja.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHP 3 と PHP 4 では、コンストラクタの動作は異なります。PHP 4の定 義の方が明らかに好ましいと言えます。
コンストラクタは、 new によりクラスの新しいインス タンスを作成する際に自動的にコールされるクラス関数です。 PHP 3では、ある関数が、クラス名と同じ名前を有している場合にコンス トラクタになりました。PHP 4では、ある関数が、そのコンストラクタが 定義されているクラスと同じ名前を有している場合にコンストラクタにな ります。これらの違いは僅かですが、重要な違いがあります。(以下、参 照)
この例は、Cart にコンストラクタを加えたクラス Auto_Cart を定義しています。 このコンストラクタは、"new" により新しい Auto_Cart が作成される度に 籠に10番の物を一つ保持するように初期化します。コンストラクタは、オ プションとして引数をとります。これにより、コンストラクタは非常に便 利なものとなります。このクラスをパラメータが指定されない場合でも使 用できるようにするには、コンストラクタに指定する全てのパラメータに デフォルト値を指定して下さい。
@new のようにコンストラクタで発生するエラーの 出力を抑制するために @ 演算子を使用することが 可能です。
PHP 3では、派生クラスとコンストラクタには複数の制約があります。こ れらの制限を理解するために以下の例を注意して御覧下さい。
PHP 3では、上の例でコンストラクタはコールされません。PHP 3の規則で は、「コンストラクタはクラスと同じ名前を有する関数です。」となりま す。クラス名はBであり、クラスBの中にはB()という関数がないため、何 もおきません。
これは、PHP 4では、次のような別の規則が導入された修正されました。 あるクラスにコンストラクタがない場合、基底クラスのコンストラクタが ある場合にはコールされます。上の例は、PHP 4では、 'Aのコンストラクタです br 'と出力されます。
PHP 3では、クラスAの関数 B() は意図されていない場合でも、クラスB のコンストラクタに突然なってしまいました。PHP 3の規則は次のように なります。「コンストラクタはクラス名と同じ名前の関数である。」PHP 3は、この関数がクラスBで定義されているかとかその関数が継承されてい るかどうかは考慮しません。
これは、PHP 4では次のように規則が修正されました。「コンストラクタ は、それが定義されているクラスと同じ名前の関数である」つまり、PHP 4では、クラスBが独自のコンストラクタ関数を持たない場合には、基底ク ラスのコンストラクタがコールされ、「Aのコンストラクタです br 」 と出力されます。
PHP 3 および PHP 4のどちらでも派生クラスのコンストラクタから基底 クラスのコンストラクタを自動的にコールすることはできません。
注意 PHP 3およびPHP 4には、デストラクタはありません。デストラクタの機 能の多くをシミュレーションするには、代わりに register_shutdown_function() を使用します。
デストラクタは、 unset() またはスコープから でることにより、オブジェクトが破棄される度に自動的にコールされる関数です。 PHPにはデストラクタはありません。