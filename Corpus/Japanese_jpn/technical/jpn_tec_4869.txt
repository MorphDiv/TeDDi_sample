# language_name_wals:	Japanese
# language_name_glotto:	Japanese
# ISO_6393:	jpn
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Jpan
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/ja.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

内部関数からエラーを出力するには、 php3_error() を コールする必要があります。この関数は、少なくとも 2 つの引数をとります。 1 番目の引数はエラーのレベル、2 番目の引数はエラーメッセージの (通常の printf() と同じ形式の)フォーマット文字列、 以降の引数はフォーマット文字列で使用するパラメータです。 エラーレベルは次のようになります。
デフォルトで通知(NOTICE)は表示されません。 これは、スクリプト実行時に何かエラーが発生したが、 通常のスクリプト実行を継続できることを示します。 例えば、値が設定されていない変数にアクセスしようとした場合や、 存在しないファイルについて stat() をコールした場合 です。
警告(WARNING) はデフォルトで出力されますがスクリプトの実行を 中断しません。 このエラーは、コール前にスクリプトにより取り除いておくべき 問題があることを示します。 例えば、無効な正規表現で ereg() をコールした場合です。
エラーもデフォルトで出力されます。 関数からリターンした後、スクリプトの実行は中止されます。 このエラーは、メモリ確保に関する問題等の回復不可能なエラーが 発生したことを示します。
パーサエラーは、パーサにより生成されます。ここで表示されるコードは、 あくまでも補完的なものです。
PHP のコアにより生成される点を除いて、E_ERROR と同じです。 関数は、このタイプのエラーを生成しません。
PHP のコアにより生成される点を除いて、E_WARNING と同じです。 関数は、このタイプのエラーを生成しません。
E_ERRORに似ていますが、Zendスクリプトエンジンにより生成されたもの であるというところが異なります。関数は、この型のエラーを生成しません。
E_WARNINGに似ていますが、Zendスクリプトエンジンにより生成されたもの であるというところが異なります。関数は、この型のエラーを生成しません。
E_ERRORに似ていますが、PHP関数 trigger_error() を使用することによりPHPコード内で生成されたものであるというところが 異なります。関数はこの型のエラーを生成しません。
E_WARNINGに似ていますが、PHP関数 trigger_error() を使用することによりPHPコード内で生成されたものであるというところが 異なります。関数はこの型のエラーを生成しません。
E_NOTICEに似ていますが、PHP関数 trigger_error() を使用することによりPHPコード内で生成されたものであるというところが 異なります。関数はこの型のエラーを生成しません。