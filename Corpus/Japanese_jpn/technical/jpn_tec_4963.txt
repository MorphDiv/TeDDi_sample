# language_name_wals:	Japanese
# language_name_glotto:	Japanese
# ISO_6393:	jpn
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Jpan
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/ja.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

PHPのセッションサポート機能は、複数回のアクセスを通じて特定のデー タを保持する手段を実現するものです。これにより、よりカスタマイズさ れたアプリケーションを構築し、自分の Web サイトのアピール度を増加 させることが可能となります。
PHPLIB のセッション管理に精通している場合には、そのコンセプトがPHPの セッションサポートに似ていることに気づくことでしょう。
Web サイトの訪問者にはセッションIDというユニークなIDが割りつけられ ます。このIDは、ユーザー側にクッキーとして保存するか、または、URL に埋め込みます。
セッションサポート機能により、任意の数の変数をリクエスト間で受けわたせる ようになります。来訪者がサイトにアクセスした際、 PHP は特定のセッションIDがリクエストとともに送信されているかどうかを (session.auto_start が 1 の場合は)自動的に、または (session_start() により明示的な、あるいは session_register() により暗黙の) 要求を受けて確認します。 このIDが送信されている場合には、以前保存された変数が再現されます。
全ての登録された変数は、リクエストが終了した後に、シリアル化されます。 未定義の登録変数は、未定義としてマーク付けされます。 後でユーザーがこれらの変数を定義しない限り、以降のアクセスにおいて セッションモジュールにより定義されません。
注意 セッション処理機能は、PHP 4.0 でサポートされました。
注意 セッションを処理している時、 session_register() 関数を使用するか スーパーグローバル配列 $_SESSION へ新しいキーを 追加することにより変数が登録されるまで、セッションのレコードは作 成されないことに注意して下さい。これは、セッションが session_start() 関数により開始されている場合で も真です。
セッションの使用は、セッションデータが対応するユーザのみに見るこ とができることを絶対的に保証できることを意味しません。 これは、重要な情報を保存したり表示する場合に留意すべき重要な事 実です。データをセッションに保存する場合、 この情報を他の誰かが見た場合に発生する損害は何かとか、 このセッションが実際には他の誰かの場合に、自分のアプリケーション がどのような影響を受けるかを常に自問する必要があります。
例えば、他の誰かがあるセッションを得た場合、そのユーザとして フォーラムにメッセージを投稿することができますが、その問題の大き さはどの程度でしょうか? または、彼は、元のユーザの買いものかごにアクセスできるため、その ユーザが注文しようとしていたものを見ることができるかもしれません。 明らかに、薬局よりも花屋の方が問題は小さいでしょう。
このため、重要な情報を処理する場合、有効なセッションかどうかを決 める他の方法を常に用意する必要があります。セッションはセキュアな 認証機構のように信頼できるものではありません。
セッションはセッションIDに基づいており、これは、セッションIDを盗 むことにより、セッションを「盗む」ことができることを意味します。 これは、セッションCookieを使用することにより困難となりますが、 不可能にするわけではなく、依然としてユーザが全てのブラウザウイン ドウを閉じて、セッションCookieを期限切れとすることに依存していま す。また、セッションCookieでさえもネットワークで盗聴されたり、 プロキシサーバにより記録されたりします。
これらの関数は、標準モジュールの一部と して利用可能であり、常に使用できます。
注意 オプションで、Ralf S. Engelschallにより開発されたセッションの保 存用の共有メモリ(mm)を使用することも可能です。 mm をダウンロードし、インストールす ることができます。このオプションは、Windowsプラットフォームでは 利用できません。
PHPのセッションサポートはデフォルトで有効となっています セッションサポートを有効にしてPHPを構築したくない場合には、 configureにオプション --disable-session を指定する必要があります。 セッション記憶領域として共有メモリ(mm)を使用するには、PHPのconfigure に --with-mm[=DIR] を指定します。
Windows版の PHP にはこの拡張モジュールのサポートが組み込まれています。これらの関数を使用するために拡張モジュールを追加でロードする必要はありません。
これらの関数の動作は、 php.ini の設定により変化します。

表 1セッションの設定オプション
セッション管理システムは、 php.ini ファイルに記述可能な多くの設定オ プションをサポートします。以下に概要を示します。
session.save_handler は、セッションに関連す るデータの保存および取得に使用されるハンドル名を定義します。デ フォルトは、 files です。 session_set_save_handler() も参照して下さい。
session.save_path は、保存ハンドラに渡される 引数を定義します。デフォルトのファイルハンドラを選択した場合、 ファイルが作成される場所のパスになります。デフォルトは、 /tmp です。 session.save_path のパスの深さが2より大きい場 合、ガーベッジコレクションは行われません。 session_save_path() も参照して下さい。
この設定を /tmp (デフォルト)のようにどこか らでも読み込み可能なディレクトリのままにしている場合、サーバ上 の他のユーザがこのディレクトリのファイルのリストを取得すること により、セッションをハイジャックをすることが可能となります。
注意 WindowsユーザがPHPのsession関数を使用するためには、この変数を変 更する必要があります。 c:/temp のような有効 なパスを指定するようにして下さい。
session.name はセッション名を指定し、 クッキー名として使用されます。 アルファベット文字のみで指定する必要があります。 デフォルトは、 PHPSESSID です。 session_name() も参照して下さい。
session.auto_start はリクエスト開始時に セッションモジュールがセッションを自動的に開始するかどうかを 指定します。デフォルトは、 0 (無効)です。
session.serialize_handler は、シリアル化また はシリアル化データを復元するために使用されるハンドラの名前を定 義します。現在、( php という名前の)PHP 内部 フォーマットおよび( wddx という名前の)WDDX が サポートされています。WDDXは、PHP が WDDX サポート を有効にしてコンパイル されている場合のみ使用可能です。デフォルトは、 php です。
session.gc_probability は、gc (ガーベッジ・ コレクション)ルーチンが各リクエストにおいて開始される確率をパー セントで指定します。デフォルトは、 1 です。
session.gc_maxlifetime は、データが'ごみ'と みなされてから消去されるまでの秒数を指定します。
注意 デフォルトのファイルに基づくセッションハンドラを使用している場 合、使用するファイルシステムは、アクセス時間(atime)を記録できる 必要があります。Windows FATはこれができないため、 FATファイルシステムまたはatimeの記録ができない他のファイルシス テムで問題を発生した場合は、セッションのガベージコレクト処理を 行う他の手段を用意する必要があります。
session.referer_check には、HTTP Referer に おいて確認を行う文字列を指定します。Refererがクライアントにより 送信されており、かつ、指定した文字列が見付からない場合、埋め込 まれたセッションIDは無効となります。デフォルトは空の文字列です。
session.entropy_file は、 セッションIDを作成する際の別のエントロピソースとして使用する 外部リソースへのパスを指定します。 例としては、多くの UNIX で利用可能な /dev/random または /dev/urandom があげられます。
session.entropy_length は、前記のファイルから 読みこむバイト数を指定します。デフォルトは、 0 (無効)です。
session.use_cookies によりクライアント側にセッ ションIDを保存する際にクッキーを使用するかどうかを指定します。デ フォルトは 1 (有効)です。
session.use_only_cookies は、 このモジュールがクライアント側へのセッションIDの保存に Cookie のみ を使用することを指 定します。デフォルトは、 0 (無効、下位互換性の ため)です。この設定を有効にすることにより、セッションIDをURLに埋 め込む攻撃を防ぐことができます。この設定は、 PHP 4.3.0で追加されました。
session.cookie_lifetime は、ブラウザに送信す るクッキーの有効期間を秒単位で指定します。値0は、"ブラウザを閉じ るまで"を意味します。デフォルトは、 0 です。 session_get_cookie_params() および session_set_cookie_params() も参照して下さい。
session.cookie_path によりsession_cokkieで設 定するパスを指定します。デフォルトは / です。 session_get_cookie_params() および session_set_cookie_params() も参照して下さい。
session.cookie_domain によりsession_cookieで 指定するドメインを指定します。デフォルトでは指定されません。 session_get_cookie_params() および session_set_cookie_params() も参照して下さい。
session.cookie_secure は、 セキュアな接続を通じてのみCookieを送信できるかどうかを指定します。 デフォルトは、 off です。 この設定は、 PHP 4.0.4で追加されました。 session_get_cookie_params() および session_set_cookie_params() も参照して下さい。
session.cache_limiter により セッションページにおけるキャッシュ制御の方法 (none/nocache/private/private_no_expire/public) を指定します。デフォルトは、 nocache です。 session_cache_limiter() も参照して下さい。
session.cache_expire によりキャッシュされた セッションページの有効期間を分単位で指定します。 このオプションは、nocacheリミッタに関しては効果がありません。 デフォルトは、 180 です。 session_cache_expire() も参照して下さい。
session.use_trans_sid は、透過的なセッション IDの付加をするかどうかを指定します。 デフォルトは、 0 (無効)です。
注意 PHP 4.1.2より前のバージョンでは、このオプションは --enable-trans-sid により コンパイル時に有効とされていました。 PHP 4.2.0以降、trans-sid機能は常にコンパイルされます。
URLに基づくセッション管理は、Cookieに基づくセッション管理と比べ てセキュリティリスクが大きくなります。例えば、ユーザは、emailに より友人にアクティブなセッションIDを含むURLを送信する可能性があ り、また、ユーザは自分のブックマークにセッションIDを含むURLを保 存し、常に同じセッションIDで使用するサイトにアクセスする可能性 があります。
url_rewriter.tags は、透過的なセッションIDの 付加機能が有効となった場合に、セッションIDを含めるために書き換 えられるHTMLタグを指定します。デフォルトは、 a=href,area=href,frame=src,input=src,form=fakeentry です。
track_vars および register_globals 設定はセッション変数の保存および回復方法に影響を与えます。
注意 PHP 4.0.3以降、 track_vars は常 にonとなっています。
この拡張モジュールはリソース型を全く定義し ません。
これらの定数は、この拡張モジュールで定義されており、 この拡張モジュールがPHP内部にコンパイルされているか実行時に動的にロー ドされるかのどちらかの場合のみ使用可能です。
Constant containing the session name and session ID in the form of "name=ID".
注意 PHP 4.1.0以降、 $_SESSION は、 $_POST, $_GET, $_REQUEST 等のようにグローバル変数として利用可 能です。 $HTTP_SESSION_VARS と異なり、 $_SESSION は常にグローバルです。そこで、 global は $_SESSION の場合は不要です。 このドキュメントでは、 $_SESSION をあらゆる場 所で使用していることに注意して下さい。もし前者を使用したい場合に は、 $_SESSION を $HTTP_SESSION_VARS で置き換えることができます。
連想配列 $_SESSION のキーは、PHPの通常の変数名 と同じ制限があります。すなわち、数字で始まることはできず、文字ま たはアンダースコアで始まる必要があります。 詳細については、本マニュアルの 変数 の節を参照して下さ い。
register_globals が無効の場合、グローバル連想配列 $_SESSION のメ ンバのみをセッション変数として登録することができます。 回復されたセッション変数は、配列 $_SESSION での み利用可能です。
セキュリティとコードの可読性のために $_SESSION (またはPHP 4.0.6以前は $HTTP_SESSION_VARS )の使用 が推奨されます。 $_SESSION の場合、 session_register(), session_unregister(), session_is_registered() は不要です。ユーザは、 通常の変数と同様にセッション変数にアクセス可能 です。
例 1 $_SESSIONで変数を登録
例 2$_SESSIONで変数の登録を解除する
例 3 register_globalsが有効な場合に、$_SESSIONを用いて登録した後、 変数の登録を解除する
register_globals が有効な場合、全てのグローバル変数はセッション変数として登録するこ とが可能で、セッション変数は対応するグローバル変数として回復されま す。PHPは、どのグローバル変数がセッション変数として登録されるのか を知る必要があるため、ユーザは、変数を session_register() 関数で登録する必要がありま す。しかし、 $_SESSION の場合は、エントリを設定 するだけでこれを行う必要はありません。
$_SESSION を使用し、 register_globals を無効とする場合、自分のスクリプトをPHP 4.2より以前のバージョン で動作させたい場合は、 session_register(), session_is_registered(), session_unregister() を使用しないで下さい。 PHP 4.3以降ではこれらの関数を使用することができます。
register_globals を有効にしている場合は、 session_unregister() を使用する必要があります。 これは、シリアル化されたセッションデータが戻される時にセッション 変数がグローバル変数として登録されるためです。 セキュリティ面と性能面の双方より register_globals を無効とすることが推奨されています。
例 4 register_globals が有効な場合に、変数を登録する
register_globals が有効な場合、グローバル変数と $_SESSION の エントリは、前のセッションインスタンスで登録されたセッション変数 の同じ値を参照することになります。
加えて、 session_register() により新しいセッショ ン変数を登録する場合、グローバルスコープのエントリと $_SESSION のエントリは、次の session_start() まで同じ値へのリファレンスとは なりません。(これは、PHP 4.2より前のバージョンのみに適用されます。) すなわち、グローバル変数への修正は、 $_SESSION のエントリには反映されません。これは、実際には問題にはならないと 思われますが、PHP 4.3では修正されています。
セッションIDの通知を行うためには次の二つの方法があります。
Cookie
URLパラメータ
sessionモジュールは、両方の方法をサポートします。 Cookieは最適ですが、(クライアントがCookieを受け入れない可能性が あるため)信頼性がなく、これに依存することができません。2番目の方 法は、セッションIDを直接URLに埋め込みます。
PHP は、 --enable-trans-sid を付けてコンパイルされた 場合にこの処理を透過的に行います。このオプションは、PHP 4.2以降常 に有効となっています。このオプションを有効にした場合、相対 URI はセッションIDを有するように自動的に変更されます。 もしくは、クライアントが適当なクッキーを送信しない場合に 定義される定数 SID を使用することができます。 SID は、 session_name=session_id の形式または空の文字列です。
注意 arg_separator.output php.ini ディレクティブにより、引数のセパレータをカスタマイズ することが可能です。
次の例は、変数の登録法および SID を用いて他のページに正しくリンク する方法のデモです。
例 5単一のユーザーに関するヒット数を数える
?php echo SID? (short_open_tag が有効な 場合は ?=SID? を使用できます)は、 ユーザがCookieを無効とした場合にセッションIDを保存するために必要 です。PHPのコンパイル時に --enable-trans-sid を指定した場合には、 ?php echo SID? は不要です。
注意 相対URLでないURLは、外部サイトを指していると仮定されSIDが追加 されません。これは、SIDを異なったサーバにもらすことはセキュリティ 上のリスクとなるためです。
セッション情報をデータベースに保存する機能か他の保存法を実装する には、一連のユーザレベルの保存関数を作成し、 session_set_save_handler() を使用する必要があり ます。