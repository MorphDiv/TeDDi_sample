# language_name_wals:	Japanese
# language_name_glotto:	Japanese
# iso639_3:	jpn
# year_composed:	NA
# year_published:	NA
# mode:	written
# genre_broad:	technical
# genre_narrow:	NA
# writing_system:	Jpan
# special_characters:	NA
# short_description:	PHP
# source:	https://object.pouta.csc.fi/OPUS-PHP/v1/raw/ja.zip
# copyright_short:	http://opus.nlpl.eu/PHP.php
# copyright_long:	http://opus.nlpl.eu/PHP.php J. Tiedemann, 2012, Parallel Data, Tools and Interfaces in OPUS. In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)
# sample_type:	whole
# comments:	NA

integer は、Z = {..., -2, -1, 0, 1, 2, ...}という集合 です。
任意精度整数 および float も参照下さい。
整数(integer)は、10進数(基底10)、16進数(基底16)、8進数(基底8)表記 で指定可能です。オプションで、符号(-または+)を前に付けることが可 能です。
8進数表記を使用する場合、数の前に 0 (ゼロ)を付 ける必要があります。また、16進数表記を使用するには、数の前に 0x を付ける必要があります。
例 7-1整数リテラル
integer 型の範囲外の数を指定した場合、かわりに float として解釈されます。また、結果が integer 型の範囲外の数となるような計算を行うと float が代わりに返されます。
不幸にして、スクリプトエンジンにはバグがあり、負の数が 含まれている場合に、常に正しく動作するわけではありません。例えば、 -50000 * $million を実行した場合、結果は、 -429496728 となります。しかし、オペランドが共に 正の場合は問題ありません。
この問題はPHP 4.1.0で解決されました。
PHPには整数の割り算はありません。 1/2 は float型の0.5になります。
integer に値を明示的に変換するには、キャスト (int) または (integer) のど ちらかを使用して下さい。しかし、多くの場合、演算子、関数、制御構 造が integer 引数を必要とする場合、値は自動的に変換さ れるため、キャストを使用する必要はありません。
型の相互変換 を参照下さい。
FALSE は、 0 (ゼロ)となり、 TRUE は、 1 となります。
floatから整数に変換する場合、その数はゼロの方に丸められます。
floatが整数の範囲(通常は +/- 2.15e+9 = 2^31 )を越える場合、結果は undefined となります。これは、 そのfloatが正しい整数の結果を得るために十分な精度を得られなかっ たからです。この場合、警告も通知も発生しません!
未知の端数を integer にキャストしないで下さい。この 場合、予期しない結果となることがあります。
文字列変換 を参照下さい。

整数への変換の動作は、他の型については定義されません。現在の 動作は、その値がまず 論理値に変換 された 場合と同じです。しかし、この動作は予告なく変更 されることがありえるので、これを前提にしていはいけません。